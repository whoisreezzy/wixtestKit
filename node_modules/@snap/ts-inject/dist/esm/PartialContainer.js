import { entries } from "./entries";
import { memoize } from "./memoize";
import { ClassInjectable, Injectable } from "./Injectable";
export class PartialContainer {
    injectables;
    constructor(injectables) {
        this.injectables = injectables;
    }
    provides(fn) {
        return new PartialContainer({ ...this.injectables, [fn.token]: fn });
    }
    providesValue = (token, value) => this.provides(Injectable(token, [], () => value));
    providesClass = (token, cls) => this.provides(ClassInjectable(token, cls));
    getFactories(parent) {
        let factories = undefined;
        return (factories = Object.fromEntries(entries(this.injectables).map(([token, fn]) => [
            token,
            memoize(parent, () => fn(...fn.dependencies.map((t) => {
                return t === token
                    ? parent.get(t)
                    : factories[t]
                        ? factories[t]()
                        : parent.get(t);
            }))),
        ])));
    }
    getTokens() {
        return Object.keys(this.injectables);
    }
}
//# sourceMappingURL=PartialContainer.js.map
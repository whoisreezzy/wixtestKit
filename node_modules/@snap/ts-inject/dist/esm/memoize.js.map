{"version":3,"file":"memoize.js","sourceRoot":"","sources":["../../src/memoize.ts"],"names":[],"mappings":"AAQA,MAAM,UAAU,UAAU,CAAC,EAAW;IACpC,OAAO,OAAO,EAAE,KAAK,UAAU,IAAI,OAAQ,EAAU,CAAC,QAAQ,KAAK,UAAU,CAAC;AAChF,CAAC;AAED,MAAM,UAAU,OAAO,CAAyB,OAAY,EAAE,QAAY;IACxE,IAAI,IAAS,CAAC;IACd,MAAM,QAAQ,GAAG,CAAC,GAAG,IAAW,EAAE,EAAE;QAClC,IAAI,OAAO,IAAI,KAAK,WAAW;YAAE,OAAO,IAAI,CAAC;QAC7C,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAC9C,OAAO,IAAI,CAAC;IACd,CAAC,CAAC;IACF,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;IAC3B,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["type AnyFunction<A extends any[] = any[], B = any> = (...args: A) => B;\n\nexport type Memoized<Fn extends AnyFunction> = {\n  (...args: Parameters<Fn>): ReturnType<Fn>;\n  delegate: Fn;\n  thisArg: any;\n};\n\nexport function isMemoized(fn: unknown): fn is Memoized<AnyFunction> {\n  return typeof fn === \"function\" && typeof (fn as any).delegate === \"function\";\n}\n\nexport function memoize<Fn extends AnyFunction>(thisArg: any, delegate: Fn): Memoized<Fn> {\n  let memo: any;\n  const memoized = (...args: any[]) => {\n    if (typeof memo !== \"undefined\") return memo;\n    memo = delegate.apply(memoized.thisArg, args);\n    return memo;\n  };\n  memoized.delegate = delegate;\n  memoized.thisArg = thisArg;\n  return memoized;\n}\n"]}
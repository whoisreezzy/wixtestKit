"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Injectable = Injectable;
exports.InjectableCompat = InjectableCompat;
exports.ClassInjectable = ClassInjectable;
exports.ConcatInjectable = ConcatInjectable;
function Injectable(token, dependenciesOrFn, maybeFn) {
    const dependencies = Array.isArray(dependenciesOrFn) ? dependenciesOrFn : [];
    const fn = typeof dependenciesOrFn === "function" ? dependenciesOrFn : maybeFn;
    if (!fn) {
        throw new TypeError("[Injectable] Received invalid arguments. The factory function must be either the second " + "or third argument.");
    }
    if (fn.length !== dependencies.length) {
        throw new TypeError("[Injectable] Function arity does not match the number of dependencies. Function has arity " +
            `${fn.length}, but ${dependencies.length} dependencies were specified.` +
            `\nDependencies: ${JSON.stringify(dependencies)}`);
    }
    const factory = (...args) => fn(...args);
    factory.token = token;
    factory.dependencies = dependencies;
    return factory;
}
function InjectableCompat(token, dependencies, fn) {
    return Injectable(token, dependencies, fn);
}
function ClassInjectable(token, cls) {
    const factory = (...args) => new cls(...args);
    factory.token = token;
    factory.dependencies = cls.dependencies;
    return factory;
}
function ConcatInjectable(token, dependenciesOrFn, maybeFn) {
    const dependencies = Array.isArray(dependenciesOrFn) ? dependenciesOrFn : [];
    const fn = typeof dependenciesOrFn === "function" ? dependenciesOrFn : maybeFn;
    if (!fn) {
        throw new TypeError("[ConcatInjectable] Received invalid arguments. The factory function must be either the second " +
            "or third argument.");
    }
    if (fn.length !== dependencies.length) {
        throw new TypeError("[Injectable] Function arity does not match the number of dependencies. Function has arity " +
            `${fn.length}, but ${dependencies.length} dependencies were specified.` +
            `\nDependencies: ${JSON.stringify(dependencies)}`);
    }
    const factory = (array, ...args) => {
        return array.concat(fn(...args));
    };
    factory.token = token;
    factory.dependencies = [token, ...dependencies];
    return factory;
}
//# sourceMappingURL=Injectable.js.map
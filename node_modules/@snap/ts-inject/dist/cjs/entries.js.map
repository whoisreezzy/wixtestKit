{"version":3,"file":"entries.js","sourceRoot":"","sources":["../../src/entries.ts"],"names":[],"mappings":";;;AACO,MAAM,OAAO,GAAG,CAAiD,CAAI,EAAgC,EAAE,CAC5G,MAAM,CAAC,OAAO,CAAC,CAAC,CAA4C,CAAC;AADlD,QAAA,OAAO,WAC2C;AAGxD,MAAM,WAAW,GAAG,CAAwC,OAA8B,EAAgB,EAAE,CACjH,MAAM,CAAC,WAAW,CAAC,OAAO,CAAiB,CAAC;AADjC,QAAA,WAAW,eACsB","sourcesContent":["// `Object.entries` does not use `keyof` types, so it loses type specificity. We'll fix this with a wrapper.\nexport const entries = <T extends { [s: string]: U } | ArrayLike<U>, U>(o: T): Array<[keyof T, T[keyof T]]> =>\n  Object.entries(o) as unknown as Array<[keyof T, T[keyof T]]>;\n\n// `Object.fromEntries` similarly does not preserve key types.\nexport const fromEntries = <K extends string | number | symbol, V>(entries: ReadonlyArray<[K, V]>): Record<K, V> =>\n  Object.fromEntries(entries) as Record<K, V>;\n"]}
{"version":3,"file":"lensCoreError.js","sourceRoot":"","sources":["../../src/lens-core-module/lensCoreError.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAC;AA4BrD,MAAM,kBAAkB,GAA4C;IAChE,mBAAmB,EAAE,CAAC;IACtB,UAAU,EAAE,CAAC;IACb,aAAa,EAAE,CAAC;IAChB,aAAa,EAAE,CAAC;IAChB,KAAK,EAAE,CAAC;IACR,aAAa,EAAE,CAAC;CACnB,CAAC;AAIF,MAAM,iBAAiB,GAAG,MAAM,CAAC,WAAW,CACxC,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAA4B,CAAU,CAAC,CAC9G,CAAC;AAEF,MAAM,UAAU,iBAAiB,CAAC,YAAqB,EAAE,YAAqB;;IAC1E,MAAM,OAAO,GAAG,WAAW,CAAC,YAAY,CAAwB,CAAC;IACjE,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;QACpD,KAAK,EACD,OAAO,CAAC,eAAe,KAAI,MAAA,OAAO,CAAC,KAAK,0CAAE,QAAQ,CAAA;YAC9C,CAAC,CAAC;gBACI,eAAe,EAAE,OAAO,CAAC,eAAe;gBACxC,QAAQ,EAAE,MAAA,OAAO,CAAC,KAAK,0CAAE,QAAQ;aACpC;YACH,CAAC,CAAC,SAAS;KACtB,CAAkB,CAAC;IACpB,MAAM,WAAW,GAAG,MAAA,MAAA,OAAO,CAAC,KAAK,0CAAE,IAAI,0CAAE,KAAK,CAAC;IAC/C,MAAM,IAAI,GAAmD,WACzD,MAAA,iBAAiB,CAAC,WAAW,CAAC,mCAAI,SACtC,OAAgB,CAAC;IACjB,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;IAClB,KAAK,CAAC,YAAY,GAAG,YAAY,CAAC;IAClC,IAAI,OAAO,CAAC,KAAK,EAAE;QAGf,MAAM,CAAC,CAAC,EAAE,GAAG,UAAU,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACrD,IAAI,KAAK,CAAC,KAAK,EAAE;YACb,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SAClD;QACD,KAAK,CAAC,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACvC;IACD,OAAO,KAAK,CAAC;AACjB,CAAC","sourcesContent":["import { ensureError } from \"../common/errorHelpers\";\nimport type { LensCoreError as NativeLensCoreError, LensCoreModule } from \"./generated-types\";\n\ntype ErrorName = `${string}Error`;\ntype NamedError<Name extends ErrorName> = Error & { name: Name; isFrameError: boolean };\n\nexport type LensCoreLensDeserializationError = NamedError<\"LensCoreLensDeserializationError\">;\nexport type LensCoreValidationError = NamedError<\"LensCoreValidationError\">;\nexport type LensCoreUncategorizedError = NamedError<\"LensCoreUncategorizedError\">;\nexport type LensCoreLensExecutionError = NamedError<\"LensCoreLensExecutionError\">;\nexport type LensCoreAbortError = NamedError<\"LensCoreAbortError\">;\nexport type LensCoreUninitializedError = NamedError<\"LensCoreUninitializedError\">;\nexport type LensCoreUnknownError = NamedError<\"LensCoreUnknownError\">;\n\nexport type LensCoreError =\n    | LensCoreLensDeserializationError\n    | LensCoreValidationError\n    | LensCoreUncategorizedError\n    | LensCoreLensExecutionError\n    | LensCoreAbortError\n    | LensCoreUninitializedError;\n\ntype NativeLensCoreErrorName = keyof LensCoreModule[\"ErrorType\"];\n\n// Construct a map linking each LensCore error name to its value,\n// designed to trigger a compile-time error if an error is added or removed in LensCore.\n// eslint-disable-next-line max-len\n// https://github.sc-corp.net/Snapchat/LensCore/blob/285ac47cad7fe5268f38d1bab82d51b7b19d6b48/Src/PlatformSpecific/WebAssembly/ErrorType.hpp#L4\nconst lensCoreErrorValue: Record<NativeLensCoreErrorName, number> = {\n    LensDeserialization: 0,\n    Validation: 1,\n    Uncategorized: 2,\n    LensExecution: 3,\n    Abort: 4,\n    Uninitialized: 5,\n};\n\n// The purpose of lensCoreErrorValue above is to safeguard integrity.\n// To achieve constant lookup times, we must swap the keys with their corresponding values.\nconst lensCoreErrorName = Object.fromEntries(\n    Object.entries(lensCoreErrorValue).map((entry) => [entry[1], entry[0] as NativeLensCoreErrorName] as const)\n);\n\nexport function wrapLensCoreError(unknownError: unknown, isFrameError: boolean): LensCoreError {\n    const lcError = ensureError(unknownError) as NativeLensCoreError;\n    const error = new Error(lcError.message.split(\"\\n\")[0], {\n        cause:\n            lcError.otherExceptions || lcError.cause?.metadata\n                ? {\n                      otherExceptions: lcError.otherExceptions,\n                      metadata: lcError.cause?.metadata,\n                  }\n                : undefined,\n    }) as LensCoreError;\n    const lcErrorType = lcError.cause?.type?.value;\n    const name: (LensCoreError | LensCoreUnknownError)[\"name\"] = `LensCore${\n        lensCoreErrorName[lcErrorType] ?? \"Unknown\"\n    }Error` as const;\n    error.name = name;\n    error.isFrameError = isFrameError;\n    if (lcError.stack) {\n        // if cause has a stack, then we just replace the first line of it\n        // which is actually a error message with our new one, which also contains new error name\n        const [_, ...stackLines] = lcError.stack.split(\"\\n\");\n        if (error.stack) {\n            stackLines.unshift(error.stack.split(\"\\n\")[0]);\n        }\n        error.stack = stackLines.join(\"\\n\");\n    }\n    return error;\n}\n"]}
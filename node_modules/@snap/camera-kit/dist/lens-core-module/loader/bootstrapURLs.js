import { __awaiter } from "tslib";
import { getPlatformCapabilities } from "../../platform/platformCapabilities";
import { getPlatformInfo } from "../../platform/platformInfo";
const wasmAssets = ["LensCoreWebAssembly.js", "LensCoreWebAssembly.wasm"];
export function getBuildFlavor({ simd, exceptionHandling, relaxedSimd }, buildNumber) {
    const relaxedBuildAvailable = parseInt(buildNumber) >= Number.MAX_SAFE_INTEGER;
    if (relaxedBuildAvailable && relaxedSimd) {
        return "rel-relaxed-simd-neh";
    }
    else if (simd) {
        if (exceptionHandling) {
            return "rel-simd-neh";
        }
        else {
            return "release-simd";
        }
    }
    else if (exceptionHandling) {
        return "rel-neh";
    }
    else {
        return "release";
    }
}
export function getRequiredBootstrapURLs(endpointOverride) {
    return __awaiter(this, void 0, void 0, function* () {
        const endpoint = endpointOverride === null || endpointOverride === void 0 ? void 0 : endpointOverride.replace(/[\/]+$/, "");
        const { wasm } = yield getPlatformCapabilities();
        if (!wasm.supported)
            throw wasm.error;
        const { lensCore } = getPlatformInfo();
        const version = lensCore.version;
        const buildNumber = lensCore.buildNumber;
        const flavor = getBuildFlavor(wasm.wasmFeatures, buildNumber);
        return wasmAssets.map((asset) => {
            if (endpoint)
                return `${endpoint}/${asset}`;
            const { origin, pathname, search } = new URL(lensCore.baseUrl);
            return `${origin}${pathname}/${version}/${buildNumber}/${flavor}/${asset}${search}`;
        });
    });
}
//# sourceMappingURL=bootstrapURLs.js.map
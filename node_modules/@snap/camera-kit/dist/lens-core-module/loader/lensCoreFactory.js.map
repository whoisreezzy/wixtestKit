{"version":3,"file":"lensCoreFactory.js","sourceRoot":"","sources":["../../../src/lens-core-module/loader/lensCoreFactory.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from \"@snap/ts-inject\";\nimport lensCoreWasm from \"../../lensCoreWasmVersions\";\nimport type { CameraKitConfiguration } from \"../../configuration\";\nimport { configurationToken } from \"../../configuration\";\nimport type { FetchHandler } from \"../../handlers/defaultFetchHandler\";\nimport { defaultFetchHandlerFactory } from \"../../handlers/defaultFetchHandler\";\nimport type { InitialEmscriptenModule, LensCoreModule } from \"../generated-types\";\nimport { getLogger } from \"../../logger/logger\";\nimport { createLensCore } from \"../lensCore\";\nimport { loadScript } from \"../../common/loadScript\";\nimport { HandlerChainBuilder } from \"../../handlers/HandlerChainBuilder\";\nimport { createCustomLensCoreHandler } from \"../../handlers/customLensCoreHandler\";\nimport type { RequestStateEventTarget } from \"../../handlers/requestStateEmittingHandler\";\nimport {\n    createRequestStateEmittingHandler,\n    requestStateEventTargetFactory,\n} from \"../../handlers/requestStateEmittingHandler\";\nimport { getRequiredBootstrapURLs } from \"./bootstrapURLs\";\n\nconst logger = getLogger(\"lensCoreFactory\");\n\nconst findMatch = (regex: RegExp, strings: string[]) => strings.find((s) => regex.test(s));\n\nexport const LENS_CORE_JS_REQUEST_TYPE = \"lens_core_js\";\nexport const LENS_CORE_WASM_REQUEST_TYPE = \"lens_core_wasm\";\n\nexport interface LensCoreDownloadDimensions extends Record<string, string> {\n    requestType: typeof LENS_CORE_JS_REQUEST_TYPE | typeof LENS_CORE_WASM_REQUEST_TYPE;\n    customBuild: string;\n}\n\n/**\n * This component is responsible for:\n *   1) Loading LensCore WebAssembly (WASM) assets\n *   2) Using the WASM assets to initialize the LensCore WASM module\n *\n * By default, WASM assets will be loaded from the Bolt CDN â€“ but if `endpoint` is provided, assets will be loaded\n * using it as a base URL.\n *\n * @internal\n */\nexport const lensCoreFactory = Injectable(\n    \"lensCore\",\n    [defaultFetchHandlerFactory.token, configurationToken, requestStateEventTargetFactory.token] as const,\n    async (\n        handler: FetchHandler,\n        { lensCoreOverrideUrls, wasmEndpointOverride }: CameraKitConfiguration,\n        requestStateEventTarget: RequestStateEventTarget\n    ) => {\n        let lensCoreJS: string;\n        let lensCoreWASM: string;\n\n        const customBuild = !!(lensCoreOverrideUrls || wasmEndpointOverride);\n        let lensCoreHandlerChainBuilder = new HandlerChainBuilder(handler);\n        if (customBuild) {\n            // We only use custom handler when LensCore is loaded from a custom location.\n            lensCoreHandlerChainBuilder = lensCoreHandlerChainBuilder.map(createCustomLensCoreHandler());\n        }\n        // add metrics to LC requests\n        const lensCoreHandler = lensCoreHandlerChainBuilder.map(\n            // TODO: ideally we don't need it here: https://jira.sc-corp.net/browse/CAMKIT-6350\n            createRequestStateEmittingHandler<LensCoreDownloadDimensions>(requestStateEventTarget)\n        ).handler;\n\n        if (lensCoreOverrideUrls) {\n            lensCoreJS = lensCoreOverrideUrls.js;\n            lensCoreWASM = lensCoreOverrideUrls.wasm;\n        } else {\n            const endpointOverride = wasmEndpointOverride ?? undefined;\n            const assetURLs = await getRequiredBootstrapURLs(endpointOverride);\n\n            lensCoreJS = findMatch(/\\.js/, assetURLs) ?? \"\";\n            lensCoreWASM = findMatch(/\\.wasm/, assetURLs) ?? \"\";\n\n            if (!lensCoreJS || !lensCoreWASM) {\n                throw new Error(\n                    `Cannot fetch required LensCore assets. Either the JS or WASM filename is missing from ` +\n                        `this list: ${assetURLs}.`\n                );\n            }\n\n            // Fetching here and creating an Object URL lets LensCore optimized loading itself in a WebWorker,\n            // otherwise the glue script would need to be downloaded again.\n            const glueScript = await lensCoreHandler([\n                lensCoreJS,\n                { requestType: LENS_CORE_JS_REQUEST_TYPE, customBuild: `${customBuild}` },\n            ]).then((r) => r.blob());\n            lensCoreJS = URL.createObjectURL(glueScript);\n        }\n\n        const scriptElement = await loadScript(lensCoreJS);\n\n        const lensCore = await new Promise<InitialEmscriptenModule & LensCoreModule>((resolve, reject) => {\n            let initialModule: Partial<InitialEmscriptenModule>;\n            // will trigger WASM initialization and data loading,\n            // after completion it will be safe to call imported WASM functions\n            // More about emscripten initialization:\n            // eslint-disable-next-line max-len\n            // https://emscripten.org/docs/getting_started/FAQ.html?highlight=modularize#how-can-i-tell-when-the-page-is-fully-loaded-and-it-is-safe-to-call-compiled-functions\n            const moduleInit = globalThis.createLensesModule(\n                (initialModule = {\n                    // url will be used for loading glue JS during Worker initialization\n                    mainScriptUrlOrBlob: lensCoreJS,\n                    // will be triggered by Emscripten during the initialization\n                    instantiateWasm: (importObject, receiveInstance) => {\n                        WebAssembly.instantiateStreaming(\n                            lensCoreHandler([\n                                lensCoreWASM,\n                                { requestType: LENS_CORE_WASM_REQUEST_TYPE, customBuild: `${customBuild}` },\n                            ]),\n                            importObject\n                        )\n                            .then(function ({ instance, module }) {\n                                receiveInstance(instance, module);\n                                // compiled module will be reused in Worker\n                                initialModule.compiledModule = module;\n                                resolve(moduleInit);\n                            })\n                            .catch(reject);\n                    },\n                })\n            );\n        });\n\n        // now when we have LensCore WASM in memory we can release the script element\n        scriptElement.remove();\n\n        // print warning if loaded version differs from hardcoded one\n        if (lensCoreWasm.version != `${lensCore.getCoreVersion()}`) {\n            logger.warn(\n                `Loaded LensCore version (${lensCore.getCoreVersion()}) differs from expected one (${\n                    lensCoreWasm.version\n                })`\n            );\n        }\n\n        return createLensCore(lensCore);\n    }\n);\n"]}
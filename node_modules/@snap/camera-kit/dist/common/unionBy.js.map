{"version":3,"file":"unionBy.js","sourceRoot":"","sources":["../../src/common/unionBy.ts"],"names":[],"mappings":"AA2BA,MAAM,UAAU,OAAO,CAAI,QAA0C,EAAE,GAAG,MAAa;IACnF,MAAM,kBAAkB,GAAG,GAAG,EAAE;QAC5B,MAAM,IAAI,KAAK,CAAC,iEAAiE,CAAC,CAAC;IACvF,CAAC,CAAC;IAKF,MAAM,IAAI,GAAG,IAAI,GAAG,EAAc,CAAC;IAEnC,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,IAAI,EAAE,EAAE;QAC9B,MAAM,GAAG,GACL,OAAO,QAAQ,KAAK,UAAU;YAC1B,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;YAChB,CAAC,CAAC,OAAO,IAAI,KAAK,QAAQ,IAAI,IAAI,KAAK,IAAI,IAAI,QAAQ,IAAI,IAAI;gBAC/D,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;gBAChB,CAAC,CAAC,kBAAkB,EAAE,CAAC;QAE/B,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;KACvB;IAED,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;AACrC,CAAC","sourcesContent":["/**\n * Creates an array of unique values, in order, from all given arrays using a specified iteratee.\n * If multiple elements have the same key generated by the iteratee, the last occurrence is kept.\n *\n * @param {((item: T) => unknown) | keyof T} iteratee - The iteratee invoked per element.\n * @param {...T[][]} arrays - The arrays to inspect and unite.\n * @returns {T[]} - Returns the new array of combined elements, preserving the order of last occurrences.\n * @example\n * // Using a property name as iteratee\n * const result = unionBy(\n *   'id',\n *   [{ id: 1, name: 'John' }, { id: 2, name: 'Jane' }],\n *   [{ id: 1, name: 'Sally' }, { id: 3, name: 'Doe' }]\n * );\n * console.log(result);\n * // Output: [{ id: 1, name: 'Sally' }, { id: 2, name: 'Jane' }, { id: 3, name: 'Doe' }]\n *\n * @example\n * // Using a function as iteratee\n * const result = unionBy(\n *   item => item.id,\n *   [{ id: 1, name: 'John' }, { id: 2, name: 'Jane' }],\n *   [{ id: 1, name: 'Sally' }, { id: 3, name: 'Doe' }]\n * );\n * console.log(result);\n * // Output: [{ id: 1, name: 'Sally' }, { id: 2, name: 'Jane' }, { id: 3, name: 'Doe' }]\n */\nexport function unionBy<T>(iteratee: ((item: T) => unknown) | keyof T, ...arrays: T[][]): T[] {\n    const throwIterateeError = () => {\n        throw new Error(\"Iteratee must be a function or a valid property key of the item\");\n    };\n\n    // One helpful feature of Map is maintainig the insertion order of elements. This is particularly nice for the\n    // unionBy function since it ensures that the combined array preserves the order of elements as they first appear\n    // in the input arrays.\n    const seen = new Map<unknown, T>();\n\n    for (const item of arrays.flat()) {\n        const key =\n            typeof iteratee === \"function\"\n                ? iteratee(item)\n                : typeof item === \"object\" && item !== null && iteratee in item\n                ? item[iteratee]\n                : throwIterateeError();\n\n        seen.set(key, item);\n    }\n\n    return Array.from(seen.values());\n}\n"]}
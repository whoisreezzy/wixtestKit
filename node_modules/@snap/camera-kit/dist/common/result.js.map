{"version":3,"file":"result.js","sourceRoot":"","sources":["../../src/common/result.ts"],"names":[],"mappings":"AAkBA,MAAM,OAAO,QAAQ;IAEjB,YAA6B,KAAQ;QAAR,UAAK,GAAL,KAAK,CAAG;QAD5B,OAAE,GAAG,IAAI,CAAC;IACqB,CAAC;IAEzC,MAAM;QACF,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAED,SAAS;QACL,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;IACnD,CAAC;IAED,GAAG,CAAK,CAAmB;QACvB,OAAO,IAAI,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IACvC,CAAC;IAKD,OAAO,CAAqC,CAAkB;QAC1D,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACzB,CAAC;CACJ;AAED,MAAM,CAAC,MAAM,EAAE,GAAG,CAAI,KAAQ,EAAE,EAAE,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC;AAEvD,MAAM,OAAO,SAAS;IAElB,YAA6B,KAAQ;QAAR,UAAK,GAAL,KAAK,CAAG;QAD5B,OAAE,GAAG,KAAK,CAAC;IACoB,CAAC;IAEzC,MAAM;QACF,MAAM,IAAI,CAAC,KAAK,CAAC;IACrB,CAAC;IAED,SAAS;QACL,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAED,GAAG;QACC,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,OAAO;QACH,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ;AAED,MAAM,CAAC,MAAM,GAAG,GAAG,CAAI,KAAQ,EAAE,EAAE,CAAC,IAAI,SAAS,CAAC,KAAK,CAAC,CAAC","sourcesContent":["/* eslint-disable max-classes-per-file */\n\ninterface BaseResult<T, E> {\n    readonly ok: boolean;\n\n    unwrap(): T;\n    unwrapErr(): E;\n\n    map<T2>(m: (value: T) => T2): Result<T2, E>;\n    flatMap<T2 extends OkResult<unknown>>(m: (value: T) => T2): Result<ValueOf<T2>, E>;\n    flatMap<E2 extends ErrResult<unknown>>(m: (value: T) => E2): Result<T, E | ValueOf<E2>>;\n    flatMap<R extends Result<unknown, unknown>>(m: (value: T) => R): Result<OkValueOf<R>, E | ErrValueOf<R>>;\n}\n\ntype OkValueOf<R> = R extends OkResult<infer T> ? T : never;\ntype ErrValueOf<R> = R extends ErrResult<infer E> ? E : never;\ntype ValueOf<R> = OkValueOf<R> | ErrValueOf<R>;\n\nexport class OkResult<T> implements BaseResult<T, never> {\n    readonly ok = true;\n    constructor(private readonly value: T) {}\n\n    unwrap(): T {\n        return this.value;\n    }\n\n    unwrapErr(): never {\n        throw new Error(\"Ok Result cannot unwrapErr.\");\n    }\n\n    map<T2>(m: (value: T) => T2): OkResult<T2> {\n        return new OkResult(m(this.value));\n    }\n\n    flatMap<T2 extends OkResult<unknown>>(m: (value: T) => T2): T2;\n    flatMap<E2 extends ErrResult<unknown>>(m: (value: T) => E2): E2;\n    flatMap<R extends Result<unknown, unknown>>(m: (value: T) => R): R;\n    flatMap<R extends Result<unknown, unknown>>(m: (value: T) => R): R {\n        return m(this.value);\n    }\n}\n\nexport const Ok = <T>(value: T) => new OkResult(value);\n\nexport class ErrResult<E> implements BaseResult<never, E> {\n    readonly ok = false;\n    constructor(private readonly value: E) {}\n\n    unwrap(): never {\n        throw this.value;\n    }\n\n    unwrapErr(): E {\n        return this.value;\n    }\n\n    map(): ErrResult<E> {\n        return this;\n    }\n\n    flatMap(): ErrResult<E> {\n        return this;\n    }\n}\n\nexport const Err = <E>(value: E) => new ErrResult(value);\n\nexport type Result<T, E> = OkResult<T> | ErrResult<E>;\n"]}
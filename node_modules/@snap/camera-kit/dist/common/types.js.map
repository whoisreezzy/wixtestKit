{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/common/types.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * For instances where we'd like to define a Tuple to be of certain type and length.\n * Example: TupleOf<number, 3> // [number, number, number]\n *\n * For more example and use cases regarding Recursive conditional types\n * see: https://github.com/microsoft/TypeScript/pull/40002\n *\n * @internal\n */\ntype _TupleOf<T, N extends number, R extends unknown[]> = R[\"length\"] extends N ? R : _TupleOf<T, N, [T, ...R]>;\nexport type TupleOf<T, N extends number> = N extends N ? (number extends N ? T[] : _TupleOf<T, N, []>) : never;\n\n/**\n * Converts snake_case string literal types to camelCase.\n *\n * @internal\n */\nexport type SnakeToCamelCase<S extends string> = S extends `${infer T}_${infer U}`\n    ? `${T}${Capitalize<SnakeToCamelCase<U>>}`\n    : S;\n\n/**\n * Converts camelCase string literal types to snake_case.\n *\n * @internal\n */\nexport type CamelToSnakeCase<S extends string> = S extends `${infer T}${infer U}`\n    ? `${T extends Capitalize<T> ? \"_\" : \"\"}${Lowercase<T>}${CamelToSnakeCase<U>}`\n    : S;\n\n/**\n * Maps an enum (usually defined in proto) to a record with publicly facing keys as camelCase string literals.\n * The keys of the resulting record are the camelCased versions of the original enum keys,\n * and the values are the corresponding enum values.\n *\n * @template T - The enum type to be transformed.\n *\n * @internal\n */\nexport type EnumToPublicStringLiteralMap<T> = {\n    [K in keyof T as SnakeToCamelCase<Lowercase<K & string>>]: T[K];\n};\n\nexport type ExcludeKeys<T, K extends keyof T> = Omit<T, K>;\n"]}
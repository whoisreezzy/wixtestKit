import { BinaryWriter } from "@bufbuild/protobuf/wire";
export const ServerEventBatch = {
    encode(message, writer = new BinaryWriter()) {
        if (message.serverUploadTs !== 0) {
            writer.uint32(9).double(message.serverUploadTs);
        }
        for (const v of message.serverAllUpdateEvents) {
            ServerRequestAllUpdates.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.maxSequenceIdOnInstance !== "0") {
            writer.uint32(24).uint64(message.maxSequenceIdOnInstance);
        }
        for (const v of message.serverEvents) {
            ServerEvent.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode() {
        throw new Error("Not implemented.");
    },
    fromJSON() {
        throw new Error("Not implemented.");
    },
    toJSON() {
        throw new Error("Not implemented.");
    },
    create() {
        throw new Error("Not implemented.");
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseServerEventBatch();
        message.serverUploadTs = (_a = object.serverUploadTs) !== null && _a !== void 0 ? _a : 0;
        message.serverAllUpdateEvents = ((_b = object.serverAllUpdateEvents) === null || _b === void 0 ? void 0 : _b.map((e) => ServerRequestAllUpdates.fromPartial(e))) ||
            [];
        message.maxSequenceIdOnInstance = (_c = object.maxSequenceIdOnInstance) !== null && _c !== void 0 ? _c : "0";
        message.serverEvents = ((_d = object.serverEvents) === null || _d === void 0 ? void 0 : _d.map((e) => ServerEvent.fromPartial(e))) || [];
        return message;
    },
};
function createBaseServerEventBatch() {
    return { serverUploadTs: 0, serverAllUpdateEvents: [], maxSequenceIdOnInstance: "0", serverEvents: [] };
}
export const ServerRequestAllUpdates = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode() {
        throw new Error("Not implemented.");
    },
    fromJSON() {
        throw new Error("Not implemented.");
    },
    toJSON() {
        throw new Error("Not implemented.");
    },
    create() {
        throw new Error("Not implemented.");
    },
    fromPartial(_) {
        const message = createBaseServerRequestAllUpdates();
        return message;
    },
};
function createBaseServerRequestAllUpdates() {
    return {};
}
export const ServerEvent = {
    encode(message, writer = new BinaryWriter()) {
        if (message.eventName !== "") {
            writer.uint32(10).string(message.eventName);
        }
        if (message.serverTs !== 0) {
            writer.uint32(25).double(message.serverTs);
        }
        if (message.userId !== "") {
            writer.uint32(34).string(message.userId);
        }
        if (message.userAgent !== "") {
            writer.uint32(42).string(message.userAgent);
        }
        if (message.country !== "") {
            writer.uint32(50).string(message.country);
        }
        if (message.city !== "") {
            writer.uint32(58).string(message.city);
        }
        if (message.region !== "") {
            writer.uint32(66).string(message.region);
        }
        if (message.eventId !== "") {
            writer.uint32(74).string(message.eventId);
        }
        if (message.instanceId !== "") {
            writer.uint32(82).string(message.instanceId);
        }
        if (message.sequenceId !== "0") {
            writer.uint32(88).uint64(message.sequenceId);
        }
        if (message.osType !== "") {
            writer.uint32(98).string(message.osType);
        }
        if (message.osVersion !== "") {
            writer.uint32(106).string(message.osVersion);
        }
        if (message.appVersion !== "") {
            writer.uint32(114).string(message.appVersion);
        }
        if (message.appBuild !== "") {
            writer.uint32(122).string(message.appBuild);
        }
        if (message.serverUploadTs !== 0) {
            writer.uint32(809).double(message.serverUploadTs);
        }
        if (message.eventTime !== 0) {
            writer.uint32(817).double(message.eventTime);
        }
        if (message.serverReceiptTime !== 0) {
            writer.uint32(825).double(message.serverReceiptTime);
        }
        if (message.maxSequenceIdOnInstance !== "0") {
            writer.uint32(832).uint64(message.maxSequenceIdOnInstance);
        }
        if (message.userGuid !== "") {
            writer.uint32(850).string(message.userGuid);
        }
        if (message.collection !== 0) {
            writer.uint32(872).int32(message.collection);
        }
        if (message.serviceId !== "") {
            writer.uint32(890).string(message.serviceId);
        }
        if (message.appType !== 0) {
            writer.uint32(912).int32(message.appType);
        }
        if (message.spectrumInstanceId !== "") {
            writer.uint32(930).string(message.spectrumInstanceId);
        }
        if (message.spectrumSequenceId !== "0") {
            writer.uint32(944).uint64(message.spectrumSequenceId);
        }
        if (message.eventData !== undefined) {
            ServerEventData.encode(message.eventData, writer.uint32(802).fork()).join();
        }
        return writer;
    },
    decode() {
        throw new Error("Not implemented.");
    },
    fromJSON() {
        throw new Error("Not implemented.");
    },
    toJSON() {
        throw new Error("Not implemented.");
    },
    create() {
        throw new Error("Not implemented.");
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z;
        const message = createBaseServerEvent();
        message.eventName = (_a = object.eventName) !== null && _a !== void 0 ? _a : "";
        message.serverTs = (_b = object.serverTs) !== null && _b !== void 0 ? _b : 0;
        message.userId = (_c = object.userId) !== null && _c !== void 0 ? _c : "";
        message.userAgent = (_d = object.userAgent) !== null && _d !== void 0 ? _d : "";
        message.country = (_e = object.country) !== null && _e !== void 0 ? _e : "";
        message.city = (_f = object.city) !== null && _f !== void 0 ? _f : "";
        message.region = (_g = object.region) !== null && _g !== void 0 ? _g : "";
        message.eventId = (_h = object.eventId) !== null && _h !== void 0 ? _h : "";
        message.instanceId = (_j = object.instanceId) !== null && _j !== void 0 ? _j : "";
        message.sequenceId = (_k = object.sequenceId) !== null && _k !== void 0 ? _k : "0";
        message.osType = (_l = object.osType) !== null && _l !== void 0 ? _l : "";
        message.osVersion = (_m = object.osVersion) !== null && _m !== void 0 ? _m : "";
        message.appVersion = (_o = object.appVersion) !== null && _o !== void 0 ? _o : "";
        message.appBuild = (_p = object.appBuild) !== null && _p !== void 0 ? _p : "";
        message.serverUploadTs = (_q = object.serverUploadTs) !== null && _q !== void 0 ? _q : 0;
        message.eventTime = (_r = object.eventTime) !== null && _r !== void 0 ? _r : 0;
        message.serverReceiptTime = (_s = object.serverReceiptTime) !== null && _s !== void 0 ? _s : 0;
        message.maxSequenceIdOnInstance = (_t = object.maxSequenceIdOnInstance) !== null && _t !== void 0 ? _t : "0";
        message.userGuid = (_u = object.userGuid) !== null && _u !== void 0 ? _u : "";
        message.collection = (_v = object.collection) !== null && _v !== void 0 ? _v : 0;
        message.serviceId = (_w = object.serviceId) !== null && _w !== void 0 ? _w : "";
        message.appType = (_x = object.appType) !== null && _x !== void 0 ? _x : 0;
        message.spectrumInstanceId = (_y = object.spectrumInstanceId) !== null && _y !== void 0 ? _y : "";
        message.spectrumSequenceId = (_z = object.spectrumSequenceId) !== null && _z !== void 0 ? _z : "0";
        message.eventData = (object.eventData !== undefined && object.eventData !== null)
            ? ServerEventData.fromPartial(object.eventData)
            : undefined;
        return message;
    },
};
function createBaseServerEvent() {
    return {
        eventName: "",
        serverTs: 0,
        userId: "",
        userAgent: "",
        country: "",
        city: "",
        region: "",
        eventId: "",
        instanceId: "",
        sequenceId: "0",
        osType: "",
        osVersion: "",
        appVersion: "",
        appBuild: "",
        serverUploadTs: 0,
        eventTime: 0,
        serverReceiptTime: 0,
        maxSequenceIdOnInstance: "0",
        userGuid: "",
        collection: 0,
        serviceId: "",
        appType: 0,
        spectrumInstanceId: "",
        spectrumSequenceId: "0",
        eventData: undefined,
    };
}
export const ServerEventData = {
    encode(message, writer = new BinaryWriter()) {
        if (message.cameraKitException !== undefined) {
            CameraKitException.encode(message.cameraKitException, writer.uint32(1866).fork()).join();
        }
        if (message.cameraKitLensSpin !== undefined) {
            CameraKitLensSpin.encode(message.cameraKitLensSpin, writer.uint32(1874).fork()).join();
        }
        if (message.cameraKitAssetDownload !== undefined) {
            CameraKitAssetDownload.encode(message.cameraKitAssetDownload, writer.uint32(1882).fork()).join();
        }
        if (message.cameraKitLensContentValidationFailed !== undefined) {
            CameraKitLensContentValidationFailed.encode(message.cameraKitLensContentValidationFailed, writer.uint32(1922).fork()).join();
        }
        if (message.cameraKitLensDownload !== undefined) {
            CameraKitLensDownload.encode(message.cameraKitLensDownload, writer.uint32(1930).fork()).join();
        }
        if (message.cameraKitAssetValidationFailed !== undefined) {
            CameraKitAssetValidationFailed.encode(message.cameraKitAssetValidationFailed, writer.uint32(1938).fork()).join();
        }
        if (message.cameraKitSession !== undefined) {
            CameraKitSession.encode(message.cameraKitSession, writer.uint32(2130).fork()).join();
        }
        if (message.cameraKitWebLensSwipe !== undefined) {
            CameraKitWebLensSwipe.encode(message.cameraKitWebLensSwipe, writer.uint32(3818).fork()).join();
        }
        if (message.cameraKitWebBenchmarkComplete !== undefined) {
            CameraKitWebBenchmarkComplete.encode(message.cameraKitWebBenchmarkComplete, writer.uint32(3826).fork()).join();
        }
        if (message.cameraKitLegalPrompt !== undefined) {
            CameraKitLegalPrompt.encode(message.cameraKitLegalPrompt, writer.uint32(3874).fork()).join();
        }
        return writer;
    },
    decode() {
        throw new Error("Not implemented.");
    },
    fromJSON() {
        throw new Error("Not implemented.");
    },
    toJSON() {
        throw new Error("Not implemented.");
    },
    create() {
        throw new Error("Not implemented.");
    },
    fromPartial(object) {
        const message = createBaseServerEventData();
        message.cameraKitException = (object.cameraKitException !== undefined && object.cameraKitException !== null)
            ? CameraKitException.fromPartial(object.cameraKitException)
            : undefined;
        message.cameraKitLensSpin = (object.cameraKitLensSpin !== undefined && object.cameraKitLensSpin !== null)
            ? CameraKitLensSpin.fromPartial(object.cameraKitLensSpin)
            : undefined;
        message.cameraKitAssetDownload =
            (object.cameraKitAssetDownload !== undefined && object.cameraKitAssetDownload !== null)
                ? CameraKitAssetDownload.fromPartial(object.cameraKitAssetDownload)
                : undefined;
        message.cameraKitLensContentValidationFailed =
            (object.cameraKitLensContentValidationFailed !== undefined &&
                object.cameraKitLensContentValidationFailed !== null)
                ? CameraKitLensContentValidationFailed.fromPartial(object.cameraKitLensContentValidationFailed)
                : undefined;
        message.cameraKitLensDownload =
            (object.cameraKitLensDownload !== undefined && object.cameraKitLensDownload !== null)
                ? CameraKitLensDownload.fromPartial(object.cameraKitLensDownload)
                : undefined;
        message.cameraKitAssetValidationFailed =
            (object.cameraKitAssetValidationFailed !== undefined && object.cameraKitAssetValidationFailed !== null)
                ? CameraKitAssetValidationFailed.fromPartial(object.cameraKitAssetValidationFailed)
                : undefined;
        message.cameraKitSession = (object.cameraKitSession !== undefined && object.cameraKitSession !== null)
            ? CameraKitSession.fromPartial(object.cameraKitSession)
            : undefined;
        message.cameraKitWebLensSwipe =
            (object.cameraKitWebLensSwipe !== undefined && object.cameraKitWebLensSwipe !== null)
                ? CameraKitWebLensSwipe.fromPartial(object.cameraKitWebLensSwipe)
                : undefined;
        message.cameraKitWebBenchmarkComplete =
            (object.cameraKitWebBenchmarkComplete !== undefined && object.cameraKitWebBenchmarkComplete !== null)
                ? CameraKitWebBenchmarkComplete.fromPartial(object.cameraKitWebBenchmarkComplete)
                : undefined;
        message.cameraKitLegalPrompt = (object.cameraKitLegalPrompt !== undefined && object.cameraKitLegalPrompt !== null)
            ? CameraKitLegalPrompt.fromPartial(object.cameraKitLegalPrompt)
            : undefined;
        return message;
    },
};
function createBaseServerEventData() {
    return {
        cameraKitException: undefined,
        cameraKitLensSpin: undefined,
        cameraKitAssetDownload: undefined,
        cameraKitLensContentValidationFailed: undefined,
        cameraKitLensDownload: undefined,
        cameraKitAssetValidationFailed: undefined,
        cameraKitSession: undefined,
        cameraKitWebLensSwipe: undefined,
        cameraKitWebBenchmarkComplete: undefined,
        cameraKitLegalPrompt: undefined,
    };
}
export var AppType;
(function (AppType) {
    AppType[AppType["IOS_NATIVE"] = 0] = "IOS_NATIVE";
    AppType[AppType["IOS_WEB_DESKTOP"] = 1] = "IOS_WEB_DESKTOP";
    AppType[AppType["IOS_WEB_MOBILE"] = 2] = "IOS_WEB_MOBILE";
    AppType[AppType["ANDROID_NATIVE"] = 3] = "ANDROID_NATIVE";
    AppType[AppType["ANDROID_WEB_DESKTOP"] = 4] = "ANDROID_WEB_DESKTOP";
    AppType[AppType["ANDROID_WEB_MOBILE"] = 5] = "ANDROID_WEB_MOBILE";
    AppType[AppType["OSX_WEB_DESKTOP"] = 6] = "OSX_WEB_DESKTOP";
    AppType[AppType["OSX_WEB_MOBILE"] = 7] = "OSX_WEB_MOBILE";
    AppType[AppType["WINDOWS_WEB_DESKTOP"] = 8] = "WINDOWS_WEB_DESKTOP";
    AppType[AppType["WINDOWS_WEB_MOBILE"] = 9] = "WINDOWS_WEB_MOBILE";
    AppType[AppType["LINUX_WEB_DESKTOP"] = 10] = "LINUX_WEB_DESKTOP";
    AppType[AppType["LINUX_WEB_MOBILE"] = 11] = "LINUX_WEB_MOBILE";
    AppType[AppType["LENSSTUDIO"] = 12] = "LENSSTUDIO";
    AppType[AppType["SNAPCAMERA"] = 13] = "SNAPCAMERA";
    AppType[AppType["WEB_DESKTOP"] = 14] = "WEB_DESKTOP";
    AppType[AppType["WEB_MOBILE"] = 15] = "WEB_MOBILE";
    AppType[AppType["LENSSTUDIO_REMAKE"] = 16] = "LENSSTUDIO_REMAKE";
    AppType[AppType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(AppType || (AppType = {}));
export var Collection;
(function (Collection) {
    Collection[Collection["COLLECTION_UNUSED"] = 0] = "COLLECTION_UNUSED";
    Collection[Collection["GAE"] = 1] = "GAE";
    Collection[Collection["GCE_M"] = 2] = "GCE_M";
    Collection[Collection["GCE_S"] = 3] = "GCE_S";
    Collection[Collection["GCE_T"] = 4] = "GCE_T";
    Collection[Collection["GKE_M"] = 5] = "GKE_M";
    Collection[Collection["GKE_S"] = 6] = "GKE_S";
    Collection[Collection["GKE_T"] = 7] = "GKE_T";
    Collection[Collection["LOCAL"] = 8] = "LOCAL";
    Collection[Collection["GCE_ST"] = 9] = "GCE_ST";
    Collection[Collection["GKE_ST"] = 10] = "GKE_ST";
    Collection[Collection["GCE_C"] = 11] = "GCE_C";
    Collection[Collection["GCE_SC"] = 12] = "GCE_SC";
    Collection[Collection["GCE_TC"] = 13] = "GCE_TC";
    Collection[Collection["GCE_TSC"] = 14] = "GCE_TSC";
    Collection[Collection["GKE_C"] = 15] = "GKE_C";
    Collection[Collection["GKE_SC"] = 16] = "GKE_SC";
    Collection[Collection["GKE_TC"] = 17] = "GKE_TC";
    Collection[Collection["GKE_TSC"] = 18] = "GKE_TSC";
    Collection[Collection["GKE_W"] = 19] = "GKE_W";
    Collection[Collection["GKE_WT"] = 20] = "GKE_WT";
    Collection[Collection["GKE_WC"] = 21] = "GKE_WC";
    Collection[Collection["GKE_WSC"] = 22] = "GKE_WSC";
    Collection[Collection["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Collection || (Collection = {}));
export const CameraKitLensSpin = {
    encode(message, writer = new BinaryWriter()) {
        if (message.cameraKitEventBase !== undefined) {
            CameraKitEventBase.encode(message.cameraKitEventBase, writer.uint32(10).fork()).join();
        }
        if (message.lensId !== "") {
            writer.uint32(18).string(message.lensId);
        }
        if (message.viewTimeSec !== 0) {
            writer.uint32(25).double(message.viewTimeSec);
        }
        if (message.lensGroupId !== "") {
            writer.uint32(34).string(message.lensGroupId);
        }
        return writer;
    },
    decode() {
        throw new Error("Not implemented.");
    },
    fromJSON() {
        throw new Error("Not implemented.");
    },
    toJSON() {
        throw new Error("Not implemented.");
    },
    create() {
        throw new Error("Not implemented.");
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseCameraKitLensSpin();
        message.cameraKitEventBase = (object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null)
            ? CameraKitEventBase.fromPartial(object.cameraKitEventBase)
            : undefined;
        message.lensId = (_a = object.lensId) !== null && _a !== void 0 ? _a : "";
        message.viewTimeSec = (_b = object.viewTimeSec) !== null && _b !== void 0 ? _b : 0;
        message.lensGroupId = (_c = object.lensGroupId) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseCameraKitLensSpin() {
    return { cameraKitEventBase: undefined, lensId: "", viewTimeSec: 0, lensGroupId: "" };
}
export const CameraKitWebLensSwipe = {
    encode(message, writer = new BinaryWriter()) {
        if (message.cameraKitEventBase !== undefined) {
            CameraKitEventBase.encode(message.cameraKitEventBase, writer.uint32(10).fork()).join();
        }
        if (message.performanceCluster !== "0") {
            writer.uint32(16).uint64(message.performanceCluster);
        }
        if (message.webglRendererInfo !== "") {
            writer.uint32(26).string(message.webglRendererInfo);
        }
        if (message.lensId !== "") {
            writer.uint32(34).string(message.lensId);
        }
        if (message.lensFrameProcessingTimeMsAvg !== 0) {
            writer.uint32(41).double(message.lensFrameProcessingTimeMsAvg);
        }
        if (message.lensFrameProcessingTimeMsStd !== 0) {
            writer.uint32(49).double(message.lensFrameProcessingTimeMsStd);
        }
        if (message.viewTimeSec !== 0) {
            writer.uint32(57).double(message.viewTimeSec);
        }
        if (message.recordingTimeSec !== 0) {
            writer.uint32(65).double(message.recordingTimeSec);
        }
        if (message.applyDelaySec !== 0) {
            writer.uint32(73).double(message.applyDelaySec);
        }
        if (message.avgFps !== 0) {
            writer.uint32(81).double(message.avgFps);
        }
        if (message.isLensFirstWithinDay !== false) {
            writer.uint32(88).bool(message.isLensFirstWithinDay);
        }
        if (message.isLensFirstWithinMonth !== false) {
            writer.uint32(96).bool(message.isLensFirstWithinMonth);
        }
        if (message.lensGroupId !== "") {
            writer.uint32(106).string(message.lensGroupId);
        }
        return writer;
    },
    decode() {
        throw new Error("Not implemented.");
    },
    fromJSON() {
        throw new Error("Not implemented.");
    },
    toJSON() {
        throw new Error("Not implemented.");
    },
    create() {
        throw new Error("Not implemented.");
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        const message = createBaseCameraKitWebLensSwipe();
        message.cameraKitEventBase = (object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null)
            ? CameraKitEventBase.fromPartial(object.cameraKitEventBase)
            : undefined;
        message.performanceCluster = (_a = object.performanceCluster) !== null && _a !== void 0 ? _a : "0";
        message.webglRendererInfo = (_b = object.webglRendererInfo) !== null && _b !== void 0 ? _b : "";
        message.lensId = (_c = object.lensId) !== null && _c !== void 0 ? _c : "";
        message.lensFrameProcessingTimeMsAvg = (_d = object.lensFrameProcessingTimeMsAvg) !== null && _d !== void 0 ? _d : 0;
        message.lensFrameProcessingTimeMsStd = (_e = object.lensFrameProcessingTimeMsStd) !== null && _e !== void 0 ? _e : 0;
        message.viewTimeSec = (_f = object.viewTimeSec) !== null && _f !== void 0 ? _f : 0;
        message.recordingTimeSec = (_g = object.recordingTimeSec) !== null && _g !== void 0 ? _g : 0;
        message.applyDelaySec = (_h = object.applyDelaySec) !== null && _h !== void 0 ? _h : 0;
        message.avgFps = (_j = object.avgFps) !== null && _j !== void 0 ? _j : 0;
        message.isLensFirstWithinDay = (_k = object.isLensFirstWithinDay) !== null && _k !== void 0 ? _k : false;
        message.isLensFirstWithinMonth = (_l = object.isLensFirstWithinMonth) !== null && _l !== void 0 ? _l : false;
        message.lensGroupId = (_m = object.lensGroupId) !== null && _m !== void 0 ? _m : "";
        return message;
    },
};
function createBaseCameraKitWebLensSwipe() {
    return {
        cameraKitEventBase: undefined,
        performanceCluster: "0",
        webglRendererInfo: "",
        lensId: "",
        lensFrameProcessingTimeMsAvg: 0,
        lensFrameProcessingTimeMsStd: 0,
        viewTimeSec: 0,
        recordingTimeSec: 0,
        applyDelaySec: 0,
        avgFps: 0,
        isLensFirstWithinDay: false,
        isLensFirstWithinMonth: false,
        lensGroupId: "",
    };
}
export const CameraKitLensDownload = {
    encode(message, writer = new BinaryWriter()) {
        if (message.cameraKitEventBase !== undefined) {
            CameraKitEventBase.encode(message.cameraKitEventBase, writer.uint32(10).fork()).join();
        }
        if (message.lensId !== "") {
            writer.uint32(18).string(message.lensId);
        }
        if (message.automaticDownload !== false) {
            writer.uint32(24).bool(message.automaticDownload);
        }
        if (message.downloadTimeSec !== 0) {
            writer.uint32(33).double(message.downloadTimeSec);
        }
        if (message.sizeByte !== "0") {
            writer.uint32(40).uint64(message.sizeByte);
        }
        return writer;
    },
    decode() {
        throw new Error("Not implemented.");
    },
    fromJSON() {
        throw new Error("Not implemented.");
    },
    toJSON() {
        throw new Error("Not implemented.");
    },
    create() {
        throw new Error("Not implemented.");
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseCameraKitLensDownload();
        message.cameraKitEventBase = (object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null)
            ? CameraKitEventBase.fromPartial(object.cameraKitEventBase)
            : undefined;
        message.lensId = (_a = object.lensId) !== null && _a !== void 0 ? _a : "";
        message.automaticDownload = (_b = object.automaticDownload) !== null && _b !== void 0 ? _b : false;
        message.downloadTimeSec = (_c = object.downloadTimeSec) !== null && _c !== void 0 ? _c : 0;
        message.sizeByte = (_d = object.sizeByte) !== null && _d !== void 0 ? _d : "0";
        return message;
    },
};
function createBaseCameraKitLensDownload() {
    return { cameraKitEventBase: undefined, lensId: "", automaticDownload: false, downloadTimeSec: 0, sizeByte: "0" };
}
export const CameraKitAssetDownload = {
    encode(message, writer = new BinaryWriter()) {
        if (message.cameraKitEventBase !== undefined) {
            CameraKitEventBase.encode(message.cameraKitEventBase, writer.uint32(10).fork()).join();
        }
        if (message.automaticDownload !== false) {
            writer.uint32(24).bool(message.automaticDownload);
        }
        if (message.downloadTimeSec !== 0) {
            writer.uint32(33).double(message.downloadTimeSec);
        }
        if (message.sizeByte !== "0") {
            writer.uint32(40).uint64(message.sizeByte);
        }
        if (message.assetId !== "") {
            writer.uint32(50).string(message.assetId);
        }
        return writer;
    },
    decode() {
        throw new Error("Not implemented.");
    },
    fromJSON() {
        throw new Error("Not implemented.");
    },
    toJSON() {
        throw new Error("Not implemented.");
    },
    create() {
        throw new Error("Not implemented.");
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseCameraKitAssetDownload();
        message.cameraKitEventBase = (object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null)
            ? CameraKitEventBase.fromPartial(object.cameraKitEventBase)
            : undefined;
        message.automaticDownload = (_a = object.automaticDownload) !== null && _a !== void 0 ? _a : false;
        message.downloadTimeSec = (_b = object.downloadTimeSec) !== null && _b !== void 0 ? _b : 0;
        message.sizeByte = (_c = object.sizeByte) !== null && _c !== void 0 ? _c : "0";
        message.assetId = (_d = object.assetId) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseCameraKitAssetDownload() {
    return { cameraKitEventBase: undefined, automaticDownload: false, downloadTimeSec: 0, sizeByte: "0", assetId: "" };
}
export const CameraKitException = {
    encode(message, writer = new BinaryWriter()) {
        if (message.cameraKitEventBase !== undefined) {
            CameraKitEventBase.encode(message.cameraKitEventBase, writer.uint32(10).fork()).join();
        }
        if (message.lensId !== "") {
            writer.uint32(18).string(message.lensId);
        }
        if (message.type !== "") {
            writer.uint32(26).string(message.type);
        }
        if (message.reason !== "") {
            writer.uint32(34).string(message.reason);
        }
        return writer;
    },
    decode() {
        throw new Error("Not implemented.");
    },
    fromJSON() {
        throw new Error("Not implemented.");
    },
    toJSON() {
        throw new Error("Not implemented.");
    },
    create() {
        throw new Error("Not implemented.");
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseCameraKitException();
        message.cameraKitEventBase = (object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null)
            ? CameraKitEventBase.fromPartial(object.cameraKitEventBase)
            : undefined;
        message.lensId = (_a = object.lensId) !== null && _a !== void 0 ? _a : "";
        message.type = (_b = object.type) !== null && _b !== void 0 ? _b : "";
        message.reason = (_c = object.reason) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseCameraKitException() {
    return { cameraKitEventBase: undefined, lensId: "", type: "", reason: "" };
}
export const CameraKitSession = {
    encode(message, writer = new BinaryWriter()) {
        if (message.cameraKitEventBase !== undefined) {
            CameraKitEventBase.encode(message.cameraKitEventBase, writer.uint32(10).fork()).join();
        }
        if (message.dailySessionBucket !== 0) {
            writer.uint32(16).int32(message.dailySessionBucket);
        }
        if (message.isFirstWithinMonth !== false) {
            writer.uint32(24).bool(message.isFirstWithinMonth);
        }
        if (message.day !== "0") {
            writer.uint32(32).uint64(message.day);
        }
        if (message.month !== "0") {
            writer.uint32(40).uint64(message.month);
        }
        if (message.year !== "0") {
            writer.uint32(48).uint64(message.year);
        }
        return writer;
    },
    decode() {
        throw new Error("Not implemented.");
    },
    fromJSON() {
        throw new Error("Not implemented.");
    },
    toJSON() {
        throw new Error("Not implemented.");
    },
    create() {
        throw new Error("Not implemented.");
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseCameraKitSession();
        message.cameraKitEventBase = (object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null)
            ? CameraKitEventBase.fromPartial(object.cameraKitEventBase)
            : undefined;
        message.dailySessionBucket = (_a = object.dailySessionBucket) !== null && _a !== void 0 ? _a : 0;
        message.isFirstWithinMonth = (_b = object.isFirstWithinMonth) !== null && _b !== void 0 ? _b : false;
        message.day = (_c = object.day) !== null && _c !== void 0 ? _c : "0";
        message.month = (_d = object.month) !== null && _d !== void 0 ? _d : "0";
        message.year = (_e = object.year) !== null && _e !== void 0 ? _e : "0";
        return message;
    },
};
function createBaseCameraKitSession() {
    return {
        cameraKitEventBase: undefined,
        dailySessionBucket: 0,
        isFirstWithinMonth: false,
        day: "0",
        month: "0",
        year: "0",
    };
}
export var DailySessionBucket;
(function (DailySessionBucket) {
    DailySessionBucket[DailySessionBucket["NO_SESSION_BUCKET"] = 0] = "NO_SESSION_BUCKET";
    DailySessionBucket[DailySessionBucket["ONE_SESSION"] = 1] = "ONE_SESSION";
    DailySessionBucket[DailySessionBucket["TWO_SESSION"] = 2] = "TWO_SESSION";
    DailySessionBucket[DailySessionBucket["THREE_SESSION"] = 3] = "THREE_SESSION";
    DailySessionBucket[DailySessionBucket["FOUR_SESSION"] = 4] = "FOUR_SESSION";
    DailySessionBucket[DailySessionBucket["FIVE_SESSION"] = 5] = "FIVE_SESSION";
    DailySessionBucket[DailySessionBucket["SIX_SESSION"] = 6] = "SIX_SESSION";
    DailySessionBucket[DailySessionBucket["SEVEN_SESSION"] = 7] = "SEVEN_SESSION";
    DailySessionBucket[DailySessionBucket["EIGHT_SESSION"] = 8] = "EIGHT_SESSION";
    DailySessionBucket[DailySessionBucket["NINE_SESSION"] = 9] = "NINE_SESSION";
    DailySessionBucket[DailySessionBucket["TEN_OR_MORE_SESSION"] = 10] = "TEN_OR_MORE_SESSION";
    DailySessionBucket[DailySessionBucket["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(DailySessionBucket || (DailySessionBucket = {}));
export const CameraKitLensContentValidationFailed = {
    encode(message, writer = new BinaryWriter()) {
        if (message.cameraKitEventBase !== undefined) {
            CameraKitEventBase.encode(message.cameraKitEventBase, writer.uint32(10).fork()).join();
        }
        if (message.lensId !== "") {
            writer.uint32(18).string(message.lensId);
        }
        return writer;
    },
    decode() {
        throw new Error("Not implemented.");
    },
    fromJSON() {
        throw new Error("Not implemented.");
    },
    toJSON() {
        throw new Error("Not implemented.");
    },
    create() {
        throw new Error("Not implemented.");
    },
    fromPartial(object) {
        var _a;
        const message = createBaseCameraKitLensContentValidationFailed();
        message.cameraKitEventBase = (object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null)
            ? CameraKitEventBase.fromPartial(object.cameraKitEventBase)
            : undefined;
        message.lensId = (_a = object.lensId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseCameraKitLensContentValidationFailed() {
    return { cameraKitEventBase: undefined, lensId: "" };
}
export const CameraKitAssetValidationFailed = {
    encode(message, writer = new BinaryWriter()) {
        if (message.cameraKitEventBase !== undefined) {
            CameraKitEventBase.encode(message.cameraKitEventBase, writer.uint32(10).fork()).join();
        }
        if (message.assetId !== "") {
            writer.uint32(26).string(message.assetId);
        }
        return writer;
    },
    decode() {
        throw new Error("Not implemented.");
    },
    fromJSON() {
        throw new Error("Not implemented.");
    },
    toJSON() {
        throw new Error("Not implemented.");
    },
    create() {
        throw new Error("Not implemented.");
    },
    fromPartial(object) {
        var _a;
        const message = createBaseCameraKitAssetValidationFailed();
        message.cameraKitEventBase = (object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null)
            ? CameraKitEventBase.fromPartial(object.cameraKitEventBase)
            : undefined;
        message.assetId = (_a = object.assetId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseCameraKitAssetValidationFailed() {
    return { cameraKitEventBase: undefined, assetId: "" };
}
export const CameraKitWebBenchmarkComplete = {
    encode(message, writer = new BinaryWriter()) {
        if (message.cameraKitEventBase !== undefined) {
            CameraKitEventBase.encode(message.cameraKitEventBase, writer.uint32(10).fork()).join();
        }
        if (message.benchmarkName !== "") {
            writer.uint32(18).string(message.benchmarkName);
        }
        if (message.benchmarkValue !== 0) {
            writer.uint32(25).double(message.benchmarkValue);
        }
        if (message.performanceCluster !== "0") {
            writer.uint32(32).uint64(message.performanceCluster);
        }
        if (message.webglRendererInfo !== "") {
            writer.uint32(42).string(message.webglRendererInfo);
        }
        return writer;
    },
    decode() {
        throw new Error("Not implemented.");
    },
    fromJSON() {
        throw new Error("Not implemented.");
    },
    toJSON() {
        throw new Error("Not implemented.");
    },
    create() {
        throw new Error("Not implemented.");
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseCameraKitWebBenchmarkComplete();
        message.cameraKitEventBase = (object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null)
            ? CameraKitEventBase.fromPartial(object.cameraKitEventBase)
            : undefined;
        message.benchmarkName = (_a = object.benchmarkName) !== null && _a !== void 0 ? _a : "";
        message.benchmarkValue = (_b = object.benchmarkValue) !== null && _b !== void 0 ? _b : 0;
        message.performanceCluster = (_c = object.performanceCluster) !== null && _c !== void 0 ? _c : "0";
        message.webglRendererInfo = (_d = object.webglRendererInfo) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseCameraKitWebBenchmarkComplete() {
    return {
        cameraKitEventBase: undefined,
        benchmarkName: "",
        benchmarkValue: 0,
        performanceCluster: "0",
        webglRendererInfo: "",
    };
}
export const CameraKitLegalPrompt = {
    encode(message, writer = new BinaryWriter()) {
        if (message.cameraKitEventBase !== undefined) {
            CameraKitEventBase.encode(message.cameraKitEventBase, writer.uint32(10).fork()).join();
        }
        if (message.legalPromptId !== "") {
            writer.uint32(18).string(message.legalPromptId);
        }
        if (message.legalPromptResult !== 0) {
            writer.uint32(24).int32(message.legalPromptResult);
        }
        return writer;
    },
    decode() {
        throw new Error("Not implemented.");
    },
    fromJSON() {
        throw new Error("Not implemented.");
    },
    toJSON() {
        throw new Error("Not implemented.");
    },
    create() {
        throw new Error("Not implemented.");
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseCameraKitLegalPrompt();
        message.cameraKitEventBase = (object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null)
            ? CameraKitEventBase.fromPartial(object.cameraKitEventBase)
            : undefined;
        message.legalPromptId = (_a = object.legalPromptId) !== null && _a !== void 0 ? _a : "";
        message.legalPromptResult = (_b = object.legalPromptResult) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseCameraKitLegalPrompt() {
    return { cameraKitEventBase: undefined, legalPromptId: "", legalPromptResult: 0 };
}
export const CameraKitEventBase = {
    encode(message, writer = new BinaryWriter()) {
        if (message.kitEventBase !== undefined) {
            KitEventBase.encode(message.kitEventBase, writer.uint32(10).fork()).join();
        }
        if (message.deviceCluster !== "0") {
            writer.uint32(16).uint64(message.deviceCluster);
        }
        if (message.cameraKitVersion !== "") {
            writer.uint32(26).string(message.cameraKitVersion);
        }
        if (message.lensCoreVersion !== "") {
            writer.uint32(34).string(message.lensCoreVersion);
        }
        if (message.deviceModel !== "") {
            writer.uint32(42).string(message.deviceModel);
        }
        if (message.cameraKitVariant !== 0) {
            writer.uint32(48).int32(message.cameraKitVariant);
        }
        if (message.cameraKitFlavor !== 0) {
            writer.uint32(56).int32(message.cameraKitFlavor);
        }
        if (message.appId !== "") {
            writer.uint32(66).string(message.appId);
        }
        if (message.deviceConnectivity !== 0) {
            writer.uint32(72).int32(message.deviceConnectivity);
        }
        if (message.sessionId !== "") {
            writer.uint32(82).string(message.sessionId);
        }
        if (message.appVendorUuid !== "") {
            writer.uint32(90).string(message.appVendorUuid);
        }
        if (message.rankingRequestId !== "") {
            writer.uint32(98).string(message.rankingRequestId);
        }
        if (message.cameraKitEnvironment !== 0) {
            writer.uint32(104).int32(message.cameraKitEnvironment);
        }
        if (message.partnerUuid !== "") {
            writer.uint32(114).string(message.partnerUuid);
        }
        return writer;
    },
    decode() {
        throw new Error("Not implemented.");
    },
    fromJSON() {
        throw new Error("Not implemented.");
    },
    toJSON() {
        throw new Error("Not implemented.");
    },
    create() {
        throw new Error("Not implemented.");
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        const message = createBaseCameraKitEventBase();
        message.kitEventBase = (object.kitEventBase !== undefined && object.kitEventBase !== null)
            ? KitEventBase.fromPartial(object.kitEventBase)
            : undefined;
        message.deviceCluster = (_a = object.deviceCluster) !== null && _a !== void 0 ? _a : "0";
        message.cameraKitVersion = (_b = object.cameraKitVersion) !== null && _b !== void 0 ? _b : "";
        message.lensCoreVersion = (_c = object.lensCoreVersion) !== null && _c !== void 0 ? _c : "";
        message.deviceModel = (_d = object.deviceModel) !== null && _d !== void 0 ? _d : "";
        message.cameraKitVariant = (_e = object.cameraKitVariant) !== null && _e !== void 0 ? _e : 0;
        message.cameraKitFlavor = (_f = object.cameraKitFlavor) !== null && _f !== void 0 ? _f : 0;
        message.appId = (_g = object.appId) !== null && _g !== void 0 ? _g : "";
        message.deviceConnectivity = (_h = object.deviceConnectivity) !== null && _h !== void 0 ? _h : 0;
        message.sessionId = (_j = object.sessionId) !== null && _j !== void 0 ? _j : "";
        message.appVendorUuid = (_k = object.appVendorUuid) !== null && _k !== void 0 ? _k : "";
        message.rankingRequestId = (_l = object.rankingRequestId) !== null && _l !== void 0 ? _l : "";
        message.cameraKitEnvironment = (_m = object.cameraKitEnvironment) !== null && _m !== void 0 ? _m : 0;
        message.partnerUuid = (_o = object.partnerUuid) !== null && _o !== void 0 ? _o : "";
        return message;
    },
};
function createBaseCameraKitEventBase() {
    return {
        kitEventBase: undefined,
        deviceCluster: "0",
        cameraKitVersion: "",
        lensCoreVersion: "",
        deviceModel: "",
        cameraKitVariant: 0,
        cameraKitFlavor: 0,
        appId: "",
        deviceConnectivity: 0,
        sessionId: "",
        appVendorUuid: "",
        rankingRequestId: "",
        cameraKitEnvironment: 0,
        partnerUuid: "",
    };
}
export const KitEventBase = {
    encode(message, writer = new BinaryWriter()) {
        if (message.oauthClientId !== "") {
            writer.uint32(10).string(message.oauthClientId);
        }
        if (message.locale !== "") {
            writer.uint32(18).string(message.locale);
        }
        if (message.kitUserAgent !== "") {
            writer.uint32(26).string(message.kitUserAgent);
        }
        if (message.ipAddress !== "") {
            writer.uint32(34).string(message.ipAddress);
        }
        if (message.osMinorVersion !== "") {
            writer.uint32(42).string(message.osMinorVersion);
        }
        if (message.kitVariant !== 0) {
            writer.uint32(48).int32(message.kitVariant);
        }
        if (message.kitVariantVersion !== "") {
            writer.uint32(58).string(message.kitVariantVersion);
        }
        if (message.kitClientTimestampMillis !== "0") {
            writer.uint32(64).uint64(message.kitClientTimestampMillis);
        }
        if (message.clientSequenceId !== "0") {
            writer.uint32(72).uint64(message.clientSequenceId);
        }
        if (message.maxClientSequenceIdOnInstance !== "0") {
            writer.uint32(80).uint64(message.maxClientSequenceIdOnInstance);
        }
        if (message.targetArchitecture !== "") {
            writer.uint32(90).string(message.targetArchitecture);
        }
        if (message.runningWithDebuggerAttached !== false) {
            writer.uint32(96).bool(message.runningWithDebuggerAttached);
        }
        if (message.runningInTests !== false) {
            writer.uint32(104).bool(message.runningInTests);
        }
        if (message.runningInSimulator !== false) {
            writer.uint32(112).bool(message.runningInSimulator);
        }
        if (message.isAppPrerelease !== false) {
            writer.uint32(120).bool(message.isAppPrerelease);
        }
        if (message.kitAppId !== "") {
            writer.uint32(130).string(message.kitAppId);
        }
        if (message.kitSessionId !== "") {
            writer.uint32(138).string(message.kitSessionId);
        }
        if (message.kitPluginType !== 0) {
            writer.uint32(144).int32(message.kitPluginType);
        }
        if (message.isFromReactNativePlugin !== false) {
            writer.uint32(152).bool(message.isFromReactNativePlugin);
        }
        return writer;
    },
    decode() {
        throw new Error("Not implemented.");
    },
    fromJSON() {
        throw new Error("Not implemented.");
    },
    toJSON() {
        throw new Error("Not implemented.");
    },
    create() {
        throw new Error("Not implemented.");
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
        const message = createBaseKitEventBase();
        message.oauthClientId = (_a = object.oauthClientId) !== null && _a !== void 0 ? _a : "";
        message.locale = (_b = object.locale) !== null && _b !== void 0 ? _b : "";
        message.kitUserAgent = (_c = object.kitUserAgent) !== null && _c !== void 0 ? _c : "";
        message.ipAddress = (_d = object.ipAddress) !== null && _d !== void 0 ? _d : "";
        message.osMinorVersion = (_e = object.osMinorVersion) !== null && _e !== void 0 ? _e : "";
        message.kitVariant = (_f = object.kitVariant) !== null && _f !== void 0 ? _f : 0;
        message.kitVariantVersion = (_g = object.kitVariantVersion) !== null && _g !== void 0 ? _g : "";
        message.kitClientTimestampMillis = (_h = object.kitClientTimestampMillis) !== null && _h !== void 0 ? _h : "0";
        message.clientSequenceId = (_j = object.clientSequenceId) !== null && _j !== void 0 ? _j : "0";
        message.maxClientSequenceIdOnInstance = (_k = object.maxClientSequenceIdOnInstance) !== null && _k !== void 0 ? _k : "0";
        message.targetArchitecture = (_l = object.targetArchitecture) !== null && _l !== void 0 ? _l : "";
        message.runningWithDebuggerAttached = (_m = object.runningWithDebuggerAttached) !== null && _m !== void 0 ? _m : false;
        message.runningInTests = (_o = object.runningInTests) !== null && _o !== void 0 ? _o : false;
        message.runningInSimulator = (_p = object.runningInSimulator) !== null && _p !== void 0 ? _p : false;
        message.isAppPrerelease = (_q = object.isAppPrerelease) !== null && _q !== void 0 ? _q : false;
        message.kitAppId = (_r = object.kitAppId) !== null && _r !== void 0 ? _r : "";
        message.kitSessionId = (_s = object.kitSessionId) !== null && _s !== void 0 ? _s : "";
        message.kitPluginType = (_t = object.kitPluginType) !== null && _t !== void 0 ? _t : 0;
        message.isFromReactNativePlugin = (_u = object.isFromReactNativePlugin) !== null && _u !== void 0 ? _u : false;
        return message;
    },
};
function createBaseKitEventBase() {
    return {
        oauthClientId: "",
        locale: "",
        kitUserAgent: "",
        ipAddress: "",
        osMinorVersion: "",
        kitVariant: 0,
        kitVariantVersion: "",
        kitClientTimestampMillis: "0",
        clientSequenceId: "0",
        maxClientSequenceIdOnInstance: "0",
        targetArchitecture: "",
        runningWithDebuggerAttached: false,
        runningInTests: false,
        runningInSimulator: false,
        isAppPrerelease: false,
        kitAppId: "",
        kitSessionId: "",
        kitPluginType: 0,
        isFromReactNativePlugin: false,
    };
}
export var CameraKitLegalPromptResult;
(function (CameraKitLegalPromptResult) {
    CameraKitLegalPromptResult[CameraKitLegalPromptResult["CAMERA_KIT_LEGAL_PROMPT_MISSING"] = 0] = "CAMERA_KIT_LEGAL_PROMPT_MISSING";
    CameraKitLegalPromptResult[CameraKitLegalPromptResult["CAMERA_KIT_LEGAL_PROMPT_ACCEPTED"] = 1] = "CAMERA_KIT_LEGAL_PROMPT_ACCEPTED";
    CameraKitLegalPromptResult[CameraKitLegalPromptResult["CAMERA_KIT_LEGAL_PROMPT_DISMISSED"] = 2] = "CAMERA_KIT_LEGAL_PROMPT_DISMISSED";
    CameraKitLegalPromptResult[CameraKitLegalPromptResult["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CameraKitLegalPromptResult || (CameraKitLegalPromptResult = {}));
export var CameraKitEnvironment;
(function (CameraKitEnvironment) {
    CameraKitEnvironment[CameraKitEnvironment["CAMERA_KIT_ENVIRONMENT_UNKNOWN"] = 0] = "CAMERA_KIT_ENVIRONMENT_UNKNOWN";
    CameraKitEnvironment[CameraKitEnvironment["CAMERA_KIT_ENVIRONMENT_STAGING"] = 1] = "CAMERA_KIT_ENVIRONMENT_STAGING";
    CameraKitEnvironment[CameraKitEnvironment["CAMERA_KIT_ENVIRONMENT_PRODUCTION"] = 2] = "CAMERA_KIT_ENVIRONMENT_PRODUCTION";
    CameraKitEnvironment[CameraKitEnvironment["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CameraKitEnvironment || (CameraKitEnvironment = {}));
export var CameraKitConnectivityType;
(function (CameraKitConnectivityType) {
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_UNKNOWN"] = 0] = "CAMERA_KIT_CONNECTIVITY_TYPE_UNKNOWN";
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_WIFI"] = 1] = "CAMERA_KIT_CONNECTIVITY_TYPE_WIFI";
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_MOBILE"] = 2] = "CAMERA_KIT_CONNECTIVITY_TYPE_MOBILE";
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_UNREACHABLE"] = 3] = "CAMERA_KIT_CONNECTIVITY_TYPE_UNREACHABLE";
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_BLUETOOTH"] = 4] = "CAMERA_KIT_CONNECTIVITY_TYPE_BLUETOOTH";
    CameraKitConnectivityType[CameraKitConnectivityType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CameraKitConnectivityType || (CameraKitConnectivityType = {}));
export var CameraKitFlavor;
(function (CameraKitFlavor) {
    CameraKitFlavor[CameraKitFlavor["CAMERA_KIT_FLAVOR_UNKNOWN"] = 0] = "CAMERA_KIT_FLAVOR_UNKNOWN";
    CameraKitFlavor[CameraKitFlavor["CAMERA_KIT_FLAVOR_DEBUG"] = 1] = "CAMERA_KIT_FLAVOR_DEBUG";
    CameraKitFlavor[CameraKitFlavor["CAMERA_KIT_FLAVOR_RELEASE"] = 2] = "CAMERA_KIT_FLAVOR_RELEASE";
    CameraKitFlavor[CameraKitFlavor["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CameraKitFlavor || (CameraKitFlavor = {}));
export var CameraKitVariant;
(function (CameraKitVariant) {
    CameraKitVariant[CameraKitVariant["CAMERA_KIT_VARIANT_UNKNOWN"] = 0] = "CAMERA_KIT_VARIANT_UNKNOWN";
    CameraKitVariant[CameraKitVariant["CAMERA_KIT_VARIANT_PARTNER"] = 1] = "CAMERA_KIT_VARIANT_PARTNER";
    CameraKitVariant[CameraKitVariant["CAMERA_KIT_VARIANT_PUBLIC"] = 2] = "CAMERA_KIT_VARIANT_PUBLIC";
    CameraKitVariant[CameraKitVariant["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CameraKitVariant || (CameraKitVariant = {}));
export var KitPluginType;
(function (KitPluginType) {
    KitPluginType[KitPluginType["NO_PLUGIN"] = 0] = "NO_PLUGIN";
    KitPluginType[KitPluginType["UNITY"] = 1] = "UNITY";
    KitPluginType[KitPluginType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(KitPluginType || (KitPluginType = {}));
export var KitType;
(function (KitType) {
    KitType[KitType["UNKNOWN_KIT_TYPE"] = 0] = "UNKNOWN_KIT_TYPE";
    KitType[KitType["BITMOJI_KIT"] = 1] = "BITMOJI_KIT";
    KitType[KitType["CREATIVE_KIT"] = 2] = "CREATIVE_KIT";
    KitType[KitType["LOGIN_KIT"] = 3] = "LOGIN_KIT";
    KitType[KitType["STORY_KIT"] = 4] = "STORY_KIT";
    KitType[KitType["CAMERA_KIT"] = 5] = "CAMERA_KIT";
    KitType[KitType["SHOP_KIT"] = 6] = "SHOP_KIT";
    KitType[KitType["EULA_KIT"] = 7] = "EULA_KIT";
    KitType[KitType["PAYMENTS_KIT"] = 8] = "PAYMENTS_KIT";
    KitType[KitType["INVITE_KIT"] = 9] = "INVITE_KIT";
    KitType[KitType["CAMERA_KIT_WEB"] = 10] = "CAMERA_KIT_WEB";
    KitType[KitType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(KitType || (KitType = {}));
//# sourceMappingURL=cameraKitEvents.js.map
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export declare const protobufPackage = "snapchat.common";
export interface Ruid {
    type: Ruid_Type;
    stringValue: string;
    loggingIdValue: string;
}
export declare enum Ruid_Type {
    UNSET = 0,
    USER = 1,
    DEVICE = 2,
    WEB_CLIENT = 3,
    AD_ACCOUNT = 4,
    USERNAME = 5,
    AD_MODERATION_AD = 6,
    WEB_SNAPCHAT_USER = 7,
    INTERNAL = 8,
    AM_ORGANIZATION = 9,
    AM_MEMBER = 10,
    AM_SESSION = 11,
    AM_PROFILE = 12,
    AM_SNAPCHAT_USER = 13,
    SNAPCHAT_ADVERTISING = 14,
    AM_CLIENT = 15,
    MISCHIEF = 16,
    ARES_VISITOR = 17,
    POD_NAME = 18,
    UNRECOGNIZED = -1
}
export declare const Ruid: MessageFns<Ruid>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
//# sourceMappingURL=ruid.d.ts.map
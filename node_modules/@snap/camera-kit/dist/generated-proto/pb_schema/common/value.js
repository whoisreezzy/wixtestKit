import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "../google/protobuf/any";
export const protobufPackage = "snapchat.common";
function createBaseMapRecord() {
    return { key: "", value: "" };
}
export const MapRecord = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMapRecord();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return MapRecord.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMapRecord();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseMapRecords() {
    return { records: [] };
}
export const MapRecords = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.records) {
            MapRecord.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMapRecords();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.records.push(MapRecord.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return MapRecords.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMapRecords();
        message.records = ((_a = object.records) === null || _a === void 0 ? void 0 : _a.map((e) => MapRecord.fromPartial(e))) || [];
        return message;
    },
};
function createBaseStringArray() {
    return { value: [] };
}
export const StringArray = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.value) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStringArray();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.value.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return StringArray.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseStringArray();
        message.value = ((_a = object.value) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseValue() {
    return {
        intValue: undefined,
        longValue: undefined,
        floatValue: undefined,
        doubleValue: undefined,
        boolValue: undefined,
        stringValue: undefined,
        anyValue: undefined,
        mapValue: undefined,
        intPairValue: undefined,
        stringArrayValue: undefined,
    };
}
export const Value = {
    encode(message, writer = new BinaryWriter()) {
        if (message.intValue !== undefined) {
            writer.uint32(8).int32(message.intValue);
        }
        if (message.longValue !== undefined) {
            writer.uint32(16).int64(message.longValue);
        }
        if (message.floatValue !== undefined) {
            writer.uint32(29).float(message.floatValue);
        }
        if (message.doubleValue !== undefined) {
            writer.uint32(73).double(message.doubleValue);
        }
        if (message.boolValue !== undefined) {
            writer.uint32(32).bool(message.boolValue);
        }
        if (message.stringValue !== undefined) {
            writer.uint32(42).string(message.stringValue);
        }
        if (message.anyValue !== undefined) {
            Any.encode(message.anyValue, writer.uint32(50).fork()).join();
        }
        if (message.mapValue !== undefined) {
            MapRecords.encode(message.mapValue, writer.uint32(58).fork()).join();
        }
        if (message.intPairValue !== undefined) {
            writer.uint32(65).fixed64(message.intPairValue);
        }
        if (message.stringArrayValue !== undefined) {
            StringArray.encode(message.stringArrayValue, writer.uint32(82).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.intValue = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.longValue = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 29) {
                        break;
                    }
                    message.floatValue = reader.float();
                    continue;
                }
                case 9: {
                    if (tag !== 73) {
                        break;
                    }
                    message.doubleValue = reader.double();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.boolValue = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.stringValue = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.anyValue = Any.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.mapValue = MapRecords.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 65) {
                        break;
                    }
                    message.intPairValue = reader.fixed64().toString();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.stringArrayValue = StringArray.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return Value.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseValue();
        message.intValue = (_a = object.intValue) !== null && _a !== void 0 ? _a : undefined;
        message.longValue = (_b = object.longValue) !== null && _b !== void 0 ? _b : undefined;
        message.floatValue = (_c = object.floatValue) !== null && _c !== void 0 ? _c : undefined;
        message.doubleValue = (_d = object.doubleValue) !== null && _d !== void 0 ? _d : undefined;
        message.boolValue = (_e = object.boolValue) !== null && _e !== void 0 ? _e : undefined;
        message.stringValue = (_f = object.stringValue) !== null && _f !== void 0 ? _f : undefined;
        message.anyValue = (object.anyValue !== undefined && object.anyValue !== null)
            ? Any.fromPartial(object.anyValue)
            : undefined;
        message.mapValue = (object.mapValue !== undefined && object.mapValue !== null)
            ? MapRecords.fromPartial(object.mapValue)
            : undefined;
        message.intPairValue = (_g = object.intPairValue) !== null && _g !== void 0 ? _g : undefined;
        message.stringArrayValue = (object.stringArrayValue !== undefined && object.stringArrayValue !== null)
            ? StringArray.fromPartial(object.stringArrayValue)
            : undefined;
        return message;
    },
};
//# sourceMappingURL=value.js.map
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Geocircle } from "./geocircle";
export const protobufPackage = "snapchat.lenses";
function createBaseLures() {
    return { locations: [], activeLure: undefined, closestLure: undefined };
}
export const Lures = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.locations) {
            Geocircle.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.activeLure !== undefined) {
            Geocircle.encode(message.activeLure, writer.uint32(18).fork()).join();
        }
        if (message.closestLure !== undefined) {
            Geocircle.encode(message.closestLure, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLures();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.locations.push(Geocircle.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.activeLure = Geocircle.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.closestLure = Geocircle.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return Lures.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseLures();
        message.locations = ((_a = object.locations) === null || _a === void 0 ? void 0 : _a.map((e) => Geocircle.fromPartial(e))) || [];
        message.activeLure = (object.activeLure !== undefined && object.activeLure !== null)
            ? Geocircle.fromPartial(object.activeLure)
            : undefined;
        message.closestLure = (object.closestLure !== undefined && object.closestLure !== null)
            ? Geocircle.fromPartial(object.closestLure)
            : undefined;
        return message;
    },
};
//# sourceMappingURL=lures.js.map
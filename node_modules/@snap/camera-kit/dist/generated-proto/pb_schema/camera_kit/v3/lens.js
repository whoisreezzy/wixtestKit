import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "../../google/protobuf/any";
export const protobufPackage = "com.snap.camerakit.v3";
export var Lens_CameraFacing;
(function (Lens_CameraFacing) {
    Lens_CameraFacing[Lens_CameraFacing["CAMERA_FACING_UNSET"] = 0] = "CAMERA_FACING_UNSET";
    Lens_CameraFacing[Lens_CameraFacing["CAMERA_FACING_FRONT"] = 1] = "CAMERA_FACING_FRONT";
    Lens_CameraFacing[Lens_CameraFacing["CAMERA_FACING_BACK"] = 2] = "CAMERA_FACING_BACK";
    Lens_CameraFacing[Lens_CameraFacing["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Lens_CameraFacing || (Lens_CameraFacing = {}));
export var LensAssetManifestItem_Type;
(function (LensAssetManifestItem_Type) {
    LensAssetManifestItem_Type[LensAssetManifestItem_Type["DEVICE_DEPENDENT_ASSET_UNSET"] = 0] = "DEVICE_DEPENDENT_ASSET_UNSET";
    LensAssetManifestItem_Type[LensAssetManifestItem_Type["ASSET"] = 1] = "ASSET";
    LensAssetManifestItem_Type[LensAssetManifestItem_Type["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(LensAssetManifestItem_Type || (LensAssetManifestItem_Type = {}));
export var LensAssetManifestItem_RequestTiming;
(function (LensAssetManifestItem_RequestTiming) {
    LensAssetManifestItem_RequestTiming[LensAssetManifestItem_RequestTiming["PRELOAD_UNSET"] = 0] = "PRELOAD_UNSET";
    LensAssetManifestItem_RequestTiming[LensAssetManifestItem_RequestTiming["ON_DEMAND"] = 1] = "ON_DEMAND";
    LensAssetManifestItem_RequestTiming[LensAssetManifestItem_RequestTiming["REQUIRED"] = 2] = "REQUIRED";
    LensAssetManifestItem_RequestTiming[LensAssetManifestItem_RequestTiming["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(LensAssetManifestItem_RequestTiming || (LensAssetManifestItem_RequestTiming = {}));
function createBaseLens() {
    return {
        id: "",
        name: "",
        vendorData: {},
        content: undefined,
        isThirdParty: false,
        cameraFacingPreference: 0,
        featureMetadata: [],
        lensCreator: undefined,
        scannable: undefined,
    };
}
export const Lens = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        Object.entries(message.vendorData).forEach(([key, value]) => {
            Lens_VendorDataEntry.encode({ key: key, value }, writer.uint32(26).fork()).join();
        });
        if (message.content !== undefined) {
            Content.encode(message.content, writer.uint32(34).fork()).join();
        }
        if (message.isThirdParty !== false) {
            writer.uint32(40).bool(message.isThirdParty);
        }
        if (message.cameraFacingPreference !== 0) {
            writer.uint32(48).int32(message.cameraFacingPreference);
        }
        for (const v of message.featureMetadata) {
            Any.encode(v, writer.uint32(58).fork()).join();
        }
        if (message.lensCreator !== undefined) {
            LensCreator.encode(message.lensCreator, writer.uint32(66).fork()).join();
        }
        if (message.scannable !== undefined) {
            Scannable.encode(message.scannable, writer.uint32(74).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLens();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    const entry3 = Lens_VendorDataEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.vendorData[entry3.key] = entry3.value;
                    }
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.content = Content.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.isThirdParty = reader.bool();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.cameraFacingPreference = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.featureMetadata.push(Any.decode(reader, reader.uint32()));
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.lensCreator = LensCreator.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.scannable = Scannable.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return Lens.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseLens();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        message.vendorData = Object.entries((_c = object.vendorData) !== null && _c !== void 0 ? _c : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.content = (object.content !== undefined && object.content !== null)
            ? Content.fromPartial(object.content)
            : undefined;
        message.isThirdParty = (_d = object.isThirdParty) !== null && _d !== void 0 ? _d : false;
        message.cameraFacingPreference = (_e = object.cameraFacingPreference) !== null && _e !== void 0 ? _e : 0;
        message.featureMetadata = ((_f = object.featureMetadata) === null || _f === void 0 ? void 0 : _f.map((e) => Any.fromPartial(e))) || [];
        message.lensCreator = (object.lensCreator !== undefined && object.lensCreator !== null)
            ? LensCreator.fromPartial(object.lensCreator)
            : undefined;
        message.scannable = (object.scannable !== undefined && object.scannable !== null)
            ? Scannable.fromPartial(object.scannable)
            : undefined;
        return message;
    },
};
function createBaseLens_VendorDataEntry() {
    return { key: "", value: "" };
}
export const Lens_VendorDataEntry = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLens_VendorDataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return Lens_VendorDataEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseLens_VendorDataEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseContent() {
    return {
        lnsUrl: "",
        lnsSha256: "",
        iconUrl: "",
        preview: undefined,
        assetManifest: [],
        defaultHintId: "",
        hintTranslations: {},
        lnsUrlBolt: "",
        iconUrlBolt: "",
    };
}
export const Content = {
    encode(message, writer = new BinaryWriter()) {
        if (message.lnsUrl !== "") {
            writer.uint32(10).string(message.lnsUrl);
        }
        if (message.lnsSha256 !== "") {
            writer.uint32(18).string(message.lnsSha256);
        }
        if (message.iconUrl !== "") {
            writer.uint32(26).string(message.iconUrl);
        }
        if (message.preview !== undefined) {
            Preview.encode(message.preview, writer.uint32(34).fork()).join();
        }
        for (const v of message.assetManifest) {
            LensAssetManifestItem.encode(v, writer.uint32(42).fork()).join();
        }
        if (message.defaultHintId !== "") {
            writer.uint32(50).string(message.defaultHintId);
        }
        Object.entries(message.hintTranslations).forEach(([key, value]) => {
            Content_HintTranslationsEntry.encode({ key: key, value }, writer.uint32(58).fork()).join();
        });
        if (message.lnsUrlBolt !== "") {
            writer.uint32(66).string(message.lnsUrlBolt);
        }
        if (message.iconUrlBolt !== "") {
            writer.uint32(74).string(message.iconUrlBolt);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.lnsUrl = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.lnsSha256 = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.iconUrl = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.preview = Preview.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.assetManifest.push(LensAssetManifestItem.decode(reader, reader.uint32()));
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.defaultHintId = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    const entry7 = Content_HintTranslationsEntry.decode(reader, reader.uint32());
                    if (entry7.value !== undefined) {
                        message.hintTranslations[entry7.key] = entry7.value;
                    }
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.lnsUrlBolt = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.iconUrlBolt = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return Content.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseContent();
        message.lnsUrl = (_a = object.lnsUrl) !== null && _a !== void 0 ? _a : "";
        message.lnsSha256 = (_b = object.lnsSha256) !== null && _b !== void 0 ? _b : "";
        message.iconUrl = (_c = object.iconUrl) !== null && _c !== void 0 ? _c : "";
        message.preview = (object.preview !== undefined && object.preview !== null)
            ? Preview.fromPartial(object.preview)
            : undefined;
        message.assetManifest = ((_d = object.assetManifest) === null || _d === void 0 ? void 0 : _d.map((e) => LensAssetManifestItem.fromPartial(e))) || [];
        message.defaultHintId = (_e = object.defaultHintId) !== null && _e !== void 0 ? _e : "";
        message.hintTranslations = Object.entries((_f = object.hintTranslations) !== null && _f !== void 0 ? _f : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.lnsUrlBolt = (_g = object.lnsUrlBolt) !== null && _g !== void 0 ? _g : "";
        message.iconUrlBolt = (_h = object.iconUrlBolt) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseContent_HintTranslationsEntry() {
    return { key: "", value: "" };
}
export const Content_HintTranslationsEntry = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseContent_HintTranslationsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return Content_HintTranslationsEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseContent_HintTranslationsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseLensAssetManifestItem() {
    return { type: 0, id: "", requestTiming: 0, assetUrl: "", assetChecksum: "" };
}
export const LensAssetManifestItem = {
    encode(message, writer = new BinaryWriter()) {
        if (message.type !== 0) {
            writer.uint32(8).int32(message.type);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        if (message.requestTiming !== 0) {
            writer.uint32(24).int32(message.requestTiming);
        }
        if (message.assetUrl !== "") {
            writer.uint32(34).string(message.assetUrl);
        }
        if (message.assetChecksum !== "") {
            writer.uint32(42).string(message.assetChecksum);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLensAssetManifestItem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.requestTiming = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.assetUrl = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.assetChecksum = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return LensAssetManifestItem.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseLensAssetManifestItem();
        message.type = (_a = object.type) !== null && _a !== void 0 ? _a : 0;
        message.id = (_b = object.id) !== null && _b !== void 0 ? _b : "";
        message.requestTiming = (_c = object.requestTiming) !== null && _c !== void 0 ? _c : 0;
        message.assetUrl = (_d = object.assetUrl) !== null && _d !== void 0 ? _d : "";
        message.assetChecksum = (_e = object.assetChecksum) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBasePreview() {
    return { imageUrl: "", imageSequenceSize: 0, imageSequenceWebpUrlPattern: "" };
}
export const Preview = {
    encode(message, writer = new BinaryWriter()) {
        if (message.imageUrl !== "") {
            writer.uint32(10).string(message.imageUrl);
        }
        if (message.imageSequenceSize !== 0) {
            writer.uint32(16).int32(message.imageSequenceSize);
        }
        if (message.imageSequenceWebpUrlPattern !== "") {
            writer.uint32(26).string(message.imageSequenceWebpUrlPattern);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePreview();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.imageUrl = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.imageSequenceSize = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.imageSequenceWebpUrlPattern = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return Preview.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBasePreview();
        message.imageUrl = (_a = object.imageUrl) !== null && _a !== void 0 ? _a : "";
        message.imageSequenceSize = (_b = object.imageSequenceSize) !== null && _b !== void 0 ? _b : 0;
        message.imageSequenceWebpUrlPattern = (_c = object.imageSequenceWebpUrlPattern) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseLensCreator() {
    return { displayName: "" };
}
export const LensCreator = {
    encode(message, writer = new BinaryWriter()) {
        if (message.displayName !== "") {
            writer.uint32(10).string(message.displayName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLensCreator();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.displayName = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return LensCreator.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseLensCreator();
        message.displayName = (_a = object.displayName) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseScannable() {
    return { snapcodeImageUrl: "", snapcodeDeeplink: "" };
}
export const Scannable = {
    encode(message, writer = new BinaryWriter()) {
        if (message.snapcodeImageUrl !== "") {
            writer.uint32(10).string(message.snapcodeImageUrl);
        }
        if (message.snapcodeDeeplink !== "") {
            writer.uint32(18).string(message.snapcodeDeeplink);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseScannable();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.snapcodeImageUrl = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.snapcodeDeeplink = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return Scannable.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseScannable();
        message.snapcodeImageUrl = (_a = object.snapcodeImageUrl) !== null && _a !== void 0 ? _a : "";
        message.snapcodeDeeplink = (_b = object.snapcodeDeeplink) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
//# sourceMappingURL=lens.js.map
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export declare const protobufPackage = "com.snap.camerakit.v3";
export interface LegalPrompt {
    documents: LegalDocument[];
    disabled: boolean;
}
export interface LegalDocument {
    type: LegalDocument_Type;
    webUrl: string;
    version: string;
    timestamp: Date | undefined;
}
export declare enum LegalDocument_Type {
    UNSET = 0,
    TERMS_OF_SERVICE = 1,
    PRIVACY_POLICY = 2,
    LEARN_MORE = 3,
    UNRECOGNIZED = -1
}
export declare const LegalPrompt: MessageFns<LegalPrompt>;
export declare const LegalDocument: MessageFns<LegalDocument>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
//# sourceMappingURL=legal_prompt.d.ts.map
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export declare const protobufPackage = "com.snap.camerakit.v3";
export interface RankingData {
    sessionId: string;
    locale: string;
    osType: RankingData_OSType;
    connectivityType: RankingData_ConnectivityType;
}
export declare enum RankingData_OSType {
    OS_TYPE_UNSET = 0,
    OS_TYPE_ANDROID = 1,
    OS_TYPE_IOS = 2,
    OS_TYPE_IPAD_OS = 3,
    OS_TYPE_MAC_OS = 4,
    OS_TYPE_WINDOWS = 5,
    OS_TYPE_LINUX = 6,
    UNRECOGNIZED = -1
}
export declare enum RankingData_ConnectivityType {
    CONNECTIVITY_TYPE_UNSET = 0,
    CONNECTIVITY_TYPE_WIFI = 1,
    CONNECTIVITY_TYPE_MOBILE = 2,
    CONNECTIVITY_TYPE_UNREACHABLE = 3,
    CONNECTIVITY_TYPE_BLUETOOTH = 4,
    UNRECOGNIZED = -1
}
export declare const RankingData: MessageFns<RankingData>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
//# sourceMappingURL=ranking.d.ts.map
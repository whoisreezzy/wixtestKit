import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export declare const protobufPackage = "snapchat.content";
export interface Asset {
    id: string;
    type: Asset_AssetType;
}
export declare enum Asset_AssetType {
    UNSET = 0,
    BLOOPS_STICKER = 1,
    MUSIC = 2,
    RAW_MEDIA = 3,
    CANVAS_STICKER = 4,
    BASE_MEDIA = 5,
    OVERLAY = 6,
    EDITS = 7,
    FIRST_FRAME = 8,
    THUMBNAIL = 9,
    CAMEO = 10,
    WEB_THUMBNAIL = 11,
    WEB_MEDIA = 12,
    LENS_ASSET = 13,
    VOICEOVER = 14,
    AVATAR_IMAGE = 15,
    SPECTACLES_SIXDOF = 16,
    PLAIN_MEDIA = 17,
    LENS_MEDIA = 18,
    LOCAL_BURN_IN_ASSET = 19,
    CAMERA_ROLL_INDEX = 20,
    UNRECOGNIZED = -1
}
export declare const Asset: MessageFns<Asset>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
//# sourceMappingURL=asset.d.ts.map
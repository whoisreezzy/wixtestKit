import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { MediaReference } from "../content/media_reference";
import { CaptureCharacteristics } from "./capture_characteristics";
import { MediaId } from "./media_id";
export const protobufPackage = "snapchat.snapdoc";
export var MediaMetadata_Orientation;
(function (MediaMetadata_Orientation) {
    MediaMetadata_Orientation[MediaMetadata_Orientation["VERTICAL"] = 0] = "VERTICAL";
    MediaMetadata_Orientation[MediaMetadata_Orientation["HORIZONTAL"] = 1] = "HORIZONTAL";
    MediaMetadata_Orientation[MediaMetadata_Orientation["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(MediaMetadata_Orientation || (MediaMetadata_Orientation = {}));
export var MediaMetadata_DisplayOrientation;
(function (MediaMetadata_DisplayOrientation) {
    MediaMetadata_DisplayOrientation[MediaMetadata_DisplayOrientation["UNSET"] = 0] = "UNSET";
    MediaMetadata_DisplayOrientation[MediaMetadata_DisplayOrientation["UP"] = 1] = "UP";
    MediaMetadata_DisplayOrientation[MediaMetadata_DisplayOrientation["DOWN"] = 2] = "DOWN";
    MediaMetadata_DisplayOrientation[MediaMetadata_DisplayOrientation["LEFT"] = 3] = "LEFT";
    MediaMetadata_DisplayOrientation[MediaMetadata_DisplayOrientation["RIGHT"] = 4] = "RIGHT";
    MediaMetadata_DisplayOrientation[MediaMetadata_DisplayOrientation["UP_MIRRORED"] = 5] = "UP_MIRRORED";
    MediaMetadata_DisplayOrientation[MediaMetadata_DisplayOrientation["DOWN_MIRRORED"] = 6] = "DOWN_MIRRORED";
    MediaMetadata_DisplayOrientation[MediaMetadata_DisplayOrientation["LEFT_MIRRORED"] = 7] = "LEFT_MIRRORED";
    MediaMetadata_DisplayOrientation[MediaMetadata_DisplayOrientation["RIGHT_MIRRORED"] = 8] = "RIGHT_MIRRORED";
    MediaMetadata_DisplayOrientation[MediaMetadata_DisplayOrientation["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(MediaMetadata_DisplayOrientation || (MediaMetadata_DisplayOrientation = {}));
export var MediaMetadata_MediaType;
(function (MediaMetadata_MediaType) {
    MediaMetadata_MediaType[MediaMetadata_MediaType["IMAGE"] = 0] = "IMAGE";
    MediaMetadata_MediaType[MediaMetadata_MediaType["VIDEO"] = 1] = "VIDEO";
    MediaMetadata_MediaType[MediaMetadata_MediaType["GIF"] = 2] = "GIF";
    MediaMetadata_MediaType[MediaMetadata_MediaType["AUDIO"] = 3] = "AUDIO";
    MediaMetadata_MediaType[MediaMetadata_MediaType["UNKNOWN"] = 4] = "UNKNOWN";
    MediaMetadata_MediaType[MediaMetadata_MediaType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(MediaMetadata_MediaType || (MediaMetadata_MediaType = {}));
export var MediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl_MediaUrlType;
(function (MediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl_MediaUrlType) {
    MediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl_MediaUrlType[MediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl_MediaUrlType["GCS"] = 0] = "GCS";
    MediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl_MediaUrlType[MediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl_MediaUrlType["S3"] = 1] = "S3";
    MediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl_MediaUrlType[MediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl_MediaUrlType["UNRECOGNIZED_VALUE"] = 2] = "UNRECOGNIZED_VALUE";
    MediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl_MediaUrlType[MediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl_MediaUrlType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(MediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl_MediaUrlType || (MediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl_MediaUrlType = {}));
export var MediaOriginExternalStorage_ExternalMediaSource;
(function (MediaOriginExternalStorage_ExternalMediaSource) {
    MediaOriginExternalStorage_ExternalMediaSource[MediaOriginExternalStorage_ExternalMediaSource["UNSET"] = 0] = "UNSET";
    MediaOriginExternalStorage_ExternalMediaSource[MediaOriginExternalStorage_ExternalMediaSource["NONE"] = 1] = "NONE";
    MediaOriginExternalStorage_ExternalMediaSource[MediaOriginExternalStorage_ExternalMediaSource["UNKNOWN"] = 2] = "UNKNOWN";
    MediaOriginExternalStorage_ExternalMediaSource[MediaOriginExternalStorage_ExternalMediaSource["SNAPCHAT"] = 3] = "SNAPCHAT";
    MediaOriginExternalStorage_ExternalMediaSource[MediaOriginExternalStorage_ExternalMediaSource["TIKTOK"] = 4] = "TIKTOK";
    MediaOriginExternalStorage_ExternalMediaSource[MediaOriginExternalStorage_ExternalMediaSource["INSTAGRAM"] = 5] = "INSTAGRAM";
    MediaOriginExternalStorage_ExternalMediaSource[MediaOriginExternalStorage_ExternalMediaSource["CAPCUT"] = 6] = "CAPCUT";
    MediaOriginExternalStorage_ExternalMediaSource[MediaOriginExternalStorage_ExternalMediaSource["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(MediaOriginExternalStorage_ExternalMediaSource || (MediaOriginExternalStorage_ExternalMediaSource = {}));
export var DreamsMetadata_LensContentType;
(function (DreamsMetadata_LensContentType) {
    DreamsMetadata_LensContentType[DreamsMetadata_LensContentType["UNSET"] = 0] = "UNSET";
    DreamsMetadata_LensContentType[DreamsMetadata_LensContentType["NONE"] = 1] = "NONE";
    DreamsMetadata_LensContentType[DreamsMetadata_LensContentType["GEN_ML"] = 2] = "GEN_ML";
    DreamsMetadata_LensContentType[DreamsMetadata_LensContentType["UCO"] = 3] = "UCO";
    DreamsMetadata_LensContentType[DreamsMetadata_LensContentType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(DreamsMetadata_LensContentType || (DreamsMetadata_LensContentType = {}));
function createBaseAudioMetadata() {
    return { codecFormat: 0 };
}
export const AudioMetadata = {
    encode(message, writer = new BinaryWriter()) {
        if (message.codecFormat !== 0) {
            writer.uint32(8).int32(message.codecFormat);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAudioMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.codecFormat = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return AudioMetadata.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAudioMetadata();
        message.codecFormat = (_a = object.codecFormat) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseImageMetadata() {
    return { codecFormat: 0 };
}
export const ImageMetadata = {
    encode(message, writer = new BinaryWriter()) {
        if (message.codecFormat !== 0) {
            writer.uint32(8).int32(message.codecFormat);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImageMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.codecFormat = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return ImageMetadata.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseImageMetadata();
        message.codecFormat = (_a = object.codecFormat) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseVideoMetadata() {
    return { codecFormat: 0, containerFormat: 0 };
}
export const VideoMetadata = {
    encode(message, writer = new BinaryWriter()) {
        if (message.codecFormat !== 0) {
            writer.uint32(8).int32(message.codecFormat);
        }
        if (message.containerFormat !== 0) {
            writer.uint32(16).int32(message.containerFormat);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVideoMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.codecFormat = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.containerFormat = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return VideoMetadata.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseVideoMetadata();
        message.codecFormat = (_a = object.codecFormat) !== null && _a !== void 0 ? _a : 0;
        message.containerFormat = (_b = object.containerFormat) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseMediaMetadata() {
    return {
        orientation: 0,
        dimensions: undefined,
        mediaDurationMs: 0,
        mediaId: undefined,
        encryptionInfoV1: undefined,
        encryptionInfoV2: undefined,
        masterKeyEncryptedEncryptionInfo: undefined,
        assetType: 0,
        captureCharacteristics: undefined,
        mediaOriginCamera: undefined,
        mediaOriginExternalStorage: undefined,
        mediaOriginPixy: undefined,
        mediaOriginSpectacles: undefined,
        mediaOriginAi: undefined,
        dreamsMetadata: undefined,
        additionalOrigins: [],
        displayOrientation: 0,
        audio: undefined,
        image: undefined,
        video: undefined,
        type: 0,
        legacyMediaSource: undefined,
        contentDescriptor: undefined,
        mediaUrl: "",
        hasSound: false,
        zipped: false,
        frontFacing: false,
        mediaReference: undefined,
    };
}
export const MediaMetadata = {
    encode(message, writer = new BinaryWriter()) {
        if (message.orientation !== 0) {
            writer.uint32(24).int32(message.orientation);
        }
        if (message.dimensions !== undefined) {
            MediaMetadata_MediaDimensions.encode(message.dimensions, writer.uint32(42).fork()).join();
        }
        if (message.mediaDurationMs !== 0) {
            writer.uint32(120).uint32(message.mediaDurationMs);
        }
        if (message.mediaId !== undefined) {
            MediaId.encode(message.mediaId, writer.uint32(146).fork()).join();
        }
        if (message.encryptionInfoV1 !== undefined) {
            MediaMetadata_MediaEncryptionInfo.encode(message.encryptionInfoV1, writer.uint32(34).fork()).join();
        }
        if (message.encryptionInfoV2 !== undefined) {
            MediaMetadata_MediaEncryptionInfo.encode(message.encryptionInfoV2, writer.uint32(154).fork()).join();
        }
        if (message.masterKeyEncryptedEncryptionInfo !== undefined) {
            MediaMetadata_MediaEncryptionInfo.encode(message.masterKeyEncryptedEncryptionInfo, writer.uint32(250).fork())
                .join();
        }
        if (message.assetType !== 0) {
            writer.uint32(160).int32(message.assetType);
        }
        if (message.captureCharacteristics !== undefined) {
            CaptureCharacteristics.encode(message.captureCharacteristics, writer.uint32(170).fork()).join();
        }
        if (message.mediaOriginCamera !== undefined) {
            MediaOriginCamera.encode(message.mediaOriginCamera, writer.uint32(210).fork()).join();
        }
        if (message.mediaOriginExternalStorage !== undefined) {
            MediaOriginExternalStorage.encode(message.mediaOriginExternalStorage, writer.uint32(218).fork()).join();
        }
        if (message.mediaOriginPixy !== undefined) {
            MediaOriginPixy.encode(message.mediaOriginPixy, writer.uint32(226).fork()).join();
        }
        if (message.mediaOriginSpectacles !== undefined) {
            MediaOriginSpectacles.encode(message.mediaOriginSpectacles, writer.uint32(234).fork()).join();
        }
        if (message.mediaOriginAi !== undefined) {
            MediaOriginAI.encode(message.mediaOriginAi, writer.uint32(242).fork()).join();
        }
        if (message.dreamsMetadata !== undefined) {
            DreamsMetadata.encode(message.dreamsMetadata, writer.uint32(258).fork()).join();
        }
        for (const v of message.additionalOrigins) {
            MediaOrigin.encode(v, writer.uint32(266).fork()).join();
        }
        if (message.displayOrientation !== 0) {
            writer.uint32(176).int32(message.displayOrientation);
        }
        if (message.audio !== undefined) {
            AudioMetadata.encode(message.audio, writer.uint32(186).fork()).join();
        }
        if (message.image !== undefined) {
            ImageMetadata.encode(message.image, writer.uint32(194).fork()).join();
        }
        if (message.video !== undefined) {
            VideoMetadata.encode(message.video, writer.uint32(202).fork()).join();
        }
        if (message.type !== 0) {
            writer.uint32(16).int32(message.type);
        }
        if (message.legacyMediaSource !== undefined) {
            MediaMetadata_LegacyMediaSource.encode(message.legacyMediaSource, writer.uint32(50).fork()).join();
        }
        if (message.contentDescriptor !== undefined) {
            writer.uint32(58).bytes(message.contentDescriptor);
        }
        if (message.mediaUrl !== "") {
            writer.uint32(74).string(message.mediaUrl);
        }
        if (message.hasSound !== false) {
            writer.uint32(96).bool(message.hasSound);
        }
        if (message.zipped !== false) {
            writer.uint32(104).bool(message.zipped);
        }
        if (message.frontFacing !== false) {
            writer.uint32(112).bool(message.frontFacing);
        }
        if (message.mediaReference !== undefined) {
            MediaReference.encode(message.mediaReference, writer.uint32(138).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMediaMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.orientation = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.dimensions = MediaMetadata_MediaDimensions.decode(reader, reader.uint32());
                    continue;
                }
                case 15: {
                    if (tag !== 120) {
                        break;
                    }
                    message.mediaDurationMs = reader.uint32();
                    continue;
                }
                case 18: {
                    if (tag !== 146) {
                        break;
                    }
                    message.mediaId = MediaId.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.encryptionInfoV1 = MediaMetadata_MediaEncryptionInfo.decode(reader, reader.uint32());
                    continue;
                }
                case 19: {
                    if (tag !== 154) {
                        break;
                    }
                    message.encryptionInfoV2 = MediaMetadata_MediaEncryptionInfo.decode(reader, reader.uint32());
                    continue;
                }
                case 31: {
                    if (tag !== 250) {
                        break;
                    }
                    message.masterKeyEncryptedEncryptionInfo = MediaMetadata_MediaEncryptionInfo.decode(reader, reader.uint32());
                    continue;
                }
                case 20: {
                    if (tag !== 160) {
                        break;
                    }
                    message.assetType = reader.int32();
                    continue;
                }
                case 21: {
                    if (tag !== 170) {
                        break;
                    }
                    message.captureCharacteristics = CaptureCharacteristics.decode(reader, reader.uint32());
                    continue;
                }
                case 26: {
                    if (tag !== 210) {
                        break;
                    }
                    message.mediaOriginCamera = MediaOriginCamera.decode(reader, reader.uint32());
                    continue;
                }
                case 27: {
                    if (tag !== 218) {
                        break;
                    }
                    message.mediaOriginExternalStorage = MediaOriginExternalStorage.decode(reader, reader.uint32());
                    continue;
                }
                case 28: {
                    if (tag !== 226) {
                        break;
                    }
                    message.mediaOriginPixy = MediaOriginPixy.decode(reader, reader.uint32());
                    continue;
                }
                case 29: {
                    if (tag !== 234) {
                        break;
                    }
                    message.mediaOriginSpectacles = MediaOriginSpectacles.decode(reader, reader.uint32());
                    continue;
                }
                case 30: {
                    if (tag !== 242) {
                        break;
                    }
                    message.mediaOriginAi = MediaOriginAI.decode(reader, reader.uint32());
                    continue;
                }
                case 32: {
                    if (tag !== 258) {
                        break;
                    }
                    message.dreamsMetadata = DreamsMetadata.decode(reader, reader.uint32());
                    continue;
                }
                case 33: {
                    if (tag !== 266) {
                        break;
                    }
                    message.additionalOrigins.push(MediaOrigin.decode(reader, reader.uint32()));
                    continue;
                }
                case 22: {
                    if (tag !== 176) {
                        break;
                    }
                    message.displayOrientation = reader.int32();
                    continue;
                }
                case 23: {
                    if (tag !== 186) {
                        break;
                    }
                    message.audio = AudioMetadata.decode(reader, reader.uint32());
                    continue;
                }
                case 24: {
                    if (tag !== 194) {
                        break;
                    }
                    message.image = ImageMetadata.decode(reader, reader.uint32());
                    continue;
                }
                case 25: {
                    if (tag !== 202) {
                        break;
                    }
                    message.video = VideoMetadata.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.legacyMediaSource = MediaMetadata_LegacyMediaSource.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.contentDescriptor = reader.bytes();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.mediaUrl = reader.string();
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.hasSound = reader.bool();
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.zipped = reader.bool();
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.frontFacing = reader.bool();
                    continue;
                }
                case 17: {
                    if (tag !== 138) {
                        break;
                    }
                    message.mediaReference = MediaReference.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return MediaMetadata.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const message = createBaseMediaMetadata();
        message.orientation = (_a = object.orientation) !== null && _a !== void 0 ? _a : 0;
        message.dimensions = (object.dimensions !== undefined && object.dimensions !== null)
            ? MediaMetadata_MediaDimensions.fromPartial(object.dimensions)
            : undefined;
        message.mediaDurationMs = (_b = object.mediaDurationMs) !== null && _b !== void 0 ? _b : 0;
        message.mediaId = (object.mediaId !== undefined && object.mediaId !== null)
            ? MediaId.fromPartial(object.mediaId)
            : undefined;
        message.encryptionInfoV1 = (object.encryptionInfoV1 !== undefined && object.encryptionInfoV1 !== null)
            ? MediaMetadata_MediaEncryptionInfo.fromPartial(object.encryptionInfoV1)
            : undefined;
        message.encryptionInfoV2 = (object.encryptionInfoV2 !== undefined && object.encryptionInfoV2 !== null)
            ? MediaMetadata_MediaEncryptionInfo.fromPartial(object.encryptionInfoV2)
            : undefined;
        message.masterKeyEncryptedEncryptionInfo =
            (object.masterKeyEncryptedEncryptionInfo !== undefined && object.masterKeyEncryptedEncryptionInfo !== null)
                ? MediaMetadata_MediaEncryptionInfo.fromPartial(object.masterKeyEncryptedEncryptionInfo)
                : undefined;
        message.assetType = (_c = object.assetType) !== null && _c !== void 0 ? _c : 0;
        message.captureCharacteristics =
            (object.captureCharacteristics !== undefined && object.captureCharacteristics !== null)
                ? CaptureCharacteristics.fromPartial(object.captureCharacteristics)
                : undefined;
        message.mediaOriginCamera = (object.mediaOriginCamera !== undefined && object.mediaOriginCamera !== null)
            ? MediaOriginCamera.fromPartial(object.mediaOriginCamera)
            : undefined;
        message.mediaOriginExternalStorage =
            (object.mediaOriginExternalStorage !== undefined && object.mediaOriginExternalStorage !== null)
                ? MediaOriginExternalStorage.fromPartial(object.mediaOriginExternalStorage)
                : undefined;
        message.mediaOriginPixy = (object.mediaOriginPixy !== undefined && object.mediaOriginPixy !== null)
            ? MediaOriginPixy.fromPartial(object.mediaOriginPixy)
            : undefined;
        message.mediaOriginSpectacles =
            (object.mediaOriginSpectacles !== undefined && object.mediaOriginSpectacles !== null)
                ? MediaOriginSpectacles.fromPartial(object.mediaOriginSpectacles)
                : undefined;
        message.mediaOriginAi = (object.mediaOriginAi !== undefined && object.mediaOriginAi !== null)
            ? MediaOriginAI.fromPartial(object.mediaOriginAi)
            : undefined;
        message.dreamsMetadata = (object.dreamsMetadata !== undefined && object.dreamsMetadata !== null)
            ? DreamsMetadata.fromPartial(object.dreamsMetadata)
            : undefined;
        message.additionalOrigins = ((_d = object.additionalOrigins) === null || _d === void 0 ? void 0 : _d.map((e) => MediaOrigin.fromPartial(e))) || [];
        message.displayOrientation = (_e = object.displayOrientation) !== null && _e !== void 0 ? _e : 0;
        message.audio = (object.audio !== undefined && object.audio !== null)
            ? AudioMetadata.fromPartial(object.audio)
            : undefined;
        message.image = (object.image !== undefined && object.image !== null)
            ? ImageMetadata.fromPartial(object.image)
            : undefined;
        message.video = (object.video !== undefined && object.video !== null)
            ? VideoMetadata.fromPartial(object.video)
            : undefined;
        message.type = (_f = object.type) !== null && _f !== void 0 ? _f : 0;
        message.legacyMediaSource = (object.legacyMediaSource !== undefined && object.legacyMediaSource !== null)
            ? MediaMetadata_LegacyMediaSource.fromPartial(object.legacyMediaSource)
            : undefined;
        message.contentDescriptor = (_g = object.contentDescriptor) !== null && _g !== void 0 ? _g : undefined;
        message.mediaUrl = (_h = object.mediaUrl) !== null && _h !== void 0 ? _h : "";
        message.hasSound = (_j = object.hasSound) !== null && _j !== void 0 ? _j : false;
        message.zipped = (_k = object.zipped) !== null && _k !== void 0 ? _k : false;
        message.frontFacing = (_l = object.frontFacing) !== null && _l !== void 0 ? _l : false;
        message.mediaReference = (object.mediaReference !== undefined && object.mediaReference !== null)
            ? MediaReference.fromPartial(object.mediaReference)
            : undefined;
        return message;
    },
};
function createBaseMediaMetadata_MediaDimensions() {
    return { width: 0, height: 0 };
}
export const MediaMetadata_MediaDimensions = {
    encode(message, writer = new BinaryWriter()) {
        if (message.width !== 0) {
            writer.uint32(8).uint32(message.width);
        }
        if (message.height !== 0) {
            writer.uint32(16).uint32(message.height);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMediaMetadata_MediaDimensions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.width = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.height = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return MediaMetadata_MediaDimensions.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMediaMetadata_MediaDimensions();
        message.width = (_a = object.width) !== null && _a !== void 0 ? _a : 0;
        message.height = (_b = object.height) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseMediaMetadata_MediaEncryptionInfo() {
    return { key: new Uint8Array(0), iv: new Uint8Array(0) };
}
export const MediaMetadata_MediaEncryptionInfo = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key.length !== 0) {
            writer.uint32(10).bytes(message.key);
        }
        if (message.iv.length !== 0) {
            writer.uint32(18).bytes(message.iv);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMediaMetadata_MediaEncryptionInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.bytes();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.iv = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return MediaMetadata_MediaEncryptionInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMediaMetadata_MediaEncryptionInfo();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.iv = (_b = object.iv) !== null && _b !== void 0 ? _b : new Uint8Array(0);
        return message;
    },
};
function createBaseMediaMetadata_LegacyMediaSource() {
    return { sourceMediaId: "", directDownloadUrl: undefined };
}
export const MediaMetadata_LegacyMediaSource = {
    encode(message, writer = new BinaryWriter()) {
        if (message.sourceMediaId !== "") {
            writer.uint32(10).string(message.sourceMediaId);
        }
        if (message.directDownloadUrl !== undefined) {
            MediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl.encode(message.directDownloadUrl, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMediaMetadata_LegacyMediaSource();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sourceMediaId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.directDownloadUrl = MediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return MediaMetadata_LegacyMediaSource.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMediaMetadata_LegacyMediaSource();
        message.sourceMediaId = (_a = object.sourceMediaId) !== null && _a !== void 0 ? _a : "";
        message.directDownloadUrl = (object.directDownloadUrl !== undefined && object.directDownloadUrl !== null)
            ? MediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl.fromPartial(object.directDownloadUrl)
            : undefined;
        return message;
    },
};
function createBaseMediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl() {
    return { url: "", expirySeconds: "0", type: 0, region: "" };
}
export const MediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl = {
    encode(message, writer = new BinaryWriter()) {
        if (message.url !== "") {
            writer.uint32(10).string(message.url);
        }
        if (message.expirySeconds !== "0") {
            writer.uint32(16).uint64(message.expirySeconds);
        }
        if (message.type !== 0) {
            writer.uint32(24).int32(message.type);
        }
        if (message.region !== "") {
            writer.uint32(34).string(message.region);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.expirySeconds = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.region = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return MediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseMediaMetadata_LegacyMediaSource_LegacyDirectDownloadUrl();
        message.url = (_a = object.url) !== null && _a !== void 0 ? _a : "";
        message.expirySeconds = (_b = object.expirySeconds) !== null && _b !== void 0 ? _b : "0";
        message.type = (_c = object.type) !== null && _c !== void 0 ? _c : 0;
        message.region = (_d = object.region) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseMediaOrigin() {
    return {
        mediaOriginCamera: undefined,
        mediaOriginExternalStorage: undefined,
        mediaOriginPixy: undefined,
        mediaOriginSpectacles: undefined,
        mediaOriginAi: undefined,
        dreamsMetadata: undefined,
    };
}
export const MediaOrigin = {
    encode(message, writer = new BinaryWriter()) {
        if (message.mediaOriginCamera !== undefined) {
            MediaOriginCamera.encode(message.mediaOriginCamera, writer.uint32(10).fork()).join();
        }
        if (message.mediaOriginExternalStorage !== undefined) {
            MediaOriginExternalStorage.encode(message.mediaOriginExternalStorage, writer.uint32(18).fork()).join();
        }
        if (message.mediaOriginPixy !== undefined) {
            MediaOriginPixy.encode(message.mediaOriginPixy, writer.uint32(26).fork()).join();
        }
        if (message.mediaOriginSpectacles !== undefined) {
            MediaOriginSpectacles.encode(message.mediaOriginSpectacles, writer.uint32(34).fork()).join();
        }
        if (message.mediaOriginAi !== undefined) {
            MediaOriginAI.encode(message.mediaOriginAi, writer.uint32(42).fork()).join();
        }
        if (message.dreamsMetadata !== undefined) {
            DreamsMetadata.encode(message.dreamsMetadata, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMediaOrigin();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.mediaOriginCamera = MediaOriginCamera.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.mediaOriginExternalStorage = MediaOriginExternalStorage.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.mediaOriginPixy = MediaOriginPixy.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.mediaOriginSpectacles = MediaOriginSpectacles.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.mediaOriginAi = MediaOriginAI.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.dreamsMetadata = DreamsMetadata.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return MediaOrigin.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseMediaOrigin();
        message.mediaOriginCamera = (object.mediaOriginCamera !== undefined && object.mediaOriginCamera !== null)
            ? MediaOriginCamera.fromPartial(object.mediaOriginCamera)
            : undefined;
        message.mediaOriginExternalStorage =
            (object.mediaOriginExternalStorage !== undefined && object.mediaOriginExternalStorage !== null)
                ? MediaOriginExternalStorage.fromPartial(object.mediaOriginExternalStorage)
                : undefined;
        message.mediaOriginPixy = (object.mediaOriginPixy !== undefined && object.mediaOriginPixy !== null)
            ? MediaOriginPixy.fromPartial(object.mediaOriginPixy)
            : undefined;
        message.mediaOriginSpectacles =
            (object.mediaOriginSpectacles !== undefined && object.mediaOriginSpectacles !== null)
                ? MediaOriginSpectacles.fromPartial(object.mediaOriginSpectacles)
                : undefined;
        message.mediaOriginAi = (object.mediaOriginAi !== undefined && object.mediaOriginAi !== null)
            ? MediaOriginAI.fromPartial(object.mediaOriginAi)
            : undefined;
        message.dreamsMetadata = (object.dreamsMetadata !== undefined && object.dreamsMetadata !== null)
            ? DreamsMetadata.fromPartial(object.dreamsMetadata)
            : undefined;
        return message;
    },
};
function createBaseMediaOriginCamera() {
    return {};
}
export const MediaOriginCamera = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMediaOriginCamera();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return MediaOriginCamera.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMediaOriginCamera();
        return message;
    },
};
function createBaseMediaOriginPixy() {
    return {};
}
export const MediaOriginPixy = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMediaOriginPixy();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return MediaOriginPixy.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMediaOriginPixy();
        return message;
    },
};
function createBaseMediaOriginSpectacles() {
    return {};
}
export const MediaOriginSpectacles = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMediaOriginSpectacles();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return MediaOriginSpectacles.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMediaOriginSpectacles();
        return message;
    },
};
function createBaseMediaOriginExternalStorage() {
    return { creationTimestamp: "0", mediaSource: 0, insecureFileMetadata: undefined, originalLocalIds: [] };
}
export const MediaOriginExternalStorage = {
    encode(message, writer = new BinaryWriter()) {
        if (message.creationTimestamp !== "0") {
            writer.uint32(8).uint64(message.creationTimestamp);
        }
        if (message.mediaSource !== 0) {
            writer.uint32(16).int32(message.mediaSource);
        }
        if (message.insecureFileMetadata !== undefined) {
            InsecureFileMetadata.encode(message.insecureFileMetadata, writer.uint32(42).fork()).join();
        }
        for (const v of message.originalLocalIds) {
            writer.uint32(50).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMediaOriginExternalStorage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.creationTimestamp = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.mediaSource = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.insecureFileMetadata = InsecureFileMetadata.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.originalLocalIds.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return MediaOriginExternalStorage.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseMediaOriginExternalStorage();
        message.creationTimestamp = (_a = object.creationTimestamp) !== null && _a !== void 0 ? _a : "0";
        message.mediaSource = (_b = object.mediaSource) !== null && _b !== void 0 ? _b : 0;
        message.insecureFileMetadata = (object.insecureFileMetadata !== undefined && object.insecureFileMetadata !== null)
            ? InsecureFileMetadata.fromPartial(object.insecureFileMetadata)
            : undefined;
        message.originalLocalIds = ((_c = object.originalLocalIds) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        return message;
    },
};
function createBaseInsecureFileMetadata() {
    return { lensId: [], musicTrackId: "0" };
}
export const InsecureFileMetadata = {
    encode(message, writer = new BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.lensId) {
            writer.uint64(v);
        }
        writer.join();
        if (message.musicTrackId !== "0") {
            writer.uint32(16).uint64(message.musicTrackId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInsecureFileMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.lensId.push(reader.uint64().toString());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.lensId.push(reader.uint64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.musicTrackId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return InsecureFileMetadata.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseInsecureFileMetadata();
        message.lensId = ((_a = object.lensId) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.musicTrackId = (_b = object.musicTrackId) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseMediaOriginAI() {
    return {};
}
export const MediaOriginAI = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMediaOriginAI();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return MediaOriginAI.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMediaOriginAI();
        return message;
    },
};
function createBaseDreamsMetadata() {
    return { packId: "", templateId: "", contentType: [] };
}
export const DreamsMetadata = {
    encode(message, writer = new BinaryWriter()) {
        if (message.packId !== "") {
            writer.uint32(10).string(message.packId);
        }
        if (message.templateId !== "") {
            writer.uint32(18).string(message.templateId);
        }
        writer.uint32(26).fork();
        for (const v of message.contentType) {
            writer.int32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDreamsMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.packId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.templateId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag === 24) {
                        message.contentType.push(reader.int32());
                        continue;
                    }
                    if (tag === 26) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.contentType.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return DreamsMetadata.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseDreamsMetadata();
        message.packId = (_a = object.packId) !== null && _a !== void 0 ? _a : "";
        message.templateId = (_b = object.templateId) !== null && _b !== void 0 ? _b : "";
        message.contentType = ((_c = object.contentType) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        return message;
    },
};
//# sourceMappingURL=media.js.map
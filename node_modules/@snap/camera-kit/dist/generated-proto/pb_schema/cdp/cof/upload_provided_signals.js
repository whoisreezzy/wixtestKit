import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export const protobufPackage = "snapchat.cdp.cof";
export var ChunkUploadPreference;
(function (ChunkUploadPreference) {
    ChunkUploadPreference[ChunkUploadPreference["PREFERENCE_UNSET"] = 0] = "PREFERENCE_UNSET";
    ChunkUploadPreference[ChunkUploadPreference["GCS"] = 1] = "GCS";
    ChunkUploadPreference[ChunkUploadPreference["S3"] = 2] = "S3";
    ChunkUploadPreference[ChunkUploadPreference["AUTO"] = 3] = "AUTO";
    ChunkUploadPreference[ChunkUploadPreference["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ChunkUploadPreference || (ChunkUploadPreference = {}));
function createBaseUploadSignals() {
    return { chunkUploadSupportRequired: false, cloudfrontPop: "", gcdnPop: "", chunkUploadPreference: 0 };
}
export const UploadSignals = {
    encode(message, writer = new BinaryWriter()) {
        if (message.chunkUploadSupportRequired !== false) {
            writer.uint32(8).bool(message.chunkUploadSupportRequired);
        }
        if (message.cloudfrontPop !== "") {
            writer.uint32(18).string(message.cloudfrontPop);
        }
        if (message.gcdnPop !== "") {
            writer.uint32(26).string(message.gcdnPop);
        }
        if (message.chunkUploadPreference !== 0) {
            writer.uint32(32).int32(message.chunkUploadPreference);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUploadSignals();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.chunkUploadSupportRequired = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.cloudfrontPop = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.gcdnPop = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.chunkUploadPreference = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return UploadSignals.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseUploadSignals();
        message.chunkUploadSupportRequired = (_a = object.chunkUploadSupportRequired) !== null && _a !== void 0 ? _a : false;
        message.cloudfrontPop = (_b = object.cloudfrontPop) !== null && _b !== void 0 ? _b : "";
        message.gcdnPop = (_c = object.gcdnPop) !== null && _c !== void 0 ? _c : "";
        message.chunkUploadPreference = (_d = object.chunkUploadPreference) !== null && _d !== void 0 ? _d : 0;
        return message;
    },
};
//# sourceMappingURL=upload_provided_signals.js.map
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Ruid } from "../../common/ruid";
import { BenchmarkResult } from "./benchmark";
import { Namespace } from "./namespace";
export declare const protobufPackage = "snapchat.cdp.cof";
export declare enum ConfigTargetingTriggerEventType {
    UNKNOWN_EVENT_TYPE = 0,
    COLD_START = 1,
    WARM_START = 2,
    FOREGROUND_TRIGGER = 3,
    BACKGROUND_TRIGGER = 4,
    UNRECOGNIZED = -1
}
export declare enum ConfigTargetingAppState {
    UNKNOWN_APP_STATE = 0,
    FOREGROUND = 1,
    BACKGROUND = 2,
    UNRECOGNIZED = -1
}
export declare enum ConfigTargetingInstrumentation {
    DEFAULT_INSTRUMENTATION = 0,
    USER_AUTHENTICATION = 1,
    UNRECOGNIZED = -1
}
export interface ConfigTargetingRequest {
    configResultsEtag: string;
    namespaces: Namespace[];
    ghostId: string;
    countryCode: string;
    screenWidth: number;
    screenHeight: number;
    connectivity: Connectivity | undefined;
    maxVideoWidthPx: number;
    maxVideoHeightPx: number;
    benchmarkResults: BenchmarkResult[];
    deltaSync: boolean;
    userAgent: string;
    triggerEventType: ConfigTargetingTriggerEventType;
    appState: ConfigTargetingAppState;
    locale: string;
    deviceId: string;
    userId: string;
    clientIp: string;
    isUnAuthorized: boolean;
    appLocale: string;
    instrumentation: ConfigTargetingInstrumentation;
    lastSuccessfulSync: string;
    isLogout: boolean;
    packageInstaller: string;
    syncTriggerBlizzardSessionId: string;
    syncExecutionBlizzardSessionId: string;
    cofSyncTriggerDelayFromStartupMs: number;
    cofSyncExecutionDelayFromStartupMs: number;
    syncTriggerTime: string;
    decoderEncoderAvailability: DecoderEncoderAvailablity | undefined;
    snapkitAppId: string;
    lenscoreVersion: number;
    ruid: Ruid | undefined;
    configNames: string[];
    includeTestUserTreatments: boolean;
    disableExposureLogging: boolean;
    lensClusterOrig4: number;
    clientId: string;
    propertyOverrides: PropertyOverrides | undefined;
    forLockscreenMode: boolean;
    osBuildVersion: string;
}
export interface PropertyOverrides {
    isWeb: boolean;
}
export interface Connectivity {
    networkType: Connectivity_NetworkType;
    isMetered: boolean | undefined;
    isRoaming: boolean | undefined;
    carrier: string;
}
export declare enum Connectivity_NetworkType {
    UNKNOWN_NETWORK_TYPE = 0,
    CELLULAR = 1,
    WIFI = 2,
    UNRECOGNIZED = -1
}
export interface DecoderEncoderAvailablity {
    isSnapVp9DecoderAvailable: boolean;
    isSnapAv1DecoderAvailable: boolean;
}
export declare const ConfigTargetingRequest: MessageFns<ConfigTargetingRequest>;
export declare const PropertyOverrides: MessageFns<PropertyOverrides>;
export declare const Connectivity: MessageFns<Connectivity>;
export declare const DecoderEncoderAvailablity: MessageFns<DecoderEncoderAvailablity>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
//# sourceMappingURL=config_request.d.ts.map
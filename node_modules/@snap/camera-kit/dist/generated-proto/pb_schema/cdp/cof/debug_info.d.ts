import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export declare const protobufPackage = "snapchat.cdp.cof";
export declare enum AbStep {
    USER_WHITELISTED = 0,
    USER_GROUP_WHITELISTED = 1,
    FILTER_CONDITIONS = 2,
    SLICE_RANGE = 3,
    TRAFFIC_ALLOCATED = 4,
    UNRECOGNIZED = -1
}
export declare enum CofStep {
    VALIDATE_REQUEST = 0,
    REQUEST_ATLAS = 1,
    BUILD_TARGETING_INFO = 2,
    QUERY_INDEX = 3,
    REQUEST_AB = 4,
    UNRECOGNIZED = -1
}
export interface AbStepInfo {
    abStep: AbStep;
    info: string;
}
export interface CofStepInfo {
    cofStep: CofStep;
    info: string;
}
export interface DebugTrace {
    lastCofStep: CofStepInfo | undefined;
    lastAbStep: AbStepInfo | undefined;
    budgetGroupId: number;
}
export declare const AbStepInfo: MessageFns<AbStepInfo>;
export declare const CofStepInfo: MessageFns<CofStepInfo>;
export declare const DebugTrace: MessageFns<DebugTrace>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
//# sourceMappingURL=debug_info.d.ts.map
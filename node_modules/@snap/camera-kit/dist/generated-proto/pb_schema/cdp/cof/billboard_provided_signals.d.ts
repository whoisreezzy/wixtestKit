import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { AppLaunchType } from "./app_launch_type";
import { ContactAuthorizationStatus } from "./contact_authorization_status";
export declare const protobufPackage = "snapchat.cdp.cof";
export interface BillboardSignals {
    emailVerified: boolean;
    phoneVerified: boolean;
    notificationPermGranted: boolean;
    contactPermGranted: boolean;
    mutualFriendsCount: number;
    groupsCount: number;
    hasNonTeamSnapchatConversations: boolean;
    emailSet: boolean;
    bitmojiSet: boolean;
    hasAddFriendsRequest: boolean;
    appLaunchFromPush: boolean;
    appLaunchType: AppLaunchType;
    campaignLocalImpressionCount: number;
    campaignLocalLastImpressionTimeSecsToNow: string;
    campaignLocalContinuousDismissCount: number;
    fstNumInAppWarnings: number;
    fstShouldChangePassword: boolean;
    audioRecordPermGranted: boolean;
    mutualFriendsWithBirthdayCount: number;
    campaignLocalDismissCount: number;
    memoriesCount: number;
    campaignLocalFirstImpressionTimeSecsToNow: string;
    campaignLocalClickCount: number;
    campaignLocalInteractionCount: number;
    campaignLocalLastInteractionTimeSecsToNow: string;
    lockScreenWidgetAppOpenFromPush: boolean;
    communityCount: number;
    campaignLocalFirstClickTimeSecsToNow: string;
    campaignLocalLastClickTimeSecsToNow: string;
    campaignLocalFirstDismissTimeSecsToNow: string;
    campaignLocalLastDismissTimeSecsToNow: string;
    campaignLocalFirstInteractionTimeSecsToNow: string;
    serverImpressionCount: number;
    serverClickCount: number;
    serverDismissCount: number;
    serverInteractionCount: number;
    serverFirstImpressionTimeSecsToNow: string;
    serverLastImpressionTimeSecsToNow: string;
    serverFirstClickTimeSecsToNow: string;
    serverLastClickTimeSecsToNow: string;
    serverFirstDismissTimeSecsToNow: string;
    serverLastDismissTimeSecsToNow: string;
    serverFirstInteractionTimeSecsToNow: string;
    serverLastInteractionTimeSecsToNow: string;
    serverContinuousDismissCount: number;
    contactPermOsGranted: boolean;
    contactPermUserGranted: boolean;
    contactPermOsAuthorizationStatus: ContactAuthorizationStatus;
}
export declare const BillboardSignals: MessageFns<BillboardSignals>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
//# sourceMappingURL=billboard_provided_signals.d.ts.map
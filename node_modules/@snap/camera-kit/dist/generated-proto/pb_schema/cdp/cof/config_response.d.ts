import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { BenchmarkRequest } from "./benchmark";
import { ConfigResult } from "./config_result";
export declare const protobufPackage = "snapchat.cdp.cof";
export interface ConfigTargetingResponseDebugData {
    abResultChecksumInput: string;
}
export interface CofGradualRollout {
    uuid: Uint8Array;
    isControl: boolean;
}
export interface ConfigTargetingResponse {
    configResults: ConfigResult[];
    configResultsEtag: string;
    benchmarkRequest: BenchmarkRequest | undefined;
    fullResults: boolean;
    abResultChecksum: number;
    iso3166Alpha2CountryCodeFromRequestIp: string;
    debugData: ConfigTargetingResponseDebugData | undefined;
    cofGrapheneContext: Uint8Array;
}
export declare const ConfigTargetingResponseDebugData: MessageFns<ConfigTargetingResponseDebugData>;
export declare const CofGradualRollout: MessageFns<CofGradualRollout>;
export declare const ConfigTargetingResponse: MessageFns<ConfigTargetingResponse>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
//# sourceMappingURL=config_response.d.ts.map
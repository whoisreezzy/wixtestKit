{"version":3,"file":"benchmark.js","sourceRoot":"","sources":["../../../../../src/generated-proto/pb_schema/cdp/cof/benchmark.ts"],"names":[],"mappings":"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","sourcesContent":["import { BinaryReader, BinaryWriter } from \"@bufbuild/protobuf/wire\";\nimport { Timestamp } from \"../../google/protobuf/timestamp\";\nimport { BenchmarkName } from \"./benchmark_name\";\nexport const protobufPackage = \"snapchat.cdp.cof\";\nexport interface BenchmarkValue {\n    intValue?: number | undefined;\n    longValue?: string | undefined;\n    boolValue?: boolean | undefined;\n    floatValue?: number | undefined;\n}\nexport interface BenchmarkRequest {\n    benchmarkNames: BenchmarkName[];\n    expirationTimestamp: Date | undefined;\n}\nexport interface BenchmarkResult {\n    name: BenchmarkName;\n    value: BenchmarkValue | undefined;\n}\nfunction createBaseBenchmarkValue(): BenchmarkValue {\n    return { intValue: undefined, longValue: undefined, boolValue: undefined, floatValue: undefined };\n}\nexport const BenchmarkValue: MessageFns<BenchmarkValue> = {\n    encode(message: BenchmarkValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {\n        if (message.intValue !== undefined) {\n            writer.uint32(8).int32(message.intValue);\n        }\n        if (message.longValue !== undefined) {\n            writer.uint32(16).int64(message.longValue);\n        }\n        if (message.boolValue !== undefined) {\n            writer.uint32(24).bool(message.boolValue);\n        }\n        if (message.floatValue !== undefined) {\n            writer.uint32(37).float(message.floatValue);\n        }\n        return writer;\n    },\n    decode(input: BinaryReader | Uint8Array, length?: number): BenchmarkValue {\n        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseBenchmarkValue();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1: {\n                    if (tag !== 8) {\n                        break;\n                    }\n                    message.intValue = reader.int32();\n                    continue;\n                }\n                case 2: {\n                    if (tag !== 16) {\n                        break;\n                    }\n                    message.longValue = reader.int64().toString();\n                    continue;\n                }\n                case 3: {\n                    if (tag !== 24) {\n                        break;\n                    }\n                    message.boolValue = reader.bool();\n                    continue;\n                }\n                case 4: {\n                    if (tag !== 37) {\n                        break;\n                    }\n                    message.floatValue = reader.float();\n                    continue;\n                }\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skip(tag & 7);\n        }\n        return message;\n    },\n    create<I extends Exact<DeepPartial<BenchmarkValue>, I>>(base?: I): BenchmarkValue {\n        return BenchmarkValue.fromPartial(base ?? ({} as any));\n    },\n    fromPartial<I extends Exact<DeepPartial<BenchmarkValue>, I>>(object: I): BenchmarkValue {\n        const message = createBaseBenchmarkValue();\n        message.intValue = object.intValue ?? undefined;\n        message.longValue = object.longValue ?? undefined;\n        message.boolValue = object.boolValue ?? undefined;\n        message.floatValue = object.floatValue ?? undefined;\n        return message;\n    },\n};\nfunction createBaseBenchmarkRequest(): BenchmarkRequest {\n    return { benchmarkNames: [], expirationTimestamp: undefined };\n}\nexport const BenchmarkRequest: MessageFns<BenchmarkRequest> = {\n    encode(message: BenchmarkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {\n        writer.uint32(10).fork();\n        for (const v of message.benchmarkNames) {\n            writer.int32(v);\n        }\n        writer.join();\n        if (message.expirationTimestamp !== undefined) {\n            Timestamp.encode(toTimestamp(message.expirationTimestamp), writer.uint32(18).fork()).join();\n        }\n        return writer;\n    },\n    decode(input: BinaryReader | Uint8Array, length?: number): BenchmarkRequest {\n        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseBenchmarkRequest();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1: {\n                    if (tag === 8) {\n                        message.benchmarkNames.push(reader.int32() as any);\n                        continue;\n                    }\n                    if (tag === 10) {\n                        const end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2) {\n                            message.benchmarkNames.push(reader.int32() as any);\n                        }\n                        continue;\n                    }\n                    break;\n                }\n                case 2: {\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.expirationTimestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));\n                    continue;\n                }\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skip(tag & 7);\n        }\n        return message;\n    },\n    create<I extends Exact<DeepPartial<BenchmarkRequest>, I>>(base?: I): BenchmarkRequest {\n        return BenchmarkRequest.fromPartial(base ?? ({} as any));\n    },\n    fromPartial<I extends Exact<DeepPartial<BenchmarkRequest>, I>>(object: I): BenchmarkRequest {\n        const message = createBaseBenchmarkRequest();\n        message.benchmarkNames = object.benchmarkNames?.map((e) => e) || [];\n        message.expirationTimestamp = object.expirationTimestamp ?? undefined;\n        return message;\n    },\n};\nfunction createBaseBenchmarkResult(): BenchmarkResult {\n    return { name: 0, value: undefined };\n}\nexport const BenchmarkResult: MessageFns<BenchmarkResult> = {\n    encode(message: BenchmarkResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {\n        if (message.name !== 0) {\n            writer.uint32(8).int32(message.name);\n        }\n        if (message.value !== undefined) {\n            BenchmarkValue.encode(message.value, writer.uint32(18).fork()).join();\n        }\n        return writer;\n    },\n    decode(input: BinaryReader | Uint8Array, length?: number): BenchmarkResult {\n        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseBenchmarkResult();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1: {\n                    if (tag !== 8) {\n                        break;\n                    }\n                    message.name = reader.int32() as any;\n                    continue;\n                }\n                case 2: {\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.value = BenchmarkValue.decode(reader, reader.uint32());\n                    continue;\n                }\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skip(tag & 7);\n        }\n        return message;\n    },\n    create<I extends Exact<DeepPartial<BenchmarkResult>, I>>(base?: I): BenchmarkResult {\n        return BenchmarkResult.fromPartial(base ?? ({} as any));\n    },\n    fromPartial<I extends Exact<DeepPartial<BenchmarkResult>, I>>(object: I): BenchmarkResult {\n        const message = createBaseBenchmarkResult();\n        message.name = object.name ?? 0;\n        message.value = (object.value !== undefined && object.value !== null)\n            ? BenchmarkValue.fromPartial(object.value)\n            : undefined;\n        return message;\n    },\n};\ntype Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;\nexport type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {\n    [K in keyof T]?: DeepPartial<T[K]>;\n} : Partial<T>;\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin ? P : P & {\n    [K in keyof P]: Exact<P[K], I[K]>;\n} & {\n    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;\n};\nfunction toTimestamp(date: Date): Timestamp {\n    const seconds = Math.trunc(date.getTime() / 1000).toString();\n    const nanos = (date.getTime() % 1000) * 1000000;\n    return { seconds, nanos };\n}\nfunction fromTimestamp(t: Timestamp): Date {\n    let millis = (globalThis.Number(t.seconds) || 0) * 1000;\n    millis += (t.nanos || 0) / 1000000;\n    return new globalThis.Date(millis);\n}\nexport interface MessageFns<T> {\n    encode(message: T, writer?: BinaryWriter): BinaryWriter;\n    decode(input: BinaryReader | Uint8Array, length?: number): T;\n    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;\n    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;\n}\n"]}
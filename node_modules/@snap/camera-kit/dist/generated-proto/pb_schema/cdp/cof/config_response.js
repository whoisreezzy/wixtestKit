import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { BenchmarkRequest } from "./benchmark";
import { ConfigResult } from "./config_result";
export const protobufPackage = "snapchat.cdp.cof";
function createBaseConfigTargetingResponseDebugData() {
    return { abResultChecksumInput: "" };
}
export const ConfigTargetingResponseDebugData = {
    encode(message, writer = new BinaryWriter()) {
        if (message.abResultChecksumInput !== "") {
            writer.uint32(10).string(message.abResultChecksumInput);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfigTargetingResponseDebugData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.abResultChecksumInput = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return ConfigTargetingResponseDebugData.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseConfigTargetingResponseDebugData();
        message.abResultChecksumInput = (_a = object.abResultChecksumInput) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseCofGradualRollout() {
    return { uuid: new Uint8Array(0), isControl: false };
}
export const CofGradualRollout = {
    encode(message, writer = new BinaryWriter()) {
        if (message.uuid.length !== 0) {
            writer.uint32(10).bytes(message.uuid);
        }
        if (message.isControl !== false) {
            writer.uint32(16).bool(message.isControl);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCofGradualRollout();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.uuid = reader.bytes();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.isControl = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return CofGradualRollout.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseCofGradualRollout();
        message.uuid = (_a = object.uuid) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.isControl = (_b = object.isControl) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
function createBaseConfigTargetingResponse() {
    return {
        configResults: [],
        configResultsEtag: "",
        benchmarkRequest: undefined,
        fullResults: false,
        abResultChecksum: 0,
        iso3166Alpha2CountryCodeFromRequestIp: "",
        debugData: undefined,
        cofGrapheneContext: new Uint8Array(0),
    };
}
export const ConfigTargetingResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.configResults) {
            ConfigResult.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.configResultsEtag !== "") {
            writer.uint32(18).string(message.configResultsEtag);
        }
        if (message.benchmarkRequest !== undefined) {
            BenchmarkRequest.encode(message.benchmarkRequest, writer.uint32(26).fork()).join();
        }
        if (message.fullResults !== false) {
            writer.uint32(32).bool(message.fullResults);
        }
        if (message.abResultChecksum !== 0) {
            writer.uint32(40).int32(message.abResultChecksum);
        }
        if (message.iso3166Alpha2CountryCodeFromRequestIp !== "") {
            writer.uint32(50).string(message.iso3166Alpha2CountryCodeFromRequestIp);
        }
        if (message.debugData !== undefined) {
            ConfigTargetingResponseDebugData.encode(message.debugData, writer.uint32(58).fork()).join();
        }
        if (message.cofGrapheneContext.length !== 0) {
            writer.uint32(106).bytes(message.cofGrapheneContext);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfigTargetingResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.configResults.push(ConfigResult.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.configResultsEtag = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.benchmarkRequest = BenchmarkRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.fullResults = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.abResultChecksum = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.iso3166Alpha2CountryCodeFromRequestIp = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.debugData = ConfigTargetingResponseDebugData.decode(reader, reader.uint32());
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.cofGrapheneContext = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return ConfigTargetingResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseConfigTargetingResponse();
        message.configResults = ((_a = object.configResults) === null || _a === void 0 ? void 0 : _a.map((e) => ConfigResult.fromPartial(e))) || [];
        message.configResultsEtag = (_b = object.configResultsEtag) !== null && _b !== void 0 ? _b : "";
        message.benchmarkRequest = (object.benchmarkRequest !== undefined && object.benchmarkRequest !== null)
            ? BenchmarkRequest.fromPartial(object.benchmarkRequest)
            : undefined;
        message.fullResults = (_c = object.fullResults) !== null && _c !== void 0 ? _c : false;
        message.abResultChecksum = (_d = object.abResultChecksum) !== null && _d !== void 0 ? _d : 0;
        message.iso3166Alpha2CountryCodeFromRequestIp = (_e = object.iso3166Alpha2CountryCodeFromRequestIp) !== null && _e !== void 0 ? _e : "";
        message.debugData = (object.debugData !== undefined && object.debugData !== null)
            ? ConfigTargetingResponseDebugData.fromPartial(object.debugData)
            : undefined;
        message.cofGrapheneContext = (_f = object.cofGrapheneContext) !== null && _f !== void 0 ? _f : new Uint8Array(0);
        return message;
    },
};
//# sourceMappingURL=config_response.js.map
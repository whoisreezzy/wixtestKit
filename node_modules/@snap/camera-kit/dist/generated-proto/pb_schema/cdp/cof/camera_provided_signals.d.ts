import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export declare const protobufPackage = "snapchat.cdp.cof";
export declare enum CameraDirection {
    UNKNOWN_CAMERA_DIRECTION = 0,
    FRONT = 1,
    BACK = 2,
    UNRECOGNIZED = -1
}
export declare enum CameraContext {
    UNKNOWN_CAMERA_CONTEXT = 0,
    MAIN = 1,
    REPLY = 2,
    PROFILE = 3,
    UNRECOGNIZED = -1
}
export declare enum CameraApi {
    UNKNOWN_CAMERA_API = 0,
    CAMERA_1 = 1,
    CAMERA_2 = 2,
    ARCORE = 3,
    UNRECOGNIZED = -1
}
export declare enum FlashState {
    UNKNOWN_FLASH_STATE = 0,
    FLASH_ON = 1,
    FLASH_OFF = 2,
    UNRECOGNIZED = -1
}
export declare enum NightModeState {
    UNKNOWN_NIGHT_MODE_STATE = 0,
    NIGHT_MODE_ON = 1,
    NIGHT_MODE_OFF = 2,
    UNRECOGNIZED = -1
}
export declare enum PictureMode {
    UNKNOWN_PICTURE_MODE = 0,
    JPEG_PICTURE_MODE = 1,
    GPU_PICTURE_MODE = 2,
    UNRECOGNIZED = -1
}
export declare enum CaptureMode {
    UNKNOWN_CAPTURE_MODE = 0,
    DEFAULT_CAPTURE_MODE = 1,
    TIMELINE_CAPTURE_MODE = 2,
    UNRECOGNIZED = -1
}
export declare enum Camera2Level {
    UNKNOWN_CAMERA2_LEVEL = 0,
    LEGACY = 1,
    LIMITED = 2,
    FULL = 3,
    LEVEL_3 = 4,
    UNRECOGNIZED = -1
}
export interface CameraSignals {
    cameraDirection: CameraDirection;
    cameraContext: CameraContext;
    cameraApi: CameraApi;
    flashState: FlashState;
    camera2Level: Camera2Level;
    nightModeState: NightModeState;
    isFirstCapture: boolean;
    pictureMode: PictureMode;
    captureMode: CaptureMode;
    hasLens: boolean;
    isLowLight: boolean;
    isConcurrentCameraSupported: boolean;
}
export declare const CameraSignals: MessageFns<CameraSignals>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
//# sourceMappingURL=camera_provided_signals.d.ts.map
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Ruid } from "../../common/ruid";
import { Value } from "../../common/value";
import { MediaMetadata } from "../../snapdoc/media";
import { BillboardSignals } from "./billboard_provided_signals";
import { BoltSignals } from "./bolt_provided_signals";
import { CameraSignals } from "./camera_provided_signals";
import { CognacSignals } from "./cognac_provided_signals";
import { ContentManagerSignals } from "./content_manager_provided_signals";
import { CreativeToolsSignals } from "./creative_tools_provided_signals";
import { DiscoverFeedSignals } from "./discover_feed_provided_signals";
import { LensesSignals } from "./lenses_provided_signals";
import { MdpMediaAttribution } from "./mdp_media_attribution";
import { MediaSignals } from "./media_provided_signals";
import { OperaSignals } from "./opera_provided_signals";
import { PerceptionSignals } from "./perception_provided_signals";
import { RecipientsSignals } from "./recipients_provided_signals";
import { RoutingSignals } from "./routing_provided_signals";
import { SnapKitSignals } from "./snap_kit_provided_signals";
import { UploadSignals } from "./upload_provided_signals";
export const protobufPackage = "snapchat.cdp.cof";
export var FeatureProvidedSignals_StoryType;
(function (FeatureProvidedSignals_StoryType) {
    FeatureProvidedSignals_StoryType[FeatureProvidedSignals_StoryType["UNKNOWN_STORY_TYPE"] = 0] = "UNKNOWN_STORY_TYPE";
    FeatureProvidedSignals_StoryType[FeatureProvidedSignals_StoryType["PUBLIC_USER_STORY"] = 1] = "PUBLIC_USER_STORY";
    FeatureProvidedSignals_StoryType[FeatureProvidedSignals_StoryType["OUR_STORY"] = 2] = "OUR_STORY";
    FeatureProvidedSignals_StoryType[FeatureProvidedSignals_StoryType["PUBLISHER_STORY"] = 3] = "PUBLISHER_STORY";
    FeatureProvidedSignals_StoryType[FeatureProvidedSignals_StoryType["FRIEND_STORY"] = 4] = "FRIEND_STORY";
    FeatureProvidedSignals_StoryType[FeatureProvidedSignals_StoryType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(FeatureProvidedSignals_StoryType || (FeatureProvidedSignals_StoryType = {}));
export var FeatureProvidedSignals_SpectaclesVersion;
(function (FeatureProvidedSignals_SpectaclesVersion) {
    FeatureProvidedSignals_SpectaclesVersion[FeatureProvidedSignals_SpectaclesVersion["UNKNOWN_SPECTACLES_VERSION"] = 0] = "UNKNOWN_SPECTACLES_VERSION";
    FeatureProvidedSignals_SpectaclesVersion[FeatureProvidedSignals_SpectaclesVersion["V1"] = 1] = "V1";
    FeatureProvidedSignals_SpectaclesVersion[FeatureProvidedSignals_SpectaclesVersion["V2"] = 2] = "V2";
    FeatureProvidedSignals_SpectaclesVersion[FeatureProvidedSignals_SpectaclesVersion["V3"] = 3] = "V3";
    FeatureProvidedSignals_SpectaclesVersion[FeatureProvidedSignals_SpectaclesVersion["V4"] = 4] = "V4";
    FeatureProvidedSignals_SpectaclesVersion[FeatureProvidedSignals_SpectaclesVersion["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(FeatureProvidedSignals_SpectaclesVersion || (FeatureProvidedSignals_SpectaclesVersion = {}));
function createBaseFeatureProvidedSignals() {
    return {
        mediaMetadata: undefined,
        storyMetadata: undefined,
        cameraSignals: undefined,
        snapSource: 0,
        contentManagerProvidedSignals: undefined,
        spectacleMetadata: undefined,
        boltSignals: undefined,
        lensesSignals: undefined,
        creativeToolsSignals: undefined,
        estimatedDurationForEventMs: 0,
        routingSignals: undefined,
        mdpMediaAttribution: undefined,
        size: 0,
        mediaSignals: undefined,
        perceptionSignals: undefined,
        operaSignals: undefined,
        recipientsSignals: undefined,
        billboardSignals: undefined,
        cognacSignals: undefined,
        hashSignals: undefined,
        edgeSignals: {},
        snapKitSignals: undefined,
        uploadSignals: undefined,
        ruids: [],
        discoverFeedSignals: undefined,
    };
}
export const FeatureProvidedSignals = {
    encode(message, writer = new BinaryWriter()) {
        if (message.mediaMetadata !== undefined) {
            MediaMetadata.encode(message.mediaMetadata, writer.uint32(10).fork()).join();
        }
        if (message.storyMetadata !== undefined) {
            FeatureProvidedSignals_StoryMetadata.encode(message.storyMetadata, writer.uint32(18).fork()).join();
        }
        if (message.cameraSignals !== undefined) {
            CameraSignals.encode(message.cameraSignals, writer.uint32(26).fork()).join();
        }
        if (message.snapSource !== 0) {
            writer.uint32(32).int32(message.snapSource);
        }
        if (message.contentManagerProvidedSignals !== undefined) {
            ContentManagerSignals.encode(message.contentManagerProvidedSignals, writer.uint32(42).fork()).join();
        }
        if (message.spectacleMetadata !== undefined) {
            FeatureProvidedSignals_SpectacleMetadata.encode(message.spectacleMetadata, writer.uint32(50).fork()).join();
        }
        if (message.boltSignals !== undefined) {
            BoltSignals.encode(message.boltSignals, writer.uint32(58).fork()).join();
        }
        if (message.lensesSignals !== undefined) {
            LensesSignals.encode(message.lensesSignals, writer.uint32(66).fork()).join();
        }
        if (message.creativeToolsSignals !== undefined) {
            CreativeToolsSignals.encode(message.creativeToolsSignals, writer.uint32(74).fork()).join();
        }
        if (message.estimatedDurationForEventMs !== 0) {
            writer.uint32(80).uint32(message.estimatedDurationForEventMs);
        }
        if (message.routingSignals !== undefined) {
            RoutingSignals.encode(message.routingSignals, writer.uint32(90).fork()).join();
        }
        if (message.mdpMediaAttribution !== undefined) {
            MdpMediaAttribution.encode(message.mdpMediaAttribution, writer.uint32(98).fork()).join();
        }
        if (message.size !== 0) {
            writer.uint32(104).uint32(message.size);
        }
        if (message.mediaSignals !== undefined) {
            MediaSignals.encode(message.mediaSignals, writer.uint32(114).fork()).join();
        }
        if (message.perceptionSignals !== undefined) {
            PerceptionSignals.encode(message.perceptionSignals, writer.uint32(122).fork()).join();
        }
        if (message.operaSignals !== undefined) {
            OperaSignals.encode(message.operaSignals, writer.uint32(130).fork()).join();
        }
        if (message.recipientsSignals !== undefined) {
            RecipientsSignals.encode(message.recipientsSignals, writer.uint32(138).fork()).join();
        }
        if (message.billboardSignals !== undefined) {
            BillboardSignals.encode(message.billboardSignals, writer.uint32(146).fork()).join();
        }
        if (message.cognacSignals !== undefined) {
            CognacSignals.encode(message.cognacSignals, writer.uint32(154).fork()).join();
        }
        if (message.hashSignals !== undefined) {
            FeatureProvidedSignals_HashSignals.encode(message.hashSignals, writer.uint32(162).fork()).join();
        }
        Object.entries(message.edgeSignals).forEach(([key, value]) => {
            FeatureProvidedSignals_EdgeSignalsEntry.encode({ key: key, value }, writer.uint32(170).fork()).join();
        });
        if (message.snapKitSignals !== undefined) {
            SnapKitSignals.encode(message.snapKitSignals, writer.uint32(178).fork()).join();
        }
        if (message.uploadSignals !== undefined) {
            UploadSignals.encode(message.uploadSignals, writer.uint32(186).fork()).join();
        }
        for (const v of message.ruids) {
            Ruid.encode(v, writer.uint32(194).fork()).join();
        }
        if (message.discoverFeedSignals !== undefined) {
            DiscoverFeedSignals.encode(message.discoverFeedSignals, writer.uint32(202).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFeatureProvidedSignals();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.mediaMetadata = MediaMetadata.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.storyMetadata = FeatureProvidedSignals_StoryMetadata.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.cameraSignals = CameraSignals.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.snapSource = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.contentManagerProvidedSignals = ContentManagerSignals.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.spectacleMetadata = FeatureProvidedSignals_SpectacleMetadata.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.boltSignals = BoltSignals.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.lensesSignals = LensesSignals.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.creativeToolsSignals = CreativeToolsSignals.decode(reader, reader.uint32());
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.estimatedDurationForEventMs = reader.uint32();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.routingSignals = RoutingSignals.decode(reader, reader.uint32());
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.mdpMediaAttribution = MdpMediaAttribution.decode(reader, reader.uint32());
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.size = reader.uint32();
                    continue;
                }
                case 14: {
                    if (tag !== 114) {
                        break;
                    }
                    message.mediaSignals = MediaSignals.decode(reader, reader.uint32());
                    continue;
                }
                case 15: {
                    if (tag !== 122) {
                        break;
                    }
                    message.perceptionSignals = PerceptionSignals.decode(reader, reader.uint32());
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.operaSignals = OperaSignals.decode(reader, reader.uint32());
                    continue;
                }
                case 17: {
                    if (tag !== 138) {
                        break;
                    }
                    message.recipientsSignals = RecipientsSignals.decode(reader, reader.uint32());
                    continue;
                }
                case 18: {
                    if (tag !== 146) {
                        break;
                    }
                    message.billboardSignals = BillboardSignals.decode(reader, reader.uint32());
                    continue;
                }
                case 19: {
                    if (tag !== 154) {
                        break;
                    }
                    message.cognacSignals = CognacSignals.decode(reader, reader.uint32());
                    continue;
                }
                case 20: {
                    if (tag !== 162) {
                        break;
                    }
                    message.hashSignals = FeatureProvidedSignals_HashSignals.decode(reader, reader.uint32());
                    continue;
                }
                case 21: {
                    if (tag !== 170) {
                        break;
                    }
                    const entry21 = FeatureProvidedSignals_EdgeSignalsEntry.decode(reader, reader.uint32());
                    if (entry21.value !== undefined) {
                        message.edgeSignals[entry21.key] = entry21.value;
                    }
                    continue;
                }
                case 22: {
                    if (tag !== 178) {
                        break;
                    }
                    message.snapKitSignals = SnapKitSignals.decode(reader, reader.uint32());
                    continue;
                }
                case 23: {
                    if (tag !== 186) {
                        break;
                    }
                    message.uploadSignals = UploadSignals.decode(reader, reader.uint32());
                    continue;
                }
                case 24: {
                    if (tag !== 194) {
                        break;
                    }
                    message.ruids.push(Ruid.decode(reader, reader.uint32()));
                    continue;
                }
                case 25: {
                    if (tag !== 202) {
                        break;
                    }
                    message.discoverFeedSignals = DiscoverFeedSignals.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return FeatureProvidedSignals.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseFeatureProvidedSignals();
        message.mediaMetadata = (object.mediaMetadata !== undefined && object.mediaMetadata !== null)
            ? MediaMetadata.fromPartial(object.mediaMetadata)
            : undefined;
        message.storyMetadata = (object.storyMetadata !== undefined && object.storyMetadata !== null)
            ? FeatureProvidedSignals_StoryMetadata.fromPartial(object.storyMetadata)
            : undefined;
        message.cameraSignals = (object.cameraSignals !== undefined && object.cameraSignals !== null)
            ? CameraSignals.fromPartial(object.cameraSignals)
            : undefined;
        message.snapSource = (_a = object.snapSource) !== null && _a !== void 0 ? _a : 0;
        message.contentManagerProvidedSignals =
            (object.contentManagerProvidedSignals !== undefined && object.contentManagerProvidedSignals !== null)
                ? ContentManagerSignals.fromPartial(object.contentManagerProvidedSignals)
                : undefined;
        message.spectacleMetadata = (object.spectacleMetadata !== undefined && object.spectacleMetadata !== null)
            ? FeatureProvidedSignals_SpectacleMetadata.fromPartial(object.spectacleMetadata)
            : undefined;
        message.boltSignals = (object.boltSignals !== undefined && object.boltSignals !== null)
            ? BoltSignals.fromPartial(object.boltSignals)
            : undefined;
        message.lensesSignals = (object.lensesSignals !== undefined && object.lensesSignals !== null)
            ? LensesSignals.fromPartial(object.lensesSignals)
            : undefined;
        message.creativeToolsSignals = (object.creativeToolsSignals !== undefined && object.creativeToolsSignals !== null)
            ? CreativeToolsSignals.fromPartial(object.creativeToolsSignals)
            : undefined;
        message.estimatedDurationForEventMs = (_b = object.estimatedDurationForEventMs) !== null && _b !== void 0 ? _b : 0;
        message.routingSignals = (object.routingSignals !== undefined && object.routingSignals !== null)
            ? RoutingSignals.fromPartial(object.routingSignals)
            : undefined;
        message.mdpMediaAttribution = (object.mdpMediaAttribution !== undefined && object.mdpMediaAttribution !== null)
            ? MdpMediaAttribution.fromPartial(object.mdpMediaAttribution)
            : undefined;
        message.size = (_c = object.size) !== null && _c !== void 0 ? _c : 0;
        message.mediaSignals = (object.mediaSignals !== undefined && object.mediaSignals !== null)
            ? MediaSignals.fromPartial(object.mediaSignals)
            : undefined;
        message.perceptionSignals = (object.perceptionSignals !== undefined && object.perceptionSignals !== null)
            ? PerceptionSignals.fromPartial(object.perceptionSignals)
            : undefined;
        message.operaSignals = (object.operaSignals !== undefined && object.operaSignals !== null)
            ? OperaSignals.fromPartial(object.operaSignals)
            : undefined;
        message.recipientsSignals = (object.recipientsSignals !== undefined && object.recipientsSignals !== null)
            ? RecipientsSignals.fromPartial(object.recipientsSignals)
            : undefined;
        message.billboardSignals = (object.billboardSignals !== undefined && object.billboardSignals !== null)
            ? BillboardSignals.fromPartial(object.billboardSignals)
            : undefined;
        message.cognacSignals = (object.cognacSignals !== undefined && object.cognacSignals !== null)
            ? CognacSignals.fromPartial(object.cognacSignals)
            : undefined;
        message.hashSignals = (object.hashSignals !== undefined && object.hashSignals !== null)
            ? FeatureProvidedSignals_HashSignals.fromPartial(object.hashSignals)
            : undefined;
        message.edgeSignals = Object.entries((_d = object.edgeSignals) !== null && _d !== void 0 ? _d : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[globalThis.Number(key)] = Value.fromPartial(value);
            }
            return acc;
        }, {});
        message.snapKitSignals = (object.snapKitSignals !== undefined && object.snapKitSignals !== null)
            ? SnapKitSignals.fromPartial(object.snapKitSignals)
            : undefined;
        message.uploadSignals = (object.uploadSignals !== undefined && object.uploadSignals !== null)
            ? UploadSignals.fromPartial(object.uploadSignals)
            : undefined;
        message.ruids = ((_e = object.ruids) === null || _e === void 0 ? void 0 : _e.map((e) => Ruid.fromPartial(e))) || [];
        message.discoverFeedSignals = (object.discoverFeedSignals !== undefined && object.discoverFeedSignals !== null)
            ? DiscoverFeedSignals.fromPartial(object.discoverFeedSignals)
            : undefined;
        return message;
    },
};
function createBaseFeatureProvidedSignals_StoryMetadata() {
    return { isPublicStory: false, isOfficialStory: false, storyType: 0 };
}
export const FeatureProvidedSignals_StoryMetadata = {
    encode(message, writer = new BinaryWriter()) {
        if (message.isPublicStory !== false) {
            writer.uint32(8).bool(message.isPublicStory);
        }
        if (message.isOfficialStory !== false) {
            writer.uint32(16).bool(message.isOfficialStory);
        }
        if (message.storyType !== 0) {
            writer.uint32(24).int32(message.storyType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFeatureProvidedSignals_StoryMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isPublicStory = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.isOfficialStory = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.storyType = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return FeatureProvidedSignals_StoryMetadata.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseFeatureProvidedSignals_StoryMetadata();
        message.isPublicStory = (_a = object.isPublicStory) !== null && _a !== void 0 ? _a : false;
        message.isOfficialStory = (_b = object.isOfficialStory) !== null && _b !== void 0 ? _b : false;
        message.storyType = (_c = object.storyType) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function createBaseFeatureProvidedSignals_SpectacleMetadata() {
    return { isSpectacle: false, spectaclesVersion: 0 };
}
export const FeatureProvidedSignals_SpectacleMetadata = {
    encode(message, writer = new BinaryWriter()) {
        if (message.isSpectacle !== false) {
            writer.uint32(8).bool(message.isSpectacle);
        }
        if (message.spectaclesVersion !== 0) {
            writer.uint32(16).int32(message.spectaclesVersion);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFeatureProvidedSignals_SpectacleMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isSpectacle = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.spectaclesVersion = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return FeatureProvidedSignals_SpectacleMetadata.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseFeatureProvidedSignals_SpectacleMetadata();
        message.isSpectacle = (_a = object.isSpectacle) !== null && _a !== void 0 ? _a : false;
        message.spectaclesVersion = (_b = object.spectaclesVersion) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseFeatureProvidedSignals_HashSignals() {
    return { userId: new Uint8Array(0), seed: new Uint8Array(0), namespace: 0 };
}
export const FeatureProvidedSignals_HashSignals = {
    encode(message, writer = new BinaryWriter()) {
        if (message.userId.length !== 0) {
            writer.uint32(10).bytes(message.userId);
        }
        if (message.seed.length !== 0) {
            writer.uint32(18).bytes(message.seed);
        }
        if (message.namespace !== 0) {
            writer.uint32(24).int32(message.namespace);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFeatureProvidedSignals_HashSignals();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.bytes();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.seed = reader.bytes();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.namespace = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return FeatureProvidedSignals_HashSignals.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseFeatureProvidedSignals_HashSignals();
        message.userId = (_a = object.userId) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.seed = (_b = object.seed) !== null && _b !== void 0 ? _b : new Uint8Array(0);
        message.namespace = (_c = object.namespace) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function createBaseFeatureProvidedSignals_EdgeSignalsEntry() {
    return { key: 0, value: undefined };
}
export const FeatureProvidedSignals_EdgeSignalsEntry = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== 0) {
            writer.uint32(8).int32(message.key);
        }
        if (message.value !== undefined) {
            Value.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFeatureProvidedSignals_EdgeSignalsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.key = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = Value.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return FeatureProvidedSignals_EdgeSignalsEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseFeatureProvidedSignals_EdgeSignalsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : 0;
        message.value = (object.value !== undefined && object.value !== null) ? Value.fromPartial(object.value) : undefined;
        return message;
    },
};
//# sourceMappingURL=feature_provided_signals.js.map
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export const protobufPackage = "snapchat.cdp.cof";
export var AbStep;
(function (AbStep) {
    AbStep[AbStep["USER_WHITELISTED"] = 0] = "USER_WHITELISTED";
    AbStep[AbStep["USER_GROUP_WHITELISTED"] = 1] = "USER_GROUP_WHITELISTED";
    AbStep[AbStep["FILTER_CONDITIONS"] = 2] = "FILTER_CONDITIONS";
    AbStep[AbStep["SLICE_RANGE"] = 3] = "SLICE_RANGE";
    AbStep[AbStep["TRAFFIC_ALLOCATED"] = 4] = "TRAFFIC_ALLOCATED";
    AbStep[AbStep["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(AbStep || (AbStep = {}));
export var CofStep;
(function (CofStep) {
    CofStep[CofStep["VALIDATE_REQUEST"] = 0] = "VALIDATE_REQUEST";
    CofStep[CofStep["REQUEST_ATLAS"] = 1] = "REQUEST_ATLAS";
    CofStep[CofStep["BUILD_TARGETING_INFO"] = 2] = "BUILD_TARGETING_INFO";
    CofStep[CofStep["QUERY_INDEX"] = 3] = "QUERY_INDEX";
    CofStep[CofStep["REQUEST_AB"] = 4] = "REQUEST_AB";
    CofStep[CofStep["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CofStep || (CofStep = {}));
function createBaseAbStepInfo() {
    return { abStep: 0, info: "" };
}
export const AbStepInfo = {
    encode(message, writer = new BinaryWriter()) {
        if (message.abStep !== 0) {
            writer.uint32(8).int32(message.abStep);
        }
        if (message.info !== "") {
            writer.uint32(18).string(message.info);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAbStepInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.abStep = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.info = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return AbStepInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAbStepInfo();
        message.abStep = (_a = object.abStep) !== null && _a !== void 0 ? _a : 0;
        message.info = (_b = object.info) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseCofStepInfo() {
    return { cofStep: 0, info: "" };
}
export const CofStepInfo = {
    encode(message, writer = new BinaryWriter()) {
        if (message.cofStep !== 0) {
            writer.uint32(8).int32(message.cofStep);
        }
        if (message.info !== "") {
            writer.uint32(18).string(message.info);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCofStepInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.cofStep = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.info = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return CofStepInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseCofStepInfo();
        message.cofStep = (_a = object.cofStep) !== null && _a !== void 0 ? _a : 0;
        message.info = (_b = object.info) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseDebugTrace() {
    return { lastCofStep: undefined, lastAbStep: undefined, budgetGroupId: 0 };
}
export const DebugTrace = {
    encode(message, writer = new BinaryWriter()) {
        if (message.lastCofStep !== undefined) {
            CofStepInfo.encode(message.lastCofStep, writer.uint32(10).fork()).join();
        }
        if (message.lastAbStep !== undefined) {
            AbStepInfo.encode(message.lastAbStep, writer.uint32(18).fork()).join();
        }
        if (message.budgetGroupId !== 0) {
            writer.uint32(24).uint32(message.budgetGroupId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDebugTrace();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.lastCofStep = CofStepInfo.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.lastAbStep = AbStepInfo.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.budgetGroupId = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return DebugTrace.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseDebugTrace();
        message.lastCofStep = (object.lastCofStep !== undefined && object.lastCofStep !== null)
            ? CofStepInfo.fromPartial(object.lastCofStep)
            : undefined;
        message.lastAbStep = (object.lastAbStep !== undefined && object.lastAbStep !== null)
            ? AbStepInfo.fromPartial(object.lastAbStep)
            : undefined;
        message.budgetGroupId = (_a = object.budgetGroupId) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
//# sourceMappingURL=debug_info.js.map
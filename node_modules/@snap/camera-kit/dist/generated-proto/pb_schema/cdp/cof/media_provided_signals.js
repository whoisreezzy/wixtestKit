import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export const protobufPackage = "snapchat.cdp.cof";
export var MediaType;
(function (MediaType) {
    MediaType[MediaType["MEDIA_TYPE_UNSET"] = 0] = "MEDIA_TYPE_UNSET";
    MediaType[MediaType["IMAGE"] = 1] = "IMAGE";
    MediaType[MediaType["VIDEO"] = 2] = "VIDEO";
    MediaType[MediaType["GIF"] = 3] = "GIF";
    MediaType[MediaType["AUDIO"] = 4] = "AUDIO";
    MediaType[MediaType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(MediaType || (MediaType = {}));
function createBaseMediaSignals() {
    return { mediaDurationMs: 0, mediaType: 0 };
}
export const MediaSignals = {
    encode(message, writer = new BinaryWriter()) {
        if (message.mediaDurationMs !== 0) {
            writer.uint32(8).uint32(message.mediaDurationMs);
        }
        if (message.mediaType !== 0) {
            writer.uint32(16).int32(message.mediaType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMediaSignals();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.mediaDurationMs = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.mediaType = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return MediaSignals.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMediaSignals();
        message.mediaDurationMs = (_a = object.mediaDurationMs) !== null && _a !== void 0 ? _a : 0;
        message.mediaType = (_b = object.mediaType) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
//# sourceMappingURL=media_provided_signals.js.map
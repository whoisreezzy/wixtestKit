{"version":3,"file":"upload_provided_signals.js","sourceRoot":"","sources":["../../../../../src/generated-proto/pb_schema/cdp/cof/upload_provided_signals.ts"],"names":[],"mappings":"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","sourcesContent":["import { BinaryReader, BinaryWriter } from \"@bufbuild/protobuf/wire\";\nexport const protobufPackage = \"snapchat.cdp.cof\";\nexport enum ChunkUploadPreference {\n    PREFERENCE_UNSET = 0,\n    GCS = 1,\n    S3 = 2,\n    AUTO = 3,\n    UNRECOGNIZED = -1\n}\nexport interface UploadSignals {\n    chunkUploadSupportRequired: boolean;\n    cloudfrontPop: string;\n    gcdnPop: string;\n    chunkUploadPreference: ChunkUploadPreference;\n}\nfunction createBaseUploadSignals(): UploadSignals {\n    return { chunkUploadSupportRequired: false, cloudfrontPop: \"\", gcdnPop: \"\", chunkUploadPreference: 0 };\n}\nexport const UploadSignals: MessageFns<UploadSignals> = {\n    encode(message: UploadSignals, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {\n        if (message.chunkUploadSupportRequired !== false) {\n            writer.uint32(8).bool(message.chunkUploadSupportRequired);\n        }\n        if (message.cloudfrontPop !== \"\") {\n            writer.uint32(18).string(message.cloudfrontPop);\n        }\n        if (message.gcdnPop !== \"\") {\n            writer.uint32(26).string(message.gcdnPop);\n        }\n        if (message.chunkUploadPreference !== 0) {\n            writer.uint32(32).int32(message.chunkUploadPreference);\n        }\n        return writer;\n    },\n    decode(input: BinaryReader | Uint8Array, length?: number): UploadSignals {\n        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUploadSignals();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1: {\n                    if (tag !== 8) {\n                        break;\n                    }\n                    message.chunkUploadSupportRequired = reader.bool();\n                    continue;\n                }\n                case 2: {\n                    if (tag !== 18) {\n                        break;\n                    }\n                    message.cloudfrontPop = reader.string();\n                    continue;\n                }\n                case 3: {\n                    if (tag !== 26) {\n                        break;\n                    }\n                    message.gcdnPop = reader.string();\n                    continue;\n                }\n                case 4: {\n                    if (tag !== 32) {\n                        break;\n                    }\n                    message.chunkUploadPreference = reader.int32() as any;\n                    continue;\n                }\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skip(tag & 7);\n        }\n        return message;\n    },\n    create<I extends Exact<DeepPartial<UploadSignals>, I>>(base?: I): UploadSignals {\n        return UploadSignals.fromPartial(base ?? ({} as any));\n    },\n    fromPartial<I extends Exact<DeepPartial<UploadSignals>, I>>(object: I): UploadSignals {\n        const message = createBaseUploadSignals();\n        message.chunkUploadSupportRequired = object.chunkUploadSupportRequired ?? false;\n        message.cloudfrontPop = object.cloudfrontPop ?? \"\";\n        message.gcdnPop = object.gcdnPop ?? \"\";\n        message.chunkUploadPreference = object.chunkUploadPreference ?? 0;\n        return message;\n    },\n};\ntype Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;\nexport type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {\n    [K in keyof T]?: DeepPartial<T[K]>;\n} : Partial<T>;\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin ? P : P & {\n    [K in keyof P]: Exact<P[K], I[K]>;\n} & {\n    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;\n};\nexport interface MessageFns<T> {\n    encode(message: T, writer?: BinaryWriter): BinaryWriter;\n    decode(input: BinaryReader | Uint8Array, length?: number): T;\n    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;\n    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;\n}\n"]}
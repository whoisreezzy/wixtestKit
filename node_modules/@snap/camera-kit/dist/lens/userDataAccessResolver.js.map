{"version":3,"file":"userDataAccessResolver.js","sourceRoot":"","sources":["../../src/lens/userDataAccessResolver.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAqD7C,MAAM,CAAC,MAAM,6BAA6B,GAAG,UAAU,CACnD,wBAAwB,EACxB,GAA2B,EAAE,CAAC,GAAG,EAAE,CAAC,cAAc,CACrD,CAAC","sourcesContent":["import { Injectable } from \"@snap/ts-inject\";\nimport type { Lens } from \"./Lens\";\n\n/**\n * Callback for determining user data access levels on a per-lens basis.\n *\n * @param lens - The lens for which the data access level is being determined.\n * @returns\n * - `\"unrestricted\"`: The lens can access sensitive user data if needed.\n * - `\"restricted\"`: The lens is denied access to sensitive user data, like location.\n * - A `Promise` that resolves to one of these values.\n *\n * @internal\n */\nexport type UserDataAccessResolver = (\n    lens: Lens\n) => \"restricted\" | \"unrestricted\" | Promise<\"restricted\" | \"unrestricted\">;\n\n/* eslint-disable max-len */\n/**\n * Service for determining user data access levels on a per-lens basis.\n * Can be overridden by applications to control access for individual lenses.\n *\n * Some lenses may require access to sensitive user data, such as location, to function properly.\n * APIs marked with the `Exposes User Data` tag (e.g., those in\n * [UserContextSystem](https://developers.snap.com/lens-studio/api/lens-scripting/interfaces/Built_In.UserContextSystem.html))\n * expose this sensitive data, and access to these APIs is managed through this resolver to ensure\n * proper control and privacy.\n *\n * The access level determines whether a lens can access such data:\n * - `\"unrestricted\"` (default): The lens can access sensitive user data if needed.\n * - `\"restricted\"`: The lens is denied access to sensitive user data, like location.\n *\n * Example usage:\n *\n * ```ts\n * const cameraKit = bootstrapCameraKit(config, (container) => {\n *   container.provides(\n *     Injectable(\n *       lensUserDataAccessResolverFactory.token,\n *       (): LensUserDataAccessResolver => (lens: Lens) => {\n *         return doesLensRequireStrictAccess(lens)\n *           ? \"restricted\"\n *           : \"unrestricted\";\n *       }\n *     )\n *   );\n * });\n * ```\n *\n * @internal\n */\n/* eslint-enable max-len */\nexport const userDataAccessResolverFactory = Injectable(\n    \"userDataAccessResolver\",\n    (): UserDataAccessResolver => () => \"unrestricted\"\n);\n"]}
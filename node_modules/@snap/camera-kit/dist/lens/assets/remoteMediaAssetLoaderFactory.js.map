{"version":3,"file":"remoteMediaAssetLoaderFactory.js","sourceRoot":"","sources":["../../../src/lens/assets/remoteMediaAssetLoaderFactory.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAC7C,OAAO,EAAE,+BAA+B,EAAE,MAAM,0CAA0C,CAAC;AAE3F,OAAO,EAAE,0BAA0B,EAAE,MAAM,oCAAoC,CAAC;AAChF,OAAO,EAAE,mBAAmB,EAAE,MAAM,oCAAoC,CAAC;AACzE,OAAO,EAAE,mBAAmB,EAAE,MAAM,sBAAsB,CAAC;AAM3D,MAAM,CAAC,MAAM,6BAA6B,GAAG,UAAU,CACnD,wBAAwB,EACxB,CAAC,0BAA0B,CAAC,KAAK,CAAU,EAC3C,CAAC,YAA0B,EAAe,EAAE;IACxC,MAAM,OAAO,GAAG,IAAI,mBAAmB,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,+BAA+B,EAAE,CAAC,CAAC,OAAO,CAAC;IAErG,OAAO,SAAe,sBAAsB,CAAC,EAAE,eAAe,EAAE,EAAE,OAAO,EAAE,EAAE,WAAW,EAAE;;YAOtF,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,GAAG,MAAM,OAAO,CACpC,OAAO,EACP,mBAAmB,CAAC,EAAE,KAAK,EAAE,aAAa,EAAE,EAAE,WAAW,CAAC,CAC7D,CAAC;YACF,IAAI,CAAC,QAAQ,CAAC,EAAE;gBAAE,MAAM,QAAQ,CAAC;YACjC,OAAO,MAAM,CAAC;QAClB,CAAC;KAAA,CAAC;AACN,CAAC,CACJ,CAAC","sourcesContent":["import { Injectable } from \"@snap/ts-inject\";\nimport { createArrayBufferParsingHandler } from \"../../handlers/arrayBufferParsingHandler\";\nimport type { FetchHandler } from \"../../handlers/defaultFetchHandler\";\nimport { defaultFetchHandlerFactory } from \"../../handlers/defaultFetchHandler\";\nimport { HandlerChainBuilder } from \"../../handlers/HandlerChainBuilder\";\nimport { withRequestPriority } from \"../../handlers/utils\";\nimport type { AssetLoader } from \"./LensAssetRepository\";\n\n/**\n * @internal\n */\nexport const remoteMediaAssetLoaderFactory = Injectable(\n    \"remoteMediaAssetLoader\",\n    [defaultFetchHandlerFactory.token] as const,\n    (fetchHandler: FetchHandler): AssetLoader => {\n        const handler = new HandlerChainBuilder(fetchHandler).map(createArrayBufferParsingHandler()).handler;\n\n        return async function remoteMediaAssetLoader({ assetDescriptor: { assetId }, lowPriority }) {\n            // as a default option assuming that RemoteMedia asset type contains asset url in assetId\n            // this behavior could be changed by providing own implementation for RemoteMedia asset loader\n            //   const cameraKit = bootstrapCameraKit(config, container => {\n            //     return container.provides(Injectable(\n            //       remoteMediaAssetLoaderFactory.token, ...\n            // TODO: remove force-cache once https://jira.sc-corp.net/browse/CAMKIT-3671 is addressed\n            const [buffer, response] = await handler(\n                assetId,\n                withRequestPriority({ cache: \"force-cache\" }, lowPriority)\n            );\n            if (!response.ok) throw response;\n            return buffer;\n        };\n    }\n);\n"]}
{"version":3,"file":"fetchWatermarkLens.js","sourceRoot":"","sources":["../../src/lens/fetchWatermarkLens.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,MAAM,CAAC;AAC5B,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAE7C,OAAO,EAAE,0BAA0B,EAAE,MAAM,6CAA6C,CAAC;AACzF,OAAO,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAC;AAE7C,OAAO,EAAE,qBAAqB,EAAE,MAAM,kBAAkB,CAAC;AAEzD,MAAM,MAAM,GAAG,SAAS,CAAC,oBAAoB,CAAC,CAAC;AAG/C,MAAM,CAAC,MAAM,mBAAmB,GAAG,YAAY,CAAC;AAKhD,MAAM,CAAC,MAAM,kBAAkB,GAAG,UAAU,CACxC,oBAAoB,EACpB,CAAC,0BAA0B,CAAC,KAAK,EAAE,qBAAqB,CAAC,KAAK,CAAU,EACxE,CAAC,mBAAwC,EAAE,cAA8B,EAAE,EAAE;IACzE,mBAAmB;SACd,uBAAuB,EAAE;SACzB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACb,SAAS,CAAC;QACP,IAAI,EAAE,CAAO,MAAM,EAAE,EAAE;YACnB,IAAI,MAAM,CAAC,gBAAgB,EAAE;gBACzB,MAAM,IAAI,GAAG,MAAM,cAAc,CAAC,QAAQ,CAAC,EAAE,EAAE,mBAAmB,CAAC,CAAC;gBACpE,MAAM,cAAc,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;aACjD;QACL,CAAC,CAAA;QACD,KAAK,EAAE,MAAM,CAAC,KAAK;KACtB,CAAC,CAAC;AACX,CAAC,CACJ,CAAC","sourcesContent":["import { take } from \"rxjs\";\nimport { Injectable } from \"@snap/ts-inject\";\nimport type { RemoteConfiguration } from \"../remote-configuration/remoteConfiguration\";\nimport { remoteConfigurationFactory } from \"../remote-configuration/remoteConfiguration\";\nimport { getLogger } from \"../logger/logger\";\nimport type { LensRepository } from \"./LensRepository\";\nimport { lensRepositoryFactory } from \"./LensRepository\";\n\nconst logger = getLogger(\"fetchWatermarkLens\");\n\n// Special group for all \"watermark\" lenses that are applied by the Camera Kit internally.\nexport const watermarksLensGroup = \"watermarks\";\n\n/**\n * @internal\n */\nexport const fetchWatermarkLens = Injectable(\n    \"fetchWatermarkLens\",\n    [remoteConfigurationFactory.token, lensRepositoryFactory.token] as const,\n    (remoteConfiguration: RemoteConfiguration, lensRepository: LensRepository) => {\n        remoteConfiguration\n            .getInitializationConfig()\n            .pipe(take(1))\n            .subscribe({\n                next: async (config) => {\n                    if (config.watermarkEnabled) {\n                        const lens = await lensRepository.loadLens(\"\", watermarksLensGroup);\n                        await lensRepository.cacheLensContent([lens]);\n                    }\n                },\n                error: logger.error,\n            });\n    }\n);\n"]}
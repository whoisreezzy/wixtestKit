{"version":3,"file":"RootServices.js","sourceRoot":"","sources":["../src/RootServices.ts"],"names":[],"mappings":"","sourcesContent":["import type { ServicesFromInjectables } from \"@snap/ts-inject\";\nimport type { lensRepositoryFactory } from \"./lens/LensRepository\";\nimport type { lensCoreFactory } from \"./lens-core-module/loader/lensCoreFactory\";\nimport type { remoteMediaAssetLoaderFactory } from \"./lens/assets/remoteMediaAssetLoaderFactory\";\nimport type { deviceDependentAssetLoaderFactory } from \"./lens/assets/deviceDependentAssetLoader\";\nimport type { staticAssetLoaderFactory } from \"./lens/assets/staticAssetLoader\";\nimport type { defaultFetchHandlerFactory } from \"./handlers/defaultFetchHandler\";\nimport type { cameraKitServiceFetchHandlerFactory } from \"./handlers/cameraKitServiceFetchHandlerFactory\";\nimport type { createCameraKitConfigurationFactory } from \"./configuration\";\nimport type { externalMetricsSubjectFactory, metricsClientFactory } from \"./clients/metricsClient\";\nimport type { LensCore } from \"./lens-core-module/lensCore\";\nimport type { metricsEventTargetFactory } from \"./metrics/metricsEventTarget\";\nimport type { lensSourcesFactory } from \"./lens/LensSource\";\nimport type { uriHandlersFactory } from \"./uri-handlers/UriHandlers\";\nimport type { lensPersistenceStoreFactory } from \"./lens/LensPersistenceStore\";\nimport type { cofHandlerFactory } from \"./remote-configuration/cofHandler\";\nimport type { remoteConfigurationFactory } from \"./remote-configuration/remoteConfiguration\";\nimport type { lensAssetRepositoryFactory } from \"./lens/assets/LensAssetRepository\";\nimport type { legalStateFactory } from \"./legal/legalState\";\nimport type { legalPromptFactory } from \"./legal/legalPrompt\";\nimport type { logEntriesFactory } from \"./logger/logEntries\";\nimport type { reportGlobalException } from \"./metrics/reporters/reportGlobalException\";\nimport type { requestStateEventTargetFactory } from \"./handlers/requestStateEmittingHandler\";\nimport type { lensesClientFactory } from \"./clients/lensesClient\";\nimport type { pageVisibilityFactory } from \"./common/pageVisibility\";\nimport type { remoteApiServicesFactory } from \"./uri-handlers/internal-handlers/remoteApiUriHandler\";\nimport type { grpcHandlerFactory } from \"./clients/grpcHandler\";\nimport type { filePickerFactory } from \"./lens-client-interface/filePicker\";\nimport type { userDataAccessResolverFactory } from \"./lens/userDataAccessResolver\";\nimport type { remoteApiSpecsClientFactory } from \"./clients/remoteApiSpecsClient\";\nimport type { geoDataProviderFactory } from \"./geo/geoDataProvider\";\n\n/**\n * All services available to be customized by client app.\n */\nexport type PublicServices = ServicesFromInjectables<\n    [\n        ReturnType<typeof createCameraKitConfigurationFactory>,\n        typeof userDataAccessResolverFactory,\n        typeof filePickerFactory,\n        typeof defaultFetchHandlerFactory,\n        typeof remoteMediaAssetLoaderFactory,\n        typeof lensSourcesFactory,\n        typeof remoteApiServicesFactory,\n        typeof uriHandlersFactory,\n        typeof geoDataProviderFactory,\n        typeof externalMetricsSubjectFactory\n    ]\n>;\n\n/**\n * Define all the Services contained in CameraKit's root dependency injection container.\n *\n * Note: we do end up defining this list of Services twice (once here to create the type, once when we actually\n * create the Container inside the `bootstrapCameraKit` function). We could avoid doing this and just infer the\n * RootContainer type from the constructed container â€“ but since we can only do that *inside* `bootstrapCameraKit`, it\n * makes it more awkward to provide a type for the `provide` user-supplied function (or use the type elsewhere, like in\n * CameraKitSession).\n *\n * There may be a way to eliminate this extra boilerplate, but for now it's required in order to present a cleaner\n * `bootstrapCameraKit` API to applications.\n */\nexport type RootServices = {\n    // bootstrapCameraKit replaces the lensCoreFactory token's value with the resolved LensCore (rather than the\n    // Promise of the LensCore), so we need to do the same re-mapping here.\n    [lensCoreFactory.token]: LensCore;\n} & PublicServices &\n    ServicesFromInjectables<\n        [\n            typeof pageVisibilityFactory,\n            typeof metricsEventTargetFactory,\n            typeof requestStateEventTargetFactory,\n            typeof cameraKitServiceFetchHandlerFactory,\n            typeof grpcHandlerFactory,\n            typeof lensesClientFactory,\n            typeof remoteApiSpecsClientFactory,\n            typeof cofHandlerFactory,\n            typeof remoteConfigurationFactory,\n            typeof lensRepositoryFactory,\n            typeof lensPersistenceStoreFactory,\n            typeof metricsClientFactory,\n            typeof lensAssetRepositoryFactory,\n            typeof deviceDependentAssetLoaderFactory,\n            typeof staticAssetLoaderFactory,\n            typeof legalStateFactory,\n            typeof legalPromptFactory,\n            typeof logEntriesFactory,\n            typeof reportGlobalException\n        ]\n    >;\n"]}
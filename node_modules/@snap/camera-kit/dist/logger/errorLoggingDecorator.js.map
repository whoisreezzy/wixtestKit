{"version":3,"file":"errorLoggingDecorator.js","sourceRoot":"","sources":["../../src/logger/errorLoggingDecorator.ts"],"names":[],"mappings":"AASA,MAAM,UAAU,qBAAqB,CAAmC,MAAc;IAClF,MAAM,WAAW,GAAG,CAAC,KAAc,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC5D,OAAO,SAAS,SAAS,CACrB,MAA6C,EAC7C,QAAkF;QAElF,OAAO,UAAgB,GAAG,IAAI;YAC1B,IAAI;gBAEA,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBACxC,IAAI,MAAM,YAAY,OAAO,EAAE;oBAG3B,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;iBAC7B;gBACD,OAAO,MAAM,CAAC;aACjB;YAAC,OAAO,KAAK,EAAE;gBACZ,WAAW,CAAC,KAAK,CAAC,CAAC;gBACnB,MAAM,KAAK,CAAC;aACf;QACL,CAAC,CAAC;IACN,CAAC,CAAC;AACN,CAAC","sourcesContent":["import type { Logger } from \"./logger\";\n\n/**\n * Creates a class member decorator that logs errors thrown during the member invocation.\n * If the member returns a Promise, promise rejections are handled.\n * Any caught errors are re-thrown.\n * @param logger The logger to report errors to.\n * @return A decorator function.\n */\nexport function errorLoggingDecorator<This, Args extends any[], Return>(logger: Logger) {\n    const handleError = (error: unknown) => logger.error(error);\n    return function validator(\n        target: (this: This, ...args: Args) => Return,\n        _context: ClassMethodDecoratorContext<This, (this: This, ...args: Args) => Return>\n    ): (this: This, ...args: Args) => Return {\n        return function (this, ...args) {\n            try {\n                // \"this\" refers to original scope this function is called in\n                const result = target.apply(this, args);\n                if (result instanceof Promise) {\n                    // in case of a promise we don't return our promise chain\n                    // that logs an error because we want callers to handle the error as well\n                    result.catch(handleError);\n                }\n                return result;\n            } catch (error) {\n                handleError(error);\n                throw error;\n            }\n        };\n    };\n}\n"]}
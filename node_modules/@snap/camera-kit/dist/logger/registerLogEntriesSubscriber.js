import { filter } from "rxjs";
import { Injectable } from "@snap/ts-inject";
import { stringifyError } from "../common/errorHelpers";
import { configurationToken } from "../configuration";
import { getPlatformInfo } from "../platform/platformInfo";
import { logEntriesFactory } from "./logEntries";
import { logLevelMap } from "./logger";
export const registerLogEntriesSubscriber = Injectable("registerLogEntriesSubscriber", [configurationToken, logEntriesFactory.token], (configuration, logEntries) => {
    logEntries
        .pipe(filter((entry) => logLevelMap[entry.level] >= logLevelMap[configuration.logLevel]))
        .subscribe((logEntry) => {
        switch (configuration.logger) {
            case "console":
                const messages = getPlatformInfo().browser.brand === "Chrome"
                    ? logEntry.messages.map((message) => {
                        if (!(message instanceof Error))
                            return message;
                        message.stack = stringifyError(message);
                        return message;
                    })
                    : logEntry.messages;
                console[logEntry.level](`[CameraKit.${logEntry.module}]`, ...messages);
                break;
        }
    });
});
//# sourceMappingURL=registerLogEntriesSubscriber.js.map
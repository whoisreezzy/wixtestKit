{"version":3,"file":"remoteConfiguration.js","sourceRoot":"","sources":["../../src/remote-configuration/remoteConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Observable } from \"rxjs\";\nimport { from, map, mergeMap, shareReplay, take } from \"rxjs\";\nimport { Injectable } from \"@snap/ts-inject\";\nimport type { CameraKitConfiguration } from \"../configuration\";\nimport { configurationToken } from \"../configuration\";\nimport type { ConfigTargetingRequest } from \"../generated-proto/pb_schema/cdp/cof/config_request\";\nimport type { ConfigResult } from \"../generated-proto/pb_schema/cdp/cof/config_result\";\nimport { Namespace } from \"../generated-proto/pb_schema/cdp/cof/namespace\";\nimport type { GetInitializationConfigResponse } from \"../generated-proto/pb_schema/camera_kit/v3/service\";\nimport { MetricsDefinition } from \"../generated-proto/pb_schema/camera_kit/v3/service\";\nimport type { GrpcHandler } from \"../clients/grpcHandler\";\nimport { grpcHandlerFactory } from \"../clients/grpcHandler\";\nimport type { TsProtoServiceClient } from \"../clients/createTsProtoClient\";\nimport { createTsProtoClient } from \"../clients/createTsProtoClient\";\nimport { cofHandlerFactory } from \"./cofHandler\";\n\nconst defaultTargetingRequest: Partial<ConfigTargetingRequest> = {\n    namespaces: [Namespace.LENS_CORE, Namespace.CAMERA_KIT_CORE, Namespace.LENS_CORE_CONFIG],\n};\n\ntype SupportedNamespaces = Namespace.LENS_CORE | Namespace.CAMERA_KIT_CORE | Namespace.LENS_CORE_CONFIG;\n\nexport type InitializationConfig = GetInitializationConfigResponse;\n\nexport class RemoteConfiguration {\n    private readonly configById: Observable<Map<string, ConfigResult[]>>;\n    private readonly initializationConfig: Observable<InitializationConfig>;\n\n    constructor(\n        lensPerformance: CameraKitConfiguration[\"lensPerformance\"],\n        cofHandler: ReturnType<typeof cofHandlerFactory>,\n        grpcClient: TsProtoServiceClient<typeof MetricsDefinition>\n    ) {\n        const lensCluster = Promise.resolve(lensPerformance).then((lensPerformance) => {\n            // `0` means no cluster could be determined. For COF, we'll omit a value in that case.\n            return lensPerformance?.cluster === 0 ? undefined : lensPerformance?.cluster;\n        });\n\n        this.configById = from(lensCluster).pipe(\n            // Note: we don't catch errors here, purposefully letting them propagate to subscribers outside this class.\n            // Subscribers, having more context about the config use-case, will know better how to handle an error than\n            // we do here (e.g. their logging / reporting will have more context, and they can use the error they get\n            // from this Observable as a cause).\n            mergeMap((lensClusterOrig4) =>\n                from(\n                    cofHandler({\n                        ...defaultTargetingRequest,\n                        lensClusterOrig4,\n                    })\n                )\n            ),\n            map((result) => {\n                const configById = new Map<string, ConfigResult[]>();\n                result.configResults.forEach((config) => {\n                    const configsWithId = configById.get(config.configId) ?? [];\n                    configsWithId.push(config);\n                    configById.set(config.configId, configsWithId);\n                });\n                return configById;\n            }),\n            shareReplay(1)\n        );\n\n        this.initializationConfig = from(grpcClient.getInitializationConfig({})).pipe(\n            map((result) => {\n                if (result.ok) {\n                    const response = result.unwrap();\n                    if (response.message) return response.message;\n                    else\n                        throw new Error(\n                            \"Failed to load initialization config. gRPC response successful, but \" +\n                                `message was null. gRPC status: ${response.statusMessage}`\n                        );\n                }\n                throw new Error(\n                    `Failed to load initialization config. gRPC status message: ${result.unwrapErr().statusMessage}`\n                );\n            }),\n            shareReplay(1)\n        );\n    }\n\n    /**\n     * COF configuration.\n     */\n    get(configId: string): Observable<ConfigResult[]> {\n        return this.configById.pipe(map((config) => config.get(configId) ?? []));\n    }\n\n    /**\n     * Configuration that is provided by Camera Kit backend.\n     */\n    getInitializationConfig(): Observable<InitializationConfig> {\n        return this.initializationConfig;\n    }\n\n    /**\n     * Calls https://cof.sc-corp.net/config-details/LENS_FEATURE_GPU_INDEX to resolve GPU index.\n     */\n    getGpuIndexConfig(): Observable<number> {\n        const lensClusterConfigName = \"LENS_FEATURE_GPU_INDEX\";\n        return this.get(lensClusterConfigName).pipe(\n            map((configResults) => {\n                if (configResults.length === 0) {\n                    throw new Error(`Cannot find '${lensClusterConfigName}' config.`);\n                }\n                return configResults[0].value?.intValue ?? -1;\n            }),\n            shareReplay(1)\n        );\n    }\n\n    getNamespace(namespace: SupportedNamespaces): Observable<ConfigResult[]> {\n        return this.configById.pipe(\n            map((configs) => {\n                const namespaceConfigs = Array.from(configs.values())\n                    .filter((values) => values.some((c) => c.namespace === namespace))\n                    .flatMap((results) => results);\n\n                return namespaceConfigs;\n            })\n        );\n    }\n}\n\nexport const remoteConfigurationFactory = Injectable(\n    \"remoteConfiguration\",\n    [configurationToken, cofHandlerFactory.token, grpcHandlerFactory.token] as const,\n    (\n        config: CameraKitConfiguration,\n        cofHandler: ReturnType<typeof cofHandlerFactory>,\n        grpcHandler: GrpcHandler\n    ): RemoteConfiguration => {\n        const remoteConfig = new RemoteConfiguration(\n            config.lensPerformance,\n            cofHandler,\n            createTsProtoClient(MetricsDefinition, grpcHandler)\n        );\n\n        // We'll kick off remote configuration loading by subscribing (and then unsubscribing) to a dummy config value.\n        // Subsequent requests for config will use the shared Observable, benefitting from this eager loading.\n        remoteConfig.get(\"\").pipe(take(1)).subscribe();\n\n        return remoteConfig;\n    }\n);\n"]}
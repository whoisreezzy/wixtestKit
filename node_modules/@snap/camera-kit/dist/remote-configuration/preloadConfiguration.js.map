{"version":3,"file":"preloadConfiguration.js","sourceRoot":"","sources":["../../src/remote-configuration/preloadConfiguration.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,MAAM,CAAC;AAC5B,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAC7C,OAAO,EAAE,SAAS,EAAE,MAAM,gDAAgD,CAAC;AAC3E,OAAO,EAAE,eAAe,EAAE,MAAM,4CAA4C,CAAC;AAG7E,OAAO,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAC;AAE7C,OAAO,EAAE,0BAA0B,EAAE,MAAM,uBAAuB,CAAC;AAEnE,MAAM,MAAM,GAAG,SAAS,CAAC,2BAA2B,CAAC,CAAC;AAEtD,MAAM,CAAC,MAAM,yBAAyB,GAAG,UAAU,CAC/C,2BAA2B,EAC3B,CAAC,eAAe,CAAC,KAAK,EAAE,0BAA0B,CAAC,KAAK,CAAU,EAClE,CAAC,QAAkB,EAAE,mBAAwC,EAAE,EAAE;IAC7D,mBAAmB;SACd,YAAY,CAAC,SAAS,CAAC,gBAAgB,CAAC;SACxC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACb,SAAS,CAAC;QACP,IAAI,EAAE,CAAC,OAAO,EAAE,EAAE;YACd,MAAM,MAAM,GAAmC,OAAO,CAAC,GAAG,CACtD,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAqB,CAAA,CACnE,CAAC;YAEF,QAAQ,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC;QAC/C,CAAC;QACD,KAAK,EAAE,MAAM,CAAC,KAAK;KACtB,CAAC,CAAC;AACX,CAAC,CACJ,CAAC","sourcesContent":["import { take } from \"rxjs\";\nimport { Injectable } from \"@snap/ts-inject\";\nimport { Namespace } from \"../generated-proto/pb_schema/cdp/cof/namespace\";\nimport { lensCoreFactory } from \"../lens-core-module/loader/lensCoreFactory\";\nimport type { LensCore } from \"../lens-core-module/lensCore\";\nimport type { LensCoreConfig, SetPreloadedConfigurationInput } from \"../lens-core-module/generated-types\";\nimport { getLogger } from \"../logger/logger\";\nimport type { RemoteConfiguration } from \"./remoteConfiguration\";\nimport { remoteConfigurationFactory } from \"./remoteConfiguration\";\n\nconst logger = getLogger(\"setPreloadedConfiguration\");\n\nexport const setPreloadedConfiguration = Injectable(\n    \"setPreloadedConfiguration\",\n    [lensCoreFactory.token, remoteConfigurationFactory.token] as const,\n    (lensCore: LensCore, remoteConfiguration: RemoteConfiguration) => {\n        remoteConfiguration\n            .getNamespace(Namespace.LENS_CORE_CONFIG)\n            .pipe(take(1))\n            .subscribe({\n                next: (configs) => {\n                    const inputs: SetPreloadedConfigurationInput = configs.map(\n                        ({ configId, value }) => ({ configId, value } as LensCoreConfig)\n                    );\n\n                    lensCore.setPreloadedConfiguration(inputs);\n                },\n                error: logger.error,\n            });\n    }\n);\n"]}
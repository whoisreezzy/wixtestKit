{"version":3,"file":"debounceTimeAfter.js","sourceRoot":"","sources":["../../src/observable-operators/debounceTimeAfter.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,cAAc,EAAE,MAAM,EAAE,YAAY,EAAE,GAAG,EAAE,MAAM,MAAM,CAAC;AA4B7E,MAAM,UAAU,iBAAiB,CAC7B,MAAc,EACd,QAAgB,EAChB,YAA2B,cAAc;IAEzC,OAAO,CAAC,MAAqB,EAA4B,EAAE;QACvD,OAAO,IAAI,UAAU,CAAe,CAAC,UAAU,EAAE,EAAE;YAE/C,IAAI,cAAc,GAAG,CAAC,CAAC;YAEvB,OAAO,MAAM;iBACR,IAAI,CACD,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;gBAEV,cAAc,EAAE,CAAC;gBAEjB,IAAI,cAAc,IAAI,MAAM,EAAE;oBAC1B,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;iBAC/C;YACL,CAAC,CAAC,EAEF,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,CAAC,EACtD,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;gBAEX,IAAI,cAAc,GAAG,MAAM,EAAE;oBACzB,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,MAAM,EAAE,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;iBACxE;gBAED,cAAc,GAAG,CAAC,CAAC;YACvB,CAAC,CAAC,CACL;iBACA,SAAS,EAAE,CAAC;QACrB,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;AACN,CAAC","sourcesContent":["import type { OperatorFunction, SchedulerLike } from \"rxjs\";\nimport { Observable, asyncScheduler, buffer, debounceTime, tap } from \"rxjs\";\n\nexport type Debounced<T> =\n    | {\n          type: \"initial\";\n          value: T;\n      }\n    | {\n          type: \"debounced\";\n          values: T[];\n      };\n\n/**\n * Creates an RxJS operator to emit the first source value immediately, and then buffers subsequent\n * source values for a specified duration. Once the duration elapses, it emits all buffered values\n * from the source observable as an array. The operator resets and repeats this behavior for each\n * source emission series.\n *\n * This operator is useful for scenarios where immediate feedback is required from the first event,\n * followed by a collective response to all subsequent events within the debounce period.\n *\n * @param {number} amount The number of initial events to pass through immediately.\n * @param {number} duration The debounce time in milliseconds during which subsequent events are collected.\n * @param {SchedulerLike} scheduler The scheduler to use for managing the timers that handle the debounce mechanism.\n *                                  Defaults to `asyncScheduler`.\n * @returns {OperatorFunction<T, Debounced<T>>} An RxJS operator function that emits an object containing\n * the immediate event and an array of debounced events.\n */\nexport function debounceTimeAfter<T>(\n    amount: number,\n    duration: number,\n    scheduler: SchedulerLike = asyncScheduler\n): OperatorFunction<T, Debounced<T>> {\n    return (source: Observable<T>): Observable<Debounced<T>> => {\n        return new Observable<Debounced<T>>((subscriber) => {\n            // keep track of iteration count until flow completes\n            let iterationCount = 0;\n\n            return source\n                .pipe(\n                    tap((value) => {\n                        // increment iteration count\n                        iterationCount++;\n                        // emit value to subscriber when it is <= iteration amount\n                        if (iterationCount <= amount) {\n                            subscriber.next({ type: \"initial\", value });\n                        }\n                    }),\n                    // debounce according to provided duration\n                    buffer(source.pipe(debounceTime(duration, scheduler))),\n                    tap((values) => {\n                        // emit subsequent values to subscriber\n                        if (iterationCount > amount) {\n                            subscriber.next({ type: \"debounced\", values: values.slice(amount) });\n                        }\n                        // reset iteration count when debounce is completed\n                        iterationCount = 0;\n                    })\n                )\n                .subscribe();\n        });\n    };\n}\n"]}
import { StateMachine } from "@snap/state-management";
import type { Lens } from "../lens/Lens";
import type { LensRepository } from "../lens/LensRepository";
import type { IndexedDBPersistence } from "../persistence/IndexedDBPersistence";
import type { LensLaunchData } from "../lens/LensLaunchData";
import type { LensAssetRepository } from "../lens/assets/LensAssetRepository";
import type { LegalError, LensContentValidationError, LensError } from "../namedErrors";
import type { MetricsClient } from "../clients/metricsClient";
import type { LensCore } from "../lens-core-module/lensCore";
import type { RemoteConfiguration } from "../remote-configuration/remoteConfiguration";
import type { UserDataAccessResolver } from "../lens/userDataAccessResolver";
declare const createLensState: () => StateMachine<import("@snap/state-management").Action<"applyLens", {
    lens: Lens;
    launchData?: LensLaunchData | undefined;
}> | import("@snap/state-management").Action<"downloadComplete", Lens> | import("@snap/state-management").Action<"turnedOn", Lens> | import("@snap/state-management").Action<"resourcesLoaded", Lens> | import("@snap/state-management").Action<"firstFrameProcessed", Lens> | import("@snap/state-management").Action<"applyLensComplete", Lens> | import("@snap/state-management").Action<"applyLensFailed", {
    error: LensErrors;
    lens: Lens;
}> | import("@snap/state-management").Action<"applyLensAborted", Lens> | import("@snap/state-management").Action<"removeLens", undefined> | import("@snap/state-management").Action<"turnedOff", Lens> | import("@snap/state-management").Action<"removeLensComplete", undefined> | import("@snap/state-management").Action<"removeLensFailed", Error>, import("@snap/state-management").State<"noLensApplied", undefined> | import("@snap/state-management").State<"applyingLens", Lens> | import("@snap/state-management").State<"lensApplied", Lens>>;
export type LensErrors = LegalError | LensContentValidationError | LensError;
export type LensState = ReturnType<typeof createLensState>;
export declare const lensStateFactory: {
    (args_0: LensCore, args_1: LensRepository, args_2: LensAssetRepository, args_3: IndexedDBPersistence<ArrayBuffer>, args_4: StateMachine<import("@snap/state-management").Action<"requestLegalPrompt", undefined> | import("@snap/state-management").Action<"accept", string> | import("@snap/state-management").Action<"reject", string>, import("@snap/state-management").State<"unknown", undefined> | import("@snap/state-management").State<"accepted", undefined> | import("@snap/state-management").State<"rejected", undefined>>, args_5: MetricsClient, args_6: RemoteConfiguration, args_7: UserDataAccessResolver): StateMachine<import("@snap/state-management").Action<"applyLens", {
        lens: Lens;
        launchData?: LensLaunchData | undefined;
    }> | import("@snap/state-management").Action<"downloadComplete", Lens> | import("@snap/state-management").Action<"turnedOn", Lens> | import("@snap/state-management").Action<"resourcesLoaded", Lens> | import("@snap/state-management").Action<"firstFrameProcessed", Lens> | import("@snap/state-management").Action<"applyLensComplete", Lens> | import("@snap/state-management").Action<"applyLensFailed", {
        error: LensErrors;
        lens: Lens;
    }> | import("@snap/state-management").Action<"applyLensAborted", Lens> | import("@snap/state-management").Action<"removeLens", undefined> | import("@snap/state-management").Action<"turnedOff", Lens> | import("@snap/state-management").Action<"removeLensComplete", undefined> | import("@snap/state-management").Action<"removeLensFailed", Error>, import("@snap/state-management").State<"noLensApplied", undefined> | import("@snap/state-management").State<"applyingLens", Lens> | import("@snap/state-management").State<"lensApplied", Lens>>;
    token: "lensState";
    dependencies: readonly ["lensCore", "LensRepository", "lensAssetRepository", "lensPersistenceStore", "legalState", "metricsClient", "remoteConfiguration", "userDataAccessResolver"];
};
export {};
//# sourceMappingURL=lensState.d.ts.map
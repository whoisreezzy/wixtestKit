import { __esDecorate, __runInitializers } from "tslib";
import { errorLoggingDecorator } from "../logger/errorLoggingDecorator";
import { getLogger } from "../logger/logger";
import { LensPerformanceMeasurement } from "./LensPerformanceMeasurement";
const logger = getLogger("RenderingMetrics");
export let LensPerformanceMetrics = (() => {
    var _a;
    let _instanceExtraInitializers = [];
    let _beginMeasurement_decorators;
    return _a = class LensPerformanceMetrics {
            constructor(lensCore) {
                this.lensCore = (__runInitializers(this, _instanceExtraInitializers), lensCore);
                this.measurementInstances = new Set();
                this.lensCore
                    .setOnFrameProcessedCallback({
                    onFrameProcessed: ({ processingTimeMs }) => {
                        try {
                            for (const measurement of this.measurementInstances.values()) {
                                measurement.update(processingTimeMs);
                            }
                        }
                        catch (error) {
                            logger.error(error);
                        }
                    },
                })
                    .catch((error) => logger.error(`Failed registering setOnFrameProcessedCallback with error: ${error.message}`));
            }
            beginMeasurement() {
                return new LensPerformanceMeasurement(this.measurementInstances);
            }
        },
        (() => {
            _beginMeasurement_decorators = [errorLoggingDecorator(logger)];
            __esDecorate(_a, null, _beginMeasurement_decorators, { kind: "method", name: "beginMeasurement", static: false, private: false, access: { has: obj => "beginMeasurement" in obj, get: obj => obj.beginMeasurement } }, null, _instanceExtraInitializers);
        })(),
        _a;
})();
//# sourceMappingURL=LensPerformanceMetrics.js.map
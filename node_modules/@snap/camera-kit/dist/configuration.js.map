{"version":3,"file":"configuration.js","sourceRoot":"","sources":["../src/configuration.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAE7C,OAAO,EAAE,qBAAqB,EAAE,MAAM,gCAAgC,CAAC;AACvE,OAAO,EAAE,yBAAyB,EAAE,MAAM,0BAA0B,CAAC;AAerE,MAAM,oBAAoB,GAAmF;IAIzG,eAAe,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,UAAU,EAAE,EAAE,EAAE,iBAAiB,EAAE,SAAS,EAAE;IAC7E,MAAM,EAAE,MAAM;IACd,QAAQ,EAAE,MAAM;IAChB,eAAe,EAAE,IAAI;IACrB,WAAW,EAAE,2BAA2B;IACxC,eAAe,EAAE,SAAS;IAC1B,KAAK,EAAE,EAAE;CACZ,CAAC;AAiOF,MAAM,CAAC,MAAM,kBAAkB,GAAG,eAAe,CAAC;AAKlD,SAAS,oBAAoB;IAIzB,OAAO,CACH,kBAAkB,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;QAC3C,CAAC,SAAS,CAAC,QAAQ,KAAK,UAAU,IAAI,SAAS,CAAC,cAAc,GAAG,CAAC,CAAC,CACtE,CAAC;AACN,CAAC;AAGD,MAAM,CAAC,MAAM,mCAAmC,GAAG,CAAC,aAA8C,EAAE,EAAE;IAElG,MAAM,SAAS,GAAG,yBAAyB,EAAE,CAAC;IAC9C,IAAI,SAAS,EAAE;QACX,OAAO,CAAC,IAAI,CAAC,iCAAiC,EAAE,SAAS,CAAC,CAAC;KAC9D;IACD,OAAO,UAAU,CAAC,kBAAkB,EAAE,GAA2B,EAAE;QAG/D,MAAM,UAAU,mCACT,aAAa,KAChB,eAAe,EACX,aAAa,CAAC,eAAe,YAAY,OAAO;gBAC5C,CAAC;oBACC,aAAa,CAAC,eAAe,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,oBAAoB,CAAC,eAAgB,CAAC;gBAClF,CAAC,CAAC,aAAa,CAAC,eAAe,GAC1C,CAAC;QACF,mEACO,oBAAoB,KAGvB,eAAe,EAAE,oBAAoB,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,oBAAoB,CAAC,eAAe,KACnF,qBAAqB,CAAC,UAAU,CAAC,GACjC,qBAAqB,CAAC,SAAS,aAAT,SAAS,cAAT,SAAS,GAAI,EAAE,CAAC,EAC3C;IACN,CAAC,CAAC,CAAC;AACP,CAAC,CAAC","sourcesContent":["import { Injectable } from \"@snap/ts-inject\";\nimport type { EstimatedLensPerformance } from \"./benchmark/estimateLensPerformanceCluster\";\nimport { copyDefinedProperties } from \"./common/copyDefinedProperties\";\nimport { getConfigurationOverrides } from \"./configurationOverrides\";\nimport type { Lens } from \"./lens/Lens\";\nimport type { LogLevelName } from \"./logger/logger\";\n\n/**\n * From T, pick the set of properties whose values are optional. Create a new type containing only those properties.\n */\ntype PickOptionals<T> = {\n    [K in keyof T as T[K] extends Exclude<T[K], undefined> ? never : K]: T[K];\n};\n\n/**\n * Defaults are provided for runtime configuration and any optional bootstrap configuration properties which require\n * defaults.\n */\nconst defaultConfiguration: CameraKitRuntimeConfiguration & PickOptionals<CameraKitBootstrapConfiguration> = {\n    // If the applications doesn't provide performance data (e.g. via estimateLensPerformance), we'll use 0 to indicate\n    // no performance estimation occurred. This is indicative of typical performance-targeting logic, which often\n    // defaults to the lowest-tier experience in the absence of performance cluster data.\n    lensPerformance: { cluster: 0, benchmarks: [], webglRendererInfo: \"unknown\" },\n    logger: \"noop\",\n    logLevel: \"info\",\n    shouldUseWorker: true,\n    apiHostname: \"camera-kit-api.snapar.com\",\n    userAgentFlavor: \"release\",\n    fonts: [],\n};\n\ninterface CameraKitRuntimeConfiguration {\n    lensPerformance: EstimatedLensPerformance | Promise<EstimatedLensPerformance>;\n    logger: \"noop\" | \"console\";\n    logLevel: LogLevelName;\n    shouldUseWorker: boolean;\n    apiHostname: CameraKitApiHostname;\n    userAgentFlavor: \"release\" | \"debug\";\n    fonts: Font[];\n    lensHttpHandler?: LensHttpHandler;\n}\n\nexport type CameraKitApiHostname = \"camera-kit-api.snapar.com\" | \"api-kit.snapchat.com\";\n\n/**\n * Represents a font to be used by Camera Kit for text rendering.\n */\nexport interface Font {\n    /**\n     * A unique name for the font.\n     */\n    name: string;\n\n    /**\n     * A buffer containing the font data (e.g., the contents of a `.ttf` file).\n     */\n    data: ArrayBuffer;\n}\n\n/**\n * Represents context for an HTTP request made by a Lens.\n *\n * This interface provides detailed information about the request, such as its identifier,\n * method, data payload, headers, and associated Lens object.\n */\nexport interface LensHttpRequest {\n    /**\n     * The URL of the HTTP request.\n     */\n    url: string;\n\n    /**\n     * A unique identifier for the HTTP request.\n     */\n    identifier: string;\n\n    /**\n     * The HTTP method of the request (e.g., GET, POST, PUT, DELETE).\n     */\n    method: string;\n\n    /**\n     * The raw data payload for the HTTP request, represented as an `ArrayBuffer`.\n     */\n    data: ArrayBuffer;\n\n    /**\n     * The headers included in the HTTP request.\n     */\n    headers: Record<string, string>;\n\n    /**\n     * The {@link Lens} that initiated this request.\n     */\n    lens: Lens;\n}\n\n/**\n * A handler function for customizing HTTP requests made by a Lens.\n *\n * This function is called whenever a Lens  makes an HTTP request.\n * It allows you to modify the request or response, integrate custom HTTP libraries,\n * add authentication, or log request details.\n *\n * @param url - The URL for the HTTP request.\n * @param init - The initial configuration for the HTTP request, following the Fetch API's `RequestInit`.\n * @param lensRequest - Additional context about the Lens-specific request.\n * @returns A Promise resolving to the HTTP response (`Response`).\n */\nexport type LensHttpHandler = (url: string, init: RequestInit, lensRequest: LensHttpRequest) => Promise<Response>;\n\n/**\n * Configuration which must be provided when calling {@link bootstrapCameraKit}. These values are used to create various\n * CameraKit components.\n *\n * @category Bootstrapping and Configuration\n */\nexport interface CameraKitBootstrapConfiguration {\n    /**\n     * Long-lived token granting your application access to CameraKit APIs. This is found in the SnapKit Dev Portal,\n     * where it's called the API Token.\n     */\n    apiToken: string;\n\n    /**\n     * Determine where to print CameraKit log messages. By default no logs will be printed.\n     *\n     * CameraKit emits log messages to help diagnose and root cause issues that may occur during the development of a\n     * host application. The printing of these can be controlled via the following\n     * options:\n     *  - `noop`: log messages are ignored.\n     *  - `console`: log messages are printed to console.\n     */\n    logger?: \"noop\" | \"console\";\n\n    /**\n     * Log only if a logged entry level is greater than or equal to this level. Here is the order of levels:\n     * error > warn > log = info > debug. Default value is \"info\".\n     */\n    logLevel?: LogLevelName;\n\n    /**\n     * Some lenses may decide to modify their behavior based on the performance of the current environment. If you are\n     * using such lenses, providing an estimation of lens performance may lead to better user experience (especially on\n     * low-performance devices).\n     *\n     * Running the {@link estimateLensPerformance} function will run benchmarks and estimate an appropriate lens\n     * performance cluster (i.e. a performance rating) based on the current environment.\n     *\n     * Lower cluster = worse expected performance capability.\n     *\n     * @example\n     * ```ts\n     * import { bootstrapCameraKit, estimateLensPerformance } from '@snap/camera-kit`\n     *\n     * const cameraKit = await bootstrapCameraKit({\n     *   apiToken: '...',\n     *   lensPerformance: estimateLensPerformance(),\n     * })\n     * ```\n     */\n    lensPerformance?: EstimatedLensPerformance | Promise<EstimatedLensPerformance>;\n\n    /**\n     * In recommended production deployments, the WebAssembly assets required by CameraKit will be downloaded from an\n     * optimized CDN. But sometimes (e.g. during development or within a CI pipeline), it may be necessary to download\n     * these assets from somewhere else.\n     *\n     * This configuration option allows the application to specify URLs to be used for both the WebAssembly and JS glue\n     * file that are used to run and interact with CameraKit's rendering engine.\n     */\n    lensCoreOverrideUrls?: { wasm: string; js: string };\n\n    /**\n     * In recommended production deployments, the WebAssembly assets required by CameraKit will be downloaded from an\n     * optimized CDN. But sometimes during development or within a CI pipeline, it may be necessary to download these\n     * assets from somewhere else. With a provided `wasmEndpointOverride`, asset URLs will be automatically generated\n     * based on this root endpoint.\n     */\n    wasmEndpointOverride?: string;\n\n    /**\n     * Applications may optionally provide a unique identifier called analyticsId. This ID would enable Camera Kit to\n     * improve data reporting and accuracy and to better support potential needs related to an application's lens and\n     * user analytics.\n     */\n    analyticsId?: string;\n\n    /**\n     * An array of fonts to be used by Camera Kit for text rendering.\n     *\n     * Lenses usually have their own font assets, but emojis are often not embedded.\n     * As a result, you may need to provide additional fonts (e.g., an emoji font) to ensure all glyphs render\n     * correctly.\n     *\n     * @example\n     * fonts: [\n     *   {\n     *     name: 'EmojiFont',\n     *     data: emojiFontArrayBuffer, // Your emoji font data goes here\n     *   },\n     * ]\n     */\n    fonts?: Font[];\n\n    /**\n     * An optional custom HTTP handler for requests made by a Lens.\n     *\n     * This handler allows you to intercept and customize the behavior of HTTP requests,\n     * such as adding authentication headers, logging request details, or replacing the default\n     * HTTP library used by the Lens system.\n     *\n     * If not specified, the Lens system will use a default HTTP implementation.\n     *\n     * @example\n     * Here is an example of how to configure a custom `LensHttpHandler` to add an authentication token:\n     *\n     * ```typescript\n     * const customLensHttpHandler: LensHttpHandler = async (url, init, lensRequest) => {\n     *   // Add an authentication token to the headers\n     *   const sessionToken = await getAuthToken();\n     *   const updatedInit = {\n     *     ...init,\n     *     headers: {\n     *       ...init.headers,\n     *       'Authorization': `Bearer ${sessionToken}`,\n     *     },\n     *   };\n     *\n     *   // Log the request details for debugging\n     *   console.log(`Requesting ${lensRequest.url} from lens: ${lensRequest.lens.name}`);\n     *\n     *   // Use fetch to perform the HTTP request\n     *   return fetch(url, updatedInit);\n     * };\n     *\n     * const cameraKit = bootstrapCameraKit({\n     *   apiToken,\n     *   lensHttpHandler: customLensHttpHandler,\n     * });\n     * ```\n     */\n    lensHttpHandler?: LensHttpHandler;\n}\n\n/**\n * This type represents the result of merging user-supplied config with default config -- as such, it has no nullable\n * fields, making it a more convenient type for other components to use.\n *\n * @internal\n */\nexport type CameraKitConfiguration = CameraKitRuntimeConfiguration & CameraKitBootstrapConfiguration;\n\n/** @internal */\nexport const configurationToken = \"configuration\";\n\n/**\n * Returns true if given browser is iPhone, iPad or iPod.\n */\nfunction isHandledAppleDevice() {\n    // We use the same approach LC uses:\n    // eslint-disable-next-line max-len\n    // https://github.sc-corp.net/Snapchat/LensCore/blob/285ac47cad7fe5268f38d1bab82d51b7b19d6b48/Src/PlatformSpecific/WebAssembly/WebEnvironmentInfo.cpp#L81\n    return (\n        /iPad|iPhone|iPod/.test(navigator.platform) ||\n        (navigator.platform === \"MacIntel\" && navigator.maxTouchPoints > 2)\n    );\n}\n\n/** @internal */\nexport const createCameraKitConfigurationFactory = (configuration: CameraKitBootstrapConfiguration) => {\n    // always leave debug mode warning about overrides in console\n    const overrides = getConfigurationOverrides();\n    if (overrides) {\n        console.warn(\"Configuration overrides applied\", overrides);\n    }\n    return Injectable(configurationToken, (): CameraKitConfiguration => {\n        // We'll ensure that we handle errors on any Promises passed as config values, otherwise we either must\n        // handle them separately wherever they're used, or rejections would go unhandled.\n        const safeConfig: CameraKitBootstrapConfiguration = {\n            ...configuration,\n            lensPerformance:\n                configuration.lensPerformance instanceof Promise\n                    ? // Safety: defaultConfiguration.lensPerformance is defined (it's hardcoded above).\n                      configuration.lensPerformance.catch(() => defaultConfiguration.lensPerformance!)\n                    : configuration.lensPerformance,\n        };\n        return {\n            ...defaultConfiguration,\n            // TODO: Safari 17 has an issue with offscreen canvas which results in stuttering effect on iOS.\n            // Once Safari has that fixed, we should remove this check, see https://jira.sc-corp.net/browse/CAMKIT-5985\n            shouldUseWorker: isHandledAppleDevice() ? false : defaultConfiguration.shouldUseWorker,\n            ...copyDefinedProperties(safeConfig),\n            ...copyDefinedProperties(overrides ?? {}),\n        };\n    });\n};\n"]}
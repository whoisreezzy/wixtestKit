{"version":3,"file":"imagePicker.js","sourceRoot":"","sources":["../../src/lens-client-interface/imagePicker.ts"],"names":[],"mappings":"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","sourcesContent":["import type { FileWithHandle } from \"browser-fs-access\";\nimport { fileOpen } from \"browser-fs-access\";\nimport { getLogger } from \"../logger/logger\";\nimport type { ClientInterfaceData } from \"../lens-core-module/generated-types\";\nimport type { LensCore } from \"../lens-core-module/lensCore\";\nimport { extractJpegOrientationTag, Orientation } from \"./exif\";\nimport type { FilePicker } from \"./filePicker\";\n\nconst logger = getLogger(\"lensClientInterfaceImagePicker\");\n\n// Common MIME types supported by all browsers as per:\n// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\nconst mimeTypes = {\n    image: [\n        \"image/avif\",\n        \"image/bmp\",\n        \"image/gif\",\n        \"image/jpeg\",\n        \"image/png\",\n        \"image/svg+xml\",\n        \"image/tiff\",\n        \"image/webp\",\n    ],\n    video: [\n        \"video/3gpp\",\n        \"video/3gpp2\",\n        \"video/mp2t\",\n        \"video/mp4\",\n        \"video/mpeg\",\n        \"video/ogg\",\n        \"video/quicktime\",\n        \"video/webm\",\n        \"video/x-msvideo\",\n    ],\n} as const;\n\nfunction* enumerateSupportedVideoTypes(types: typeof mimeTypes.video) {\n    // test video element to perform MIME types support check\n    const testVideoElement = typeof document !== \"undefined\" ? document.createElement(\"video\") : undefined;\n    for (const type of types) {\n        if (testVideoElement?.canPlayType(type) || false) {\n            yield type;\n        }\n    }\n}\n\nfunction readFileAsArrayBuffer(file: FileWithHandle): Promise<ArrayBuffer> {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.addEventListener(\"load\", (event) => {\n            // Safety: target.result is always an ArrayBuffer because we read file using readAsArrayBuffer()\n            resolve(event.target!.result as ArrayBuffer);\n        });\n        reader.addEventListener(\"error\", (event) => {\n            reject(event.target!.error);\n        });\n        reader.readAsArrayBuffer(file);\n    });\n}\n\nfunction getMimeType({ ImageEnabled, VideoEnabled }: ClientInterfaceData) {\n    const types = [];\n    if (ImageEnabled === \"1\") types.push(...mimeTypes.image);\n    if (VideoEnabled === \"1\") types.push(...enumerateSupportedVideoTypes(mimeTypes.video));\n    if (types.length === 0) {\n        throw new Error(\"Unknown media type requested.\");\n    }\n    return types;\n}\n\nfunction getOrientation(data: ArrayBuffer, lensCore: LensCore) {\n    const orientationMap = {\n        [Orientation.TopLeft]: lensCore.ExternalMediaOrientation.CW0,\n        [Orientation.TopRight]: lensCore.ExternalMediaOrientation.CW0,\n        [Orientation.BottomRight]: lensCore.ExternalMediaOrientation.CW180,\n        [Orientation.BottomLeft]: lensCore.ExternalMediaOrientation.CW180,\n        [Orientation.LeftTop]: lensCore.ExternalMediaOrientation.CW90,\n        [Orientation.RightTop]: lensCore.ExternalMediaOrientation.CW90,\n        [Orientation.RightBottom]: lensCore.ExternalMediaOrientation.CW270,\n        [Orientation.LeftBottom]: lensCore.ExternalMediaOrientation.CW270,\n    };\n    try {\n        return orientationMap[extractJpegOrientationTag(data) ?? Orientation.TopLeft];\n    } catch (error) {\n        logger.info(\"Error occurred while reading EXIF orientation tag.\", error);\n        return lensCore.ExternalMediaOrientation.CW0;\n    }\n}\n\n/**\n * Shows file open dialog to allow user to select image/video and provides the selection to LensCore.\n *\n * @internal\n */\nexport async function pickClientImage(\n    clientInterfaceData: ClientInterfaceData,\n    lensCore: LensCore,\n    filePicker: FilePicker\n) {\n    const mimeTypes = getMimeType(clientInterfaceData);\n    logger.debug(`Opening file dialog for MIME types: ${mimeTypes}`);\n\n    const file = await filePicker({ mimeTypes }, fileOpen);\n    if (Array.isArray(file)) {\n        throw new Error(\"Multiple files are not supported.\");\n    }\n    logger.debug(`Selected file MIME type: ${file.type}`);\n\n    const data = await readFileAsArrayBuffer(file);\n    if (file.type.startsWith(\"image/\")) {\n        lensCore.provideExternalImage({\n            data,\n            orientation: getOrientation(data, lensCore),\n            // As per Corvyn: both iOS and Android clients have the ability to pick out individual faces\n            // from an image to apply the effect on, using each of their native face detectors (not using LensCore).\n            // That's what the faceRects is for. For now, we can just apply the effect to the whole image (so face rect\n            // [[0,0][1,1]]). In future, in order to be able to pick out individual faces in the media picker, we could:\n            // - hook up some external web face tracking library\n            // - make LensCore to expose face tracker to external clients\n            faceRects: [\n                {\n                    origin: {\n                        x: 0,\n                        y: 0,\n                    },\n                    size: {\n                        width: 1,\n                        height: 1,\n                    },\n                },\n            ],\n        });\n    } else {\n        lensCore.provideExternalVideo({\n            data,\n            orientation: lensCore.ExternalMediaOrientation.CW0,\n        });\n    }\n}\n"]}
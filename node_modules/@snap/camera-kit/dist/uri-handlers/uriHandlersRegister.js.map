{"version":3,"file":"uriHandlersRegister.js","sourceRoot":"","sources":["../../src/uri-handlers/uriHandlersRegister.ts"],"names":[],"mappings":"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","sourcesContent":["import { isState } from \"@snap/state-management\";\nimport { Injectable } from \"@snap/ts-inject\";\nimport type { MetricsClient } from \"../clients/metricsClient\";\nimport { metricsClientFactory } from \"../clients/metricsClient\";\nimport type { LensKeyboard } from \"../session/LensKeyboard\";\nimport { lensKeyboardFactory } from \"../session/LensKeyboard\";\nimport type { LensState } from \"../session/lensState\";\nimport { lensStateFactory } from \"../session/lensState\";\nimport type { LensRepository } from \"../lens/LensRepository\";\nimport { lensRepositoryFactory } from \"../lens/LensRepository\";\nimport type { SessionState } from \"../session/sessionState\";\nimport { sessionStateFactory } from \"../session/sessionState\";\nimport { getLogger } from \"../logger/logger\";\nimport { lensCoreFactory } from \"../lens-core-module/loader/lensCoreFactory\";\nimport type { LensCore } from \"../lens-core-module/lensCore\";\nimport type { CameraKitConfiguration } from \"../configuration\";\nimport { configurationToken } from \"../configuration\";\nimport type { RemoteApiSpecsClient } from \"../clients/remoteApiSpecsClient\";\nimport { remoteApiSpecsClientFactory } from \"../clients/remoteApiSpecsClient\";\nimport { createHttpUriHandler } from \"./internal-handlers/httpUriHandler\";\nimport type { UriHandlers, UriResponse } from \"./UriHandlers\";\nimport { extractSchemeAndRoute, isUriHandlers, isUriResponse, uriHandlersFactory } from \"./UriHandlers\";\nimport type { RemoteApiServices } from \"./internal-handlers/remoteApiUriHandler\";\nimport { createRemoteApiUriHandler, remoteApiServicesFactory } from \"./internal-handlers/remoteApiUriHandler\";\n\nconst logger = getLogger(\"uriHandlersRegister\");\n\n/**\n * Registers URI handlers within LensCore.\n * @internal\n */\nexport const registerUriHandlers = Injectable(\n    \"registerUriHandlers\",\n    [\n        configurationToken,\n        lensCoreFactory.token,\n        lensStateFactory.token,\n        uriHandlersFactory.token,\n        lensKeyboardFactory.token,\n        remoteApiServicesFactory.token,\n        lensRepositoryFactory.token,\n        sessionStateFactory.token,\n        metricsClientFactory.token,\n        remoteApiSpecsClientFactory.token,\n    ] as const,\n    (\n        configuration: CameraKitConfiguration,\n        lensCore: LensCore,\n        lensState: LensState,\n        userHandlers: UriHandlers,\n        lensKeyboard: LensKeyboard,\n        remoteApiServices: RemoteApiServices,\n        lensRepository: LensRepository,\n        sessionState: SessionState,\n        metrics: MetricsClient,\n        remoteApiSpecsClient: RemoteApiSpecsClient\n    ): void => {\n        if (!isUriHandlers(userHandlers)) {\n            throw new Error(\"Expected an array of UriHandler objects\");\n        }\n\n        // Users can provide custom UriHandlers using the `uriHandlersFactory.token`.\n        // However, we need to include some internally-defined handlers (e.g., Lens Keyboard and Remote API)\n        // before registering the handlers with LensCore.\n        // Note: The internal HTTP handler can be overridden if the user prefers to disable validation, for instance.\n        const allHandlers = [\n            createHttpUriHandler(lensState, sessionState, remoteApiSpecsClient, configuration.lensHttpHandler),\n            ...userHandlers,\n            lensKeyboard.uriHandler,\n            createRemoteApiUriHandler(remoteApiServices, sessionState, lensState, lensRepository, metrics),\n        ];\n\n        for (const { uri, handleRequest, cancelRequest } of allHandlers) {\n            const uris = Array.isArray(uri) ? uri : [uri];\n            for (const { scheme, route } of uris.map(extractSchemeAndRoute)) {\n                lensCore.registerUriListener(scheme, route, {\n                    handleRequest: (request) => {\n                        const reply = (response: UriResponse) => {\n                            if (!isUriResponse(response)) {\n                                throw new Error(\"Expected UriResponse object\");\n                            }\n                            lensCore.provideUriResponse(request.identifier, response);\n                        };\n\n                        // Since lenses are the only things that make URI requests, we expect to always be in the\n                        // \"lensApplied\" state â€“ we'll sanity check, though, and log a warning if we're not.\n                        const state = lensState.getState();\n                        if (isState(state, \"noLensApplied\")) {\n                            logger.warn(\n                                `Got a URI request for ${request.uri}, but there is no active lens. The ` +\n                                    `request will not be processed.`\n                            );\n                            return;\n                        }\n\n                        // NOTE: we do not handle any error thrown on an extension side when handleRequest() is called.\n                        // That responsibility is delegated to the extension by design and that is exactly what Android\n                        // and iOS SDKs do.\n                        handleRequest(request, reply, state.data);\n                    },\n                    cancelRequest: (request) => {\n                        if (cancelRequest) {\n                            const state = lensState.getState();\n                            if (isState(state, \"noLensApplied\")) {\n                                logger.warn(\n                                    `Got a URI cancel request for ${request.uri}, but there is no active ` +\n                                        `lens. The cancel request will not be processed.`\n                                );\n                                return;\n                            }\n                            cancelRequest(request, state.data);\n                        }\n                    },\n                });\n            }\n        }\n    }\n);\n"]}
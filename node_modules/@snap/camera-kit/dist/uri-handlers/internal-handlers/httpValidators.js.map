{"version":3,"file":"httpValidators.js","sourceRoot":"","sources":["../../../src/uri-handlers/internal-handlers/httpValidators.ts"],"names":[],"mappings":"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","sourcesContent":["import { isEmptyString } from \"../../common/typeguards\";\nimport type { RemoteApiSpec, RemoteParameter } from \"../../generated-proto/pb_schema/camera_kit/v3/remote_api_spec\";\nimport { RemoteEndpoint_HttpRequestMethod } from \"../../generated-proto/pb_schema/camera_kit/v3/remote_api_spec\";\nimport { RemoteParameter_ParameterLocation } from \"../../generated-proto/pb_schema/camera_kit/v3/remote_api_spec\";\nimport { namedError } from \"../../namedErrors\";\nimport type { UriRequest } from \"../UriHandlers\";\n\nexport const requestValidationErrorName = \"RequestValidationError\";\nexport const requestValidationError = namedError(requestValidationErrorName);\n\nexport function validateRequest(request: UriRequest, specs: RemoteApiSpec[]) {\n    const url = new URL(request.uri);\n\n    // 1. Given url, method and headers and spec:\n    for (const spec of specs) {\n        // 2. Check protocol and host.\n        if (url.host !== spec.host || url.protocol !== (spec.tlsRequired ? \"https:\" : \"http:\")) {\n            continue;\n        }\n\n        // 3. Go for each part together with the path parameters.\n        const path = url.pathname.replace(/^\\/|\\/$/g, \"\");\n        for (const endpoint of spec.endpoints) {\n            const endpointPath = endpoint.path.replace(/^\\/|\\/$/g, \"\");\n            if (!path.startsWith(endpointPath)) continue;\n\n            const method =\n                RemoteEndpoint_HttpRequestMethod[request.method] ?? RemoteEndpoint_HttpRequestMethod.UNRECOGNIZED;\n            if (!endpoint.methods.includes(method)) continue;\n\n            validatePath(path.split(endpointPath)[1], endpoint.parameters);\n            validateHeaders(request.metadata, endpoint.parameters);\n            validateQuery(url.searchParams, endpoint.parameters);\n            // The request matches the current endpoint\n            return;\n        }\n    }\n\n    // The request does not match any of the endpoints\n    throw requestValidationError(\"The request does not match any of the Remote API specifications.\");\n}\n\nexport function validatePath(path: string, parameters: RemoteParameter[]) {\n    const pathComponents = path.split(\"/\").filter(Boolean);\n\n    let paramIndex = 0;\n\n    for (const param of parameters) {\n        if (param.location !== RemoteParameter_ParameterLocation.PATH) continue;\n\n        const paramNameComponent = pathComponents[paramIndex];\n        const paramValueComponent = pathComponents[paramIndex + 1];\n\n        if (param.constant) {\n            // For constant parameters, the value must match the defaultValue\n            if (paramNameComponent === param.name && paramValueComponent === param.defaultValue) {\n                paramIndex += 2; // Move to the next parameter pair\n            } else {\n                throw requestValidationError(\n                    `Expected constant parameter '${param.name}' with value '${param.defaultValue}' ` +\n                        `at position ${paramIndex}, but found '${paramNameComponent}' and '${paramValueComponent}'.`\n                );\n            }\n        } else if (param.optional) {\n            if (paramNameComponent === param.name) {\n                // Check if there's another component for its value\n                if (paramValueComponent !== undefined) {\n                    // Optional param with a value\n                    paramIndex += 2;\n                } else {\n                    // Optional param without a value\n                    paramIndex += 1;\n                }\n            }\n            // If optional and not present, continue without incrementing paramIndex\n        } else {\n            // For regular parameters, we just need to ensure a name/value pair exists\n            if (paramNameComponent === param.name && paramValueComponent !== undefined) {\n                paramIndex += 2; // Move to the next parameter pair\n            } else {\n                throw requestValidationError(\n                    `Expected parameter '${param.name}' with a value at position ${paramIndex}, ` +\n                        `but found '${paramNameComponent}' and '${paramValueComponent}'.`\n                );\n            }\n        }\n    }\n\n    // After processing all parameters, there should be no extra path components\n    if (paramIndex !== pathComponents.length) {\n        const invalidPath = pathComponents.slice(paramIndex).join(\"/\");\n        throw requestValidationError(\n            `Unexpected extra path components starting at position ${paramIndex}: '${invalidPath}'.`\n        );\n    }\n}\n\nexport function validateHeaders(headers: Record<string, string>, parameters: RemoteParameter[]) {\n    for (const param of parameters) {\n        if (param.location !== RemoteParameter_ParameterLocation.HEADER) continue;\n\n        const headerValue = headers[param.name];\n\n        if (param.constant) {\n            // For constant parameters, the header must exist and match defaultValue\n            if (headerValue !== param.defaultValue) {\n                throw requestValidationError(\n                    `Expected constant header '${param.name}' with value '${param.defaultValue}', ` +\n                        `but found '${headerValue ?? \"undefined\"}'.`\n                );\n            }\n        } else if (param.optional) {\n            // If optional, missing or present value is OK\n        } else {\n            // For required parameters, the header must exist and have a non-empty value\n            if (headerValue == undefined || isEmptyString(headerValue)) {\n                throw requestValidationError(`Required header '${param.name}' is missing or empty.`);\n            }\n        }\n    }\n}\n\nexport function validateQuery(queryParams: URLSearchParams, parameters: RemoteParameter[]) {\n    for (const param of parameters) {\n        if (param.location !== RemoteParameter_ParameterLocation.QUERY) continue;\n\n        const paramValue = queryParams.get(param.name);\n\n        if (param.constant) {\n            // For constant parameters, the query parameter must exist and match defaultValue\n            if (paramValue !== param.defaultValue) {\n                throw requestValidationError(\n                    `Expected constant query parameter '${param.name}' with value '${param.defaultValue}', ` +\n                        `but found '${paramValue ?? \"undefined\"}'.`\n                );\n            }\n        } else if (param.optional) {\n            // If optional, missing or present value is OK\n        } else {\n            // For required parameters, the query parameter must exist and have a non-empty value\n            if (paramValue == undefined || isEmptyString(paramValue)) {\n                throw requestValidationError(`Required query parameter '${param.name}' is missing or empty.`);\n            }\n        }\n    }\n    // All query parameters are valid\n}\n"]}
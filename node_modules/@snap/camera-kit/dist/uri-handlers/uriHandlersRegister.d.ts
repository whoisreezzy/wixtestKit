import type { MetricsClient } from "../clients/metricsClient";
import type { LensKeyboard } from "../session/LensKeyboard";
import type { LensRepository } from "../lens/LensRepository";
import type { LensCore } from "../lens-core-module/lensCore";
import type { CameraKitConfiguration } from "../configuration";
import type { RemoteApiSpecsClient } from "../clients/remoteApiSpecsClient";
import type { UriHandlers } from "./UriHandlers";
import type { RemoteApiServices } from "./internal-handlers/remoteApiUriHandler";
/**
 * Registers URI handlers within LensCore.
 * @internal
 */
export declare const registerUriHandlers: {
    (args_0: CameraKitConfiguration, args_1: LensCore, args_2: import("@snap/state-management").StateMachine<import("@snap/state-management").Action<"applyLens", {
        lens: import("..").Lens;
        launchData?: import("..").LensLaunchData | undefined;
    }> | import("@snap/state-management").Action<"downloadComplete", import("..").Lens> | import("@snap/state-management").Action<"turnedOn", import("..").Lens> | import("@snap/state-management").Action<"resourcesLoaded", import("..").Lens> | import("@snap/state-management").Action<"firstFrameProcessed", import("..").Lens> | import("@snap/state-management").Action<"applyLensComplete", import("..").Lens> | import("@snap/state-management").Action<"applyLensFailed", {
        error: import("../session/lensState").LensErrors;
        lens: import("..").Lens;
    }> | import("@snap/state-management").Action<"applyLensAborted", import("..").Lens> | import("@snap/state-management").Action<"removeLens", undefined> | import("@snap/state-management").Action<"turnedOff", import("..").Lens> | import("@snap/state-management").Action<"removeLensComplete", undefined> | import("@snap/state-management").Action<"removeLensFailed", Error>, import("@snap/state-management").State<"noLensApplied", undefined> | import("@snap/state-management").State<"applyingLens", import("..").Lens> | import("@snap/state-management").State<"lensApplied", import("..").Lens>>, args_3: UriHandlers, args_4: LensKeyboard, args_5: RemoteApiServices, args_6: LensRepository, args_7: import("@snap/state-management").StateMachine<import("@snap/state-management").Action<"suspend", import("../session/CameraKitSession").CameraKitSession> | import("@snap/state-management").Action<"resume", import("../session/CameraKitSession").CameraKitSession> | import("@snap/state-management").Action<"destroy", undefined>, import("@snap/state-management").State<"inactive", undefined> | import("@snap/state-management").State<"active", import("../session/CameraKitSession").CameraKitSession> | import("@snap/state-management").State<"destroyed", undefined>>, args_8: MetricsClient, args_9: RemoteApiSpecsClient): void;
    token: "registerUriHandlers";
    dependencies: readonly ["configuration", "lensCore", "lensState", "UriHandlers", "lensKeyboard", "remoteApiServices", "LensRepository", "sessionState", "metricsClient", "remoteApiSpecsClient"];
};
//# sourceMappingURL=uriHandlersRegister.d.ts.map
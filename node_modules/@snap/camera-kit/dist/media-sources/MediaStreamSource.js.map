{"version":3,"file":"MediaStreamSource.js","sourceRoot":"","sources":["../../src/media-sources/MediaStreamSource.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Observable, Subscription } from \"rxjs\";\nimport { Subject, map } from \"rxjs\";\nimport { copyDefinedProperties } from \"../common/copyDefinedProperties\";\nimport { ensureError, stringifyErrorMessage } from \"../common/errorHelpers\";\nimport type { LensCoreError } from \"../lens-core-module/lensCoreError\";\nimport { Transform2D } from \"../transforms/Transform2D\";\nimport { debounceTimeAfter } from \"../observable-operators/debounceTimeAfter\";\nimport type { CameraKitDeviceOptions } from \"./CameraKitSource\";\nimport { CameraKitSource, defaultDeviceInfo } from \"./CameraKitSource\";\n\nconst defaultOptions: MediaStreamSourceOptions = {\n    ...defaultDeviceInfo,\n    transform: Transform2D.Identity,\n    disableSourceAudio: false,\n};\n\nfunction closeWorklet(worklet: AudioWorkletNode | undefined) {\n    if (!worklet) return;\n    worklet.port.close();\n    worklet.port.onmessage = null;\n    worklet.disconnect();\n}\n\nasync function closeAudioContext(audioContext: AudioContext | undefined) {\n    if (!audioContext || audioContext.state === \"closed\") return;\n    return audioContext.close();\n}\n\nfunction handleAudioProcessingErrors(errors: Observable<LensCoreError>, reportError: (error: Error) => void) {\n    return errors\n        .pipe(\n            // Emit the first error immediately and debounce any subsequent errors for 1 second.\n            debounceTimeAfter(1, 1000),\n\n            map((event) => {\n                if (event.type === \"initial\") {\n                    reportError(\n                        new Error(\"The first audio processing error before debouncing.\", { cause: event.value })\n                    );\n                } else if (event.type === \"debounced\") {\n                    const errorMessages = [...new Set(event.values.map(stringifyErrorMessage))].join(\"\\n\");\n                    reportError(\n                        new Error(`Debounced ${event.values.length} audio processing errors.`, {\n                            cause: new Error(errorMessages),\n                        })\n                    );\n                }\n            })\n        )\n        .subscribe();\n}\n\n/**\n * Media stream source options.\n *\n * @category Rendering\n */\nexport interface MediaStreamSourceOptions extends CameraKitDeviceOptions {\n    /**\n     * Specifies the 2D transformation to apply to the Lens.\n     * By default, CameraKit applies no transformation.\n     */\n    transform: Transform2D;\n\n    /**\n     * Indicates whether the audio from the source should be disabled.\n     * By default, CameraKit passes audio to the Lens.\n     */\n    disableSourceAudio: boolean;\n}\n\n/**\n * Create a {@link CameraKitSource} from any\n * [MediaStream](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream).\n *\n * @param stream Any MediaStream, such as obtained via `canvas.captureStream()` or `mediaDevices.getUserMedia()`.\n * @param options Options.\n *\n * @category Rendering\n */\nexport function createMediaStreamSource(\n    stream: MediaStream,\n    options: Partial<MediaStreamSourceOptions> = {}\n): CameraKitSource {\n    const { facingMode } =\n        stream.getVideoTracks().length > 0 ? stream.getVideoTracks()[0].getSettings() : { facingMode: undefined };\n\n    const detectedCameraType = facingMode === \"user\" || facingMode === \"environment\" ? facingMode : undefined;\n\n    const optionsWithDefaults = {\n        ...defaultOptions,\n        ...copyDefinedProperties(options),\n        cameraType: options.cameraType ?? detectedCameraType,\n    };\n\n    const enableSourceAudio: boolean = stream.getAudioTracks().length > 0 && !optionsWithDefaults.disableSourceAudio;\n\n    const simulateStereoAudio = true;\n    const sampleRate: number = 44100;\n\n    let audioContext: AudioContext | undefined = undefined;\n    let audioSource: MediaStreamAudioSourceNode | undefined = undefined;\n    let worklet: AudioWorkletNode | undefined = undefined;\n    let microphoneRecorderUrl: string;\n\n    if (enableSourceAudio) {\n        // https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_AudioWorklet\n        const microphoneRecorderWorklet = `\n        class MicrophoneWorkletProcessor extends AudioWorkletProcessor {\n            process(inputs, outputs, parameters) {\n                this.port.postMessage({\n                    eventType: 'data',\n                    buffer: inputs\n                });\n                return true;\n            }\n        }\n        registerProcessor('microphone-worklet', MicrophoneWorkletProcessor);`;\n        const microphoneRecorderBlob = new Blob([microphoneRecorderWorklet], {\n            type: \"application/javascript\",\n        });\n        microphoneRecorderUrl = URL.createObjectURL(microphoneRecorderBlob);\n    }\n\n    // Subscription for audio processing errors.\n    let audioProcessingErrorSubscription: Subscription | undefined = undefined;\n\n    return new CameraKitSource(\n        { media: stream },\n        {\n            onAttach: async (source, lensCore, reportError) => {\n                await source.setTransform(optionsWithDefaults.transform);\n\n                if (enableSourceAudio) {\n                    // We call LensCore.processAudioSampleBuffer every time microphone data appears,\n                    // which occurs multiple times per second.\n                    // It may happen that LensCore enters an inoperable state, resulting in the call failing with\n                    // the same error over and over again.\n                    // Instead of reporting all errors, we debounce them within a second and only report two errors:\n                    // 1. The initial error when the debounce starts.\n                    // 2. An aggregated error that includes unique error messages from all errors\n                    // within the debounce period.\n                    const audioProcessingErrors = new Subject<LensCoreError>();\n                    audioProcessingErrorSubscription = handleAudioProcessingErrors(audioProcessingErrors, reportError);\n\n                    // Audio parameters set has to be called before lens is applied\n                    await lensCore.setAudioParameters({\n                        parameters: {\n                            numChannels: simulateStereoAudio ? 2 : 1,\n                            sampleRate,\n                        },\n                    });\n\n                    try {\n                        // There is a possibility of the onAttach method being called twice in a row due to a bug.\n                        // To ensure there are not leaks, it is better to close any existing connections.\n                        closeWorklet(worklet);\n                        audioSource?.disconnect();\n                        await closeAudioContext(audioContext);\n                    } catch (error) {\n                        // We still want to continue if anything above failed\n                        reportError(ensureError(error));\n                    }\n\n                    audioContext = new AudioContext();\n                    audioSource = audioContext.createMediaStreamSource(stream);\n                    const scopedAudioSource = audioSource;\n                    audioContext.audioWorklet\n                        .addModule(microphoneRecorderUrl)\n                        .then(() => {\n                            if (audioContext) {\n                                worklet = new AudioWorkletNode(audioContext, \"microphone-worklet\");\n                                scopedAudioSource.connect(worklet);\n                                worklet.connect(audioContext.destination);\n                                // NOTE: We subscribe to messages here, and they will continue to arrive\n                                // even after audioContext.close() is called. To disconnect the audio worklets\n                                // created here, we need to track two variables - worklet and audioSource.\n                                // By calling disconnect() on them, we can properly\n                                // disconnect the audio worklets.\n                                worklet.port.onmessage = (e) => {\n                                    if (e.data.eventType === \"data\") {\n                                        // developer.mozilla.org/en-US/docs/Web/API/AudioWorkletProcessor/process\n                                        // inputs[n][m] is the list of samples in the n-th input at the m-th channel.\n                                        const leftSamples = e.data.buffer[0][0] as Float32Array;\n\n                                        // Firefox might have leftSamples undefined:\n                                        // https://jira.sc-corp.net/browse/CAMKIT-5189\n                                        if (!leftSamples) return;\n\n                                        let inputBuffers = [leftSamples];\n                                        if (simulateStereoAudio) {\n                                            const rightSamples =\n                                                e.data.buffer[0].length > 1 ? e.data.buffer[0][1] : leftSamples.slice();\n                                            inputBuffers.push(rightSamples);\n                                        }\n\n                                        lensCore\n                                            .processAudioSampleBuffer({ input: inputBuffers })\n                                            .catch((error) => audioProcessingErrors.next(error));\n                                    }\n                                };\n                            }\n                        })\n                        .catch((error: Error) => {\n                            reportError(error);\n                        });\n                }\n            },\n            onDetach: async (reportError) => {\n                if (worklet) {\n                    closeWorklet(worklet);\n                    worklet = undefined;\n                }\n                if (audioSource) {\n                    audioSource.disconnect();\n                    audioSource = undefined;\n                }\n                if (audioContext) {\n                    await closeAudioContext(audioContext).catch(reportError);\n                    audioContext = undefined;\n                }\n                if (audioProcessingErrorSubscription) {\n                    audioProcessingErrorSubscription.unsubscribe();\n                    audioProcessingErrorSubscription = undefined;\n                }\n            },\n        },\n        optionsWithDefaults\n    );\n}\n"]}
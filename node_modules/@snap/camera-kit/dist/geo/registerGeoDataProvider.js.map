{"version":3,"file":"registerGeoDataProvider.js","sourceRoot":"","sources":["../../src/geo/registerGeoDataProvider.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAC7C,OAAO,EAAE,eAAe,EAAE,MAAM,4CAA4C,CAAC;AAE7E,OAAO,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAC;AAE7C,OAAO,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAC;AAC9C,OAAO,EAAE,sBAAsB,EAAE,MAAM,mBAAmB,CAAC;AAE3D,MAAM,MAAM,GAAG,SAAS,CAAC,yBAAyB,CAAC,CAAC;AAKpD,MAAM,CAAC,MAAM,uBAAuB,GAAG,UAAU,CAC7C,yBAAyB,EACzB,CAAC,eAAe,CAAC,KAAK,EAAE,sBAAsB,CAAC,KAAK,CAAC,EACrD,CAAC,QAAkB,EAAE,UAA2B,EAAE,EAAE;IAChD,IAAI,CAAC,QAAQ,CAAC,kBAAkB,EAAE;QAE9B,MAAM,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;QAClD,OAAO;KACV;IAED,QAAQ,CAAC,kBAAkB,CAAC,GAAG,EAAE;QAC7B,MAAM,OAAO,GAAG,UAAU,EAAE,CAAC;QAG7B,IAAI,OAAO,EAAE;YACT,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;gBACrB,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;aAC/C;YACD,QAAQ,CAAC,cAAc,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;SACxC;IACL,CAAC,CAAC,CAAC;AACP,CAAC,CACJ,CAAC","sourcesContent":["import { Injectable } from \"@snap/ts-inject\";\nimport { lensCoreFactory } from \"../lens-core-module/loader/lensCoreFactory\";\nimport type { LensCore } from \"../lens-core-module/lensCore\";\nimport { getLogger } from \"../logger/logger\";\nimport type { GeoDataProvider } from \"./geoDataProvider\";\nimport { isGeoData } from \"./geoDataProvider\";\nimport { geoDataProviderFactory } from \"./geoDataProvider\";\n\nconst logger = getLogger(\"registerGeoDataProvider\");\n\n/**\n * @internal\n */\nexport const registerGeoDataProvider = Injectable(\n    \"registerGeoDataProvider\",\n    [lensCoreFactory.token, geoDataProviderFactory.token],\n    (lensCore: LensCore, getGeoData: GeoDataProvider) => {\n        if (!lensCore.setGeoDataProvider) {\n            // NOTE: setGeoDataProvider was added in LensCore@297. This check ensures compatibility with older versions.\n            logger.warn(\"setGeoDataProvider is not defined.\");\n            return;\n        }\n\n        lensCore.setGeoDataProvider(() => {\n            const geoData = getGeoData();\n            // We allow geo data providers to return undefined\n            // in this case we do nothing\n            if (geoData) {\n                if (!isGeoData(geoData)) {\n                    throw new Error(\"Expected GeoData object.\");\n                }\n                lensCore.provideGeoData({ geoData });\n            }\n        });\n    }\n);\n"]}
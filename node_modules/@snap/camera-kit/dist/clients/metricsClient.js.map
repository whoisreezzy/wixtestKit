{"version":3,"file":"metricsClient.js","sourceRoot":"","sources":["../../src/clients/metricsClient.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AACvC,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAE7C,OAAO,EAAE,qBAAqB,EAAE,MAAM,0BAA0B,CAAC;AAEjE,OAAO,EAAE,gBAAgB,EAAE,MAAM,6CAA6C,CAAC;AAM/E,OAAO,EAAE,iBAAiB,EAAE,MAAM,oDAAoD,CAAC;AAEvF,OAAO,EAAE,mBAAmB,EAAE,MAAM,iCAAiC,CAAC;AACtE,OAAO,EAAE,qBAAqB,EAAE,MAAM,6BAA6B,CAAC;AACpE,OAAO,EAAE,oBAAoB,EAAE,MAAM,4BAA4B,CAAC;AAClE,OAAO,EAAE,yBAAyB,EAAE,MAAM,iCAAiC,CAAC;AAC5E,OAAO,EAAE,aAAa,EAAE,MAAM,8BAA8B,CAAC;AAG7D,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAE5D,OAAO,EAAE,kBAAkB,EAAE,MAAM,eAAe,CAAC;AAGnD,MAAM,4BAA4B,GAAG,IAAI,CAAC;AAQ1C,MAAM,6BAA6B,GAAG,EAAE,CAAC;AACzC,MAAM,+BAA+B,GAAG,IAAI,CAAC;AAK7C,MAAM,qBAAqB,GAAG,GAAG,CAAC;AAClC,MAAM,uBAAuB,GAAG,IAAI,CAAC;AAErC,MAAM,OAAO,aAAa;IAItB,YACqB,UAA0D,EAC3E,cAAsC;QADrB,eAAU,GAAV,UAAU,CAAgD;QAI3E,MAAM,mBAAmB,GAAG,yBAAyB,CACjD,4BAA4B,EAC5B,cAAc,CACjB,CAAC;QAMF,IAAI,CAAC,qBAAqB,GAAG,IAAI,mBAAmB,CAAC,CAAO,OAAiC,EAAE,EAAE;YAC7F,MAAM,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QACrD,CAAC,CAAA,CAAC;aACG,GAAG,CAAC,mBAAmB,CAAC;aACxB,GAAG,CACA,oBAAoB,CAAC,CAAC,YAA2B,EAAE,EAAE;YACjD,MAAM,KAAK,GAAqB,gBAAgB,CAAC,WAAW,CAAC,EAAE,YAAY,EAAE,CAAC,CAAC;YAC/E,MAAM,OAAO,GAA6B;gBACtC,WAAW,EAAE;oBACT,OAAO,EAAE,kDAAkD;oBAC3D,KAAK,EAAE,gBAAgB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE;iBACjD;aACJ,CAAC;YACF,OAAO,OAAO,CAAC;QACnB,CAAC,EAAE,cAAc,CAAC,CACrB;aACA,GAAG,CACA,qBAAqB,CAAC;YAClB,WAAW,EAAE,CAAC,QAAmC,EAAE,KAAkB,EAAE,EAAE;gBACrE,MAAM,KAAK,GAAG,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,EAAE,CAAC;gBAC7B,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAClB,OAAO,KAAK,CAAC;YACjB,CAAC;YACD,eAAe,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,MAAM,IAAI,6BAA6B;YACzE,WAAW,EAAE,+BAA+B;YAC5C,cAAc;SACjB,CAAC,CACL,CAAC,OAAO,CAAC;QAId,IAAI,CAAC,yBAAyB,GAAG,IAAI,mBAAmB,CAAC,CAAO,OAAiC,EAAE,EAAE;YACjG,MAAM,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;QAC7D,CAAC,CAAA,CAAC;aACG,GAAG,CAAC,mBAAmB,CAAC;aACxB,GAAG,CACA,qBAAqB,CAAC;YAIlB,WAAW,EAAE,CAAC,QAA8C,EAAE,MAAyB,EAAE,EAAE;;gBACvF,MAAM,KAAK,GAA6B,EAAE,OAAO,EAAE,MAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,OAAO,mCAAI,EAAE,EAAE,CAAC;gBAI7E,IAAI,aAAa,CAAC,MAAM,CAAC,EAAE;oBACvB,MAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;wBACxC,OAAO,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,CAAC;oBACtD,CAAC,CAAC,CAAC;oBACH,IAAI,UAAU,IAAI,aAAa,CAAC,UAAU,CAAC,EAAE;wBACzC,UAAU,CAAC,MAAM,CAAC,KAAK,GAAG,GACtB,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAChE,EAAE,CAAC;wBACH,OAAO,KAAK,CAAC;qBAChB;iBACJ;gBAGD,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC3B,OAAO,KAAK,CAAC;YACjB,CAAC;YACD,eAAe,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,IAAI,qBAAqB;YAC3E,WAAW,EAAE,uBAAuB;YACpC,cAAc;SACjB,CAAC,CACL,CAAC,OAAO,CAAC;IAClB,CAAC;IAEK,iBAAiB,CAAC,KAAkB;;YACtC,MAAM,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;QAC5C,CAAC;KAAA;IAEK,qBAAqB,CAAC,MAAc;;YACtC,MAAM,OAAO,CAAC,GAAG,CACb,MAAM,CAAC,mBAAmB,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;gBACxC,OAAO,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC;YAClD,CAAC,CAAC,CACL,CAAC;QACN,CAAC;KAAA;CACJ;AAED,MAAM,oBAAoB,GAAG,YAAY,CAAC;AAG1C,MAAM,CAAC,MAAM,6BAA6B,GAAG,UAAU,CAAC,wBAAwB,EAAE,GAAG,EAAE,CAAC,IAAI,OAAO,EAAU,CAAC,CAAC;AAE/G,MAAM,CAAC,MAAM,oBAAoB,GAAG,UAAU,CAC1C,eAAe,EACf,CAAC,6BAA6B,CAAC,KAAK,EAAE,kBAAkB,CAAC,KAAK,EAAE,qBAAqB,CAAC,KAAK,CAAU,EACrG,CAAC,6BAA8C,EAAE,WAAwB,EAAE,cAA8B,EAAE,EAAE;IACzG,MAAM,OAAO,GAAG,IAAI,aAAa,CAAC,mBAAmB,CAAC,iBAAiB,EAAE,WAAW,CAAC,EAAE,cAAc,CAAC,CAAC;IACvG,6BAA6B,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QACrG,IAAI,EAAE,CAAC,MAAM,EAAE,EAAE;YACb,OAAO,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;QAC1C,CAAC;KACJ,CAAC,CAAC;IACH,OAAO,OAAO,CAAC;AACnB,CAAC,CACJ,CAAC","sourcesContent":["import { Subject, filter } from \"rxjs\";\nimport { Injectable } from \"@snap/ts-inject\";\nimport type { PageVisibility } from \"../common/pageVisibility\";\nimport { pageVisibilityFactory } from \"../common/pageVisibility\";\nimport type { ServerEvent } from \"../generated-proto/blizzard/cameraKitEvents\";\nimport { ServerEventBatch } from \"../generated-proto/blizzard/cameraKitEvents\";\nimport type {\n    OperationalMetric,\n    OperationalMetricsBundle,\n} from \"../generated-proto/pb_schema/camera_kit/v3/operational_metrics\";\nimport type { SetBusinessEventsRequest } from \"../generated-proto/pb_schema/camera_kit/v3/service\";\nimport { MetricsDefinition } from \"../generated-proto/pb_schema/camera_kit/v3/service\";\nimport type { Handler, RequestMetadata } from \"../handlers/HandlerChainBuilder\";\nimport { HandlerChainBuilder } from \"../handlers/HandlerChainBuilder\";\nimport { createBatchingHandler } from \"../handlers/batchingHandler\";\nimport { createMappingHandler } from \"../handlers/mappingHandler\";\nimport { createRateLimitingHandler } from \"../handlers/rateLimitingHandler\";\nimport { isCountMetric } from \"../metrics/operational/Count\";\nimport type { Metric } from \"../metrics/operational/Metric\";\nimport type { TsProtoServiceClient } from \"./createTsProtoClient\";\nimport { createTsProtoClient } from \"./createTsProtoClient\";\nimport type { GrpcHandler } from \"./grpcHandler\";\nimport { grpcHandlerFactory } from \"./grpcHandler\";\n\n// Send at most one metric (operational or business) per second.\nconst METRIC_REQUEST_RATE_LIMIT_MS = 1000;\n\n// It is rather cumbersome to check the actual final size of a batch, but we can easily limit the number of events we\n// include in each batch -- looking at historical data, typical events average ~1.3kb per event. But there are some\n// events (like CAMERA_KIT_EXCEPTION, which includes a stack trace) that can be much larger.\n//\n// To prevent us running over the 64kibibyte limit imposed by browsers on `keep-alive` requests, we'll set quite a low\n// limit to ensure we don't lose events which are larger in size than we expect.\nconst BUSINESS_EVENT_BATCH_MAX_SIZE = 10;\nconst BUSINESS_EVENT_BATCH_MAX_AGE_MS = 5000;\n\n// These values are (currently) arbitrarily selected.\n// TODO: Once we have gathered a sufficient quantity of metrics data, we should tune these numbers to ensure we're\n// operating with the right cost vs. alarming SLA vs. IDB storage size tradeoffs.\nconst METRIC_BATCH_MAX_SIZE = 100;\nconst METRIC_BATCH_MAX_AGE_MS = 5000;\n\nexport class MetricsClient {\n    private readonly businessEventsHandler: Handler<ServerEvent, void, RequestInit | undefined>;\n    private readonly operationalMetricsHandler: Handler<OperationalMetric, void, RequestInit | undefined>;\n\n    constructor(\n        private readonly grpcClient: TsProtoServiceClient<typeof MetricsDefinition>,\n        pageVisibility: PageVisibility | false\n    ) {\n        // Both business events and operational metrics will share a rate limit.\n        const rateLimitingHandler = createRateLimitingHandler<any, any, RequestMetadata>(\n            METRIC_REQUEST_RATE_LIMIT_MS,\n            pageVisibility\n        );\n\n        // The business events handler has to do some manual encoding, because the CameraKit service's backend expects\n        // an `Any` type inside of SetBusinessEventsRequest -- even though this `Any` type is always `ServerEventBatch`.\n        // eslint-disable-next-line max-len\n        // See: https://github.sc-corp.net/Snapchat/pb_schema/blob/4bc5ec98243c472c848cccc577d8cfd21317af51/proto/camera_kit/v3/service.proto#L94\n        this.businessEventsHandler = new HandlerChainBuilder(async (request: SetBusinessEventsRequest) => {\n            await this.grpcClient.setBusinessEvents(request);\n        })\n            .map(rateLimitingHandler)\n            .map(\n                createMappingHandler((serverEvents: ServerEvent[]) => {\n                    const batch: ServerEventBatch = ServerEventBatch.fromPartial({ serverEvents });\n                    const request: SetBusinessEventsRequest = {\n                        batchEvents: {\n                            typeUrl: \"com.snapchat.analytics.blizzard.ServerEventBatch\",\n                            value: ServerEventBatch.encode(batch).finish(),\n                        },\n                    };\n                    return request;\n                }, pageVisibility)\n            )\n            .map(\n                createBatchingHandler({\n                    batchReduce: (previous: ServerEvent[] | undefined, event: ServerEvent) => {\n                        const batch = previous ?? [];\n                        batch.push(event);\n                        return batch;\n                    },\n                    isBatchComplete: (batch) => batch.length >= BUSINESS_EVENT_BATCH_MAX_SIZE,\n                    maxBatchAge: BUSINESS_EVENT_BATCH_MAX_AGE_MS,\n                    pageVisibility,\n                })\n            ).handler;\n\n        // The operational metrics handler is slightly simpler, but it has more interesting batching logic (e.g. we can\n        // sum up Count metrics, for example, rather than sending multiple single-count metrics objects).\n        this.operationalMetricsHandler = new HandlerChainBuilder(async (metrics: OperationalMetricsBundle) => {\n            await this.grpcClient.setOperationalMetrics({ metrics });\n        })\n            .map(rateLimitingHandler)\n            .map(\n                createBatchingHandler({\n                    // The batching logic here is very simple â€“ it could be improved by e.g.\n                    // computing statistics to reduce overall data sent, etc. Right now this is\n                    // premature optimization, but could become a good idea in the future.\n                    batchReduce: (previous: OperationalMetricsBundle | undefined, metric: OperationalMetric) => {\n                        const batch: OperationalMetricsBundle = { metrics: previous?.metrics ?? [] };\n\n                        // For \"count\" metrics, it's straightforward to merge them into\n                        // a single metric with the same name.\n                        if (isCountMetric(metric)) {\n                            const priorCount = batch.metrics.find((m) => {\n                                return isCountMetric(m) && m.name === metric.name;\n                            });\n                            if (priorCount && isCountMetric(priorCount)) {\n                                priorCount.metric.count = `${\n                                    Number(priorCount.metric.count) + Number(metric.metric.count)\n                                }`;\n                                return batch;\n                            }\n                        }\n\n                        // For all other cases, we'll just add the metric separately to the batch.\n                        batch.metrics.push(metric);\n                        return batch;\n                    },\n                    isBatchComplete: (bundle) => bundle.metrics.length >= METRIC_BATCH_MAX_SIZE,\n                    maxBatchAge: METRIC_BATCH_MAX_AGE_MS,\n                    pageVisibility,\n                })\n            ).handler;\n    }\n\n    async setBusinessEvents(event: ServerEvent): Promise<void> {\n        await this.businessEventsHandler(event);\n    }\n\n    async setOperationalMetrics(metric: Metric): Promise<void> {\n        await Promise.all(\n            metric.toOperationalMetric().map((metric) => {\n                return this.operationalMetricsHandler(metric);\n            })\n        );\n    }\n}\n\nconst validExternalMetrics = /^push2web_/;\n\n/** @internal */\nexport const externalMetricsSubjectFactory = Injectable(\"externalMetricsSubject\", () => new Subject<Metric>());\n\nexport const metricsClientFactory = Injectable(\n    \"metricsClient\",\n    [externalMetricsSubjectFactory.token, grpcHandlerFactory.token, pageVisibilityFactory.token] as const,\n    (externalMetricsSubjectFactory: Subject<Metric>, grpcHandler: GrpcHandler, pageVisibility: PageVisibility) => {\n        const metrics = new MetricsClient(createTsProtoClient(MetricsDefinition, grpcHandler), pageVisibility);\n        externalMetricsSubjectFactory.pipe(filter((metric) => validExternalMetrics.test(metric.name))).subscribe({\n            next: (metric) => {\n                metrics.setOperationalMetrics(metric);\n            },\n        });\n        return metrics;\n    }\n);\n"]}